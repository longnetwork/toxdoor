# generated by 'clang2py'
# flags '--doc --show-definition-location --exclude-includes --clang-args=-I/usr/lib/gcc/x86_64-linux-gnu/9/include/ -target x86_64-linux-gnu c-toxcore/toxcore/tox.h -t x86_64-linux-gnu -o tox_lin.py'
# -*- coding: utf-8 -*-
#
# TARGET arch is: ['-target', 'x86_64-linux-gnu', '-I/usr/lib/gcc/x86_64-linux-gnu/9/include/', '-target', 'x86_64-linux-gnu']
# WORD_SIZE is: 8
# POINTER_SIZE is: 8
# LONGDOUBLE_SIZE is: 16
#
import ctypes


class AsDictMixin:
    @classmethod
    def as_dict(cls, self):
        result = {}
        if not isinstance(self, AsDictMixin):
            # not a structure, assume it's already a python object
            return self
        if not hasattr(cls, "_fields_"):
            return result
        # sys.version_info >= (3, 5)
        # for (field, *_) in cls._fields_:  # noqa
        for field_tuple in cls._fields_:  # noqa
            field = field_tuple[0]
            if field.startswith('PADDING_'):
                continue
            value = getattr(self, field)
            type_ = type(value)
            if hasattr(value, "_length_") and hasattr(value, "_type_"):
                # array
                type_ = type_._type_
                if hasattr(type_, 'as_dict'):
                    value = [type_.as_dict(v) for v in value]
                else:
                    value = [i for i in value]
            elif hasattr(value, "contents") and hasattr(value, "_type_"):
                # pointer
                try:
                    if not hasattr(type_, "as_dict"):
                        value = value.contents
                    else:
                        type_ = type_._type_
                        value = type_.as_dict(value.contents)
                except ValueError:
                    # nullptr
                    value = None
            elif isinstance(value, AsDictMixin):
                # other structure
                value = type_.as_dict(value)
            result[field] = value
        return result


class Structure(ctypes.Structure, AsDictMixin):

    def __init__(self, *args, **kwds):
        # We don't want to use positional arguments fill PADDING_* fields

        args = dict(zip(self.__class__._field_names_(), args))
        args.update(kwds)
        super(Structure, self).__init__(**args)

    @classmethod
    def _field_names_(cls):
        if hasattr(cls, '_fields_'):
            return (f[0] for f in cls._fields_ if not f[0].startswith('PADDING'))
        else:
            return ()

    @classmethod
    def get_type(cls, field):
        for f in cls._fields_:
            if f[0] == field:
                return f[1]
        return None

    @classmethod
    def bind(cls, bound_fields):
        fields = {}
        for name, type_ in cls._fields_:
            if hasattr(type_, "restype"):
                if name in bound_fields:
                    if bound_fields[name] is None:
                        fields[name] = type_()
                    else:
                        # use a closure to capture the callback from the loop scope
                        fields[name] = (
                            type_((lambda callback: lambda *args: callback(*args))(
                                bound_fields[name]))
                        )
                    del bound_fields[name]
                else:
                    # default callback implementation (does nothing)
                    try:
                        default_ = type_(0).restype().value
                    except TypeError:
                        default_ = None
                    fields[name] = type_((
                        lambda default_: lambda *args: default_)(default_))
            else:
                # not a callback function, use default initialization
                if name in bound_fields:
                    fields[name] = bound_fields[name]
                    del bound_fields[name]
                else:
                    fields[name] = type_()
        if len(bound_fields) != 0:
            raise ValueError(
                "Cannot bind the following unknown callback(s) {}.{}".format(
                    cls.__name__, bound_fields.keys()
            ))
        return cls(**fields)


class Union(ctypes.Union, AsDictMixin):
    pass



class FunctionFactoryStub:
    def __getattr__(self, _):
      return ctypes.CFUNCTYPE(lambda y:y)

# libraries['FIXME_STUB'] explanation
# As you did not list (-l libraryname.so) a library that exports this function
# This is a non-working stub instead. 
# You can either re-run clan2py with -l /path/to/library.so
# Or manually fix this by comment the ctypes.CDLL loading
_libraries = {}
from . import FIXME_STUB; _libraries.update(FIXME_STUB = FIXME_STUB)
# if local wordsize is same as target, keep ctypes pointer function.
if ctypes.sizeof(ctypes.c_void_p) == 8:
    POINTER_T = ctypes.POINTER
else:
    class IncorrectWordSizeError(TypeError):
        pass
    # required to access _ctypes
    import _ctypes
    # Emulate a pointer class using the approriate c_int32/c_int64 type
    # The new class should have :
    # ['__module__', 'from_param', '_type_', '__dict__', '__weakref__', '__doc__']
    # but the class should be submitted to a unique instance for each base type
    # to that if A == B, POINTER_T(A) == POINTER_T(B)
    ctypes._pointer_t_type_cache = {}
    def POINTER_T(pointee):
        # a pointer should have the same length as LONG
        fake_ptr_base_type = ctypes.c_uint64
        # specific case for c_void_p
        if pointee is None: # VOID pointer type. c_void_p.
            pointee = type(None) # ctypes.c_void_p # ctypes.c_ulong
            clsname = 'c_void'
        else:
            clsname = pointee.__name__
        if clsname in ctypes._pointer_t_type_cache:
            return ctypes._pointer_t_type_cache[clsname]
        # make template
        class _T(_ctypes._SimpleCData,):
            _type_ = 'L'
            _subtype_ = pointee
            def _sub_addr_(self):
                return self.value
            def __repr__(self):
                return '%s(%d)'%(clsname, self.value)
            def contents(self):
                raise IncorrectWordSizeError('This is not a ctypes pointer.')
            def __init__(self, **args):
                raise IncorrectWordSizeError('This is not a ctypes pointer. It is not instanciable.')
        _class = type('LP_%d_%s'%(8, clsname), (_T,),{})
        ctypes._pointer_t_type_cache[clsname] = _class
        return _class

def string_cast(char_pointer, encoding='utf-8', errors='strict'):
    value = ctypes.cast(char_pointer, ctypes.c_char_p).value
    if value is not None and encoding is not None:
        value = value.decode(encoding, errors=errors)
    return value


def char_pointer_cast(string, encoding='utf-8'):
    if encoding is not None:
        try:
            string = string.encode(encoding)
        except AttributeError:
            # In Python3, bytes has no encode attribute
            pass
    string = ctypes.c_char_p(string)
    return ctypes.cast(string, POINTER_T(ctypes.c_char))



c_int128 = ctypes.c_ubyte*16
c_uint128 = c_int128
void = None
if ctypes.sizeof(ctypes.c_longdouble) == 16:
    c_long_double_t = ctypes.c_longdouble
else:
    c_long_double_t = ctypes.c_ubyte*16



# c-toxcore/toxcore/tox.h:115
class struct_Tox(Structure):
    pass

# c-toxcore/toxcore/tox.h:115
# The Tox instance type.
# The Tox instance type.
Tox = struct_Tox
# /usr/include/x86_64-linux-gnu/bits/stdint-uintn.h:26
uint32_t = ctypes.c_uint32
# c-toxcore/toxcore/tox.h:133
# c-toxcore/toxcore/tox.h 133
try:
    tox_version_major = _libraries['FIXME_STUB'].tox_version_major
    tox_version_major.restype = uint32_t
# tox_version_major()
    tox_version_major.argtypes = []
except AttributeError:
    pass
tox_version_major.__doc__ = """uint32_t tox_version_major()
    c-toxcore/toxcore/tox.h:133"""
# c-toxcore/toxcore/tox.h:143
# c-toxcore/toxcore/tox.h 143
try:
    tox_version_minor = _libraries['FIXME_STUB'].tox_version_minor
    tox_version_minor.restype = uint32_t
# tox_version_minor()
    tox_version_minor.argtypes = []
except AttributeError:
    pass
tox_version_minor.__doc__ = """uint32_t tox_version_minor()
    c-toxcore/toxcore/tox.h:143"""
# c-toxcore/toxcore/tox.h:153
# c-toxcore/toxcore/tox.h 153
try:
    tox_version_patch = _libraries['FIXME_STUB'].tox_version_patch
    tox_version_patch.restype = uint32_t
# tox_version_patch()
    tox_version_patch.argtypes = []
except AttributeError:
    pass
tox_version_patch.__doc__ = """uint32_t tox_version_patch()
    c-toxcore/toxcore/tox.h:153"""
# c-toxcore/toxcore/tox.h:184
# Return whether the compiled library version is compatible with the passed
# version numbers.
# Return whether the compiled library version is compatible with the passed
# version numbers.
# c-toxcore/toxcore/tox.h 184
try:
    tox_version_is_compatible = _libraries['FIXME_STUB'].tox_version_is_compatible
    tox_version_is_compatible.restype = ctypes.c_bool
# tox_version_is_compatible(major, minor, patch)
    tox_version_is_compatible.argtypes = [uint32_t, uint32_t, uint32_t]
except AttributeError:
    pass
tox_version_is_compatible.__doc__ = """c_bool tox_version_is_compatible(uint32_t major, uint32_t minor, uint32_t patch)
    c-toxcore/toxcore/tox.h:184"""
# c-toxcore/toxcore/tox.h:208
# c-toxcore/toxcore/tox.h 208
try:
    tox_public_key_size = _libraries['FIXME_STUB'].tox_public_key_size
    tox_public_key_size.restype = uint32_t
# tox_public_key_size()
    tox_public_key_size.argtypes = []
except AttributeError:
    pass
tox_public_key_size.__doc__ = """uint32_t tox_public_key_size()
    c-toxcore/toxcore/tox.h:208"""
# c-toxcore/toxcore/tox.h:215
# c-toxcore/toxcore/tox.h 215
try:
    tox_secret_key_size = _libraries['FIXME_STUB'].tox_secret_key_size
    tox_secret_key_size.restype = uint32_t
# tox_secret_key_size()
    tox_secret_key_size.argtypes = []
except AttributeError:
    pass
tox_secret_key_size.__doc__ = """uint32_t tox_secret_key_size()
    c-toxcore/toxcore/tox.h:215"""
# c-toxcore/toxcore/tox.h:224
# c-toxcore/toxcore/tox.h 224
try:
    tox_conference_uid_size = _libraries['FIXME_STUB'].tox_conference_uid_size
    tox_conference_uid_size.restype = uint32_t
# tox_conference_uid_size()
    tox_conference_uid_size.argtypes = []
except AttributeError:
    pass
tox_conference_uid_size.__doc__ = """uint32_t tox_conference_uid_size()
    c-toxcore/toxcore/tox.h:224"""
# c-toxcore/toxcore/tox.h:231
# c-toxcore/toxcore/tox.h 231
try:
    tox_conference_id_size = _libraries['FIXME_STUB'].tox_conference_id_size
    tox_conference_id_size.restype = uint32_t
# tox_conference_id_size()
    tox_conference_id_size.argtypes = []
except AttributeError:
    pass
tox_conference_id_size.__doc__ = """uint32_t tox_conference_id_size()
    c-toxcore/toxcore/tox.h:231"""
# c-toxcore/toxcore/tox.h:238
# c-toxcore/toxcore/tox.h 238
try:
    tox_nospam_size = _libraries['FIXME_STUB'].tox_nospam_size
    tox_nospam_size.restype = uint32_t
# tox_nospam_size()
    tox_nospam_size.argtypes = []
except AttributeError:
    pass
tox_nospam_size.__doc__ = """uint32_t tox_nospam_size()
    c-toxcore/toxcore/tox.h:238"""
# c-toxcore/toxcore/tox.h:252
# c-toxcore/toxcore/tox.h 252
try:
    tox_address_size = _libraries['FIXME_STUB'].tox_address_size
    tox_address_size.restype = uint32_t
# tox_address_size()
    tox_address_size.argtypes = []
except AttributeError:
    pass
tox_address_size.__doc__ = """uint32_t tox_address_size()
    c-toxcore/toxcore/tox.h:252"""
# c-toxcore/toxcore/tox.h:261
# c-toxcore/toxcore/tox.h 261
try:
    tox_max_name_length = _libraries['FIXME_STUB'].tox_max_name_length
    tox_max_name_length.restype = uint32_t
# tox_max_name_length()
    tox_max_name_length.argtypes = []
except AttributeError:
    pass
tox_max_name_length.__doc__ = """uint32_t tox_max_name_length()
    c-toxcore/toxcore/tox.h:261"""
# c-toxcore/toxcore/tox.h:270
# c-toxcore/toxcore/tox.h 270
try:
    tox_max_status_message_length = _libraries['FIXME_STUB'].tox_max_status_message_length
    tox_max_status_message_length.restype = uint32_t
# tox_max_status_message_length()
    tox_max_status_message_length.argtypes = []
except AttributeError:
    pass
tox_max_status_message_length.__doc__ = """uint32_t tox_max_status_message_length()
    c-toxcore/toxcore/tox.h:270"""
# c-toxcore/toxcore/tox.h:279
# c-toxcore/toxcore/tox.h 279
try:
    tox_max_friend_request_length = _libraries['FIXME_STUB'].tox_max_friend_request_length
    tox_max_friend_request_length.restype = uint32_t
# tox_max_friend_request_length()
    tox_max_friend_request_length.argtypes = []
except AttributeError:
    pass
tox_max_friend_request_length.__doc__ = """uint32_t tox_max_friend_request_length()
    c-toxcore/toxcore/tox.h:279"""
# c-toxcore/toxcore/tox.h:288
# c-toxcore/toxcore/tox.h 288
try:
    tox_max_message_length = _libraries['FIXME_STUB'].tox_max_message_length
    tox_max_message_length.restype = uint32_t
# tox_max_message_length()
    tox_max_message_length.argtypes = []
except AttributeError:
    pass
tox_max_message_length.__doc__ = """uint32_t tox_max_message_length()
    c-toxcore/toxcore/tox.h:288"""
# c-toxcore/toxcore/tox.h:297
# c-toxcore/toxcore/tox.h 297
try:
    tox_max_custom_packet_size = _libraries['FIXME_STUB'].tox_max_custom_packet_size
    tox_max_custom_packet_size.restype = uint32_t
# tox_max_custom_packet_size()
    tox_max_custom_packet_size.argtypes = []
except AttributeError:
    pass
tox_max_custom_packet_size.__doc__ = """uint32_t tox_max_custom_packet_size()
    c-toxcore/toxcore/tox.h:297"""
# c-toxcore/toxcore/tox.h:304
# c-toxcore/toxcore/tox.h 304
try:
    tox_hash_length = _libraries['FIXME_STUB'].tox_hash_length
    tox_hash_length.restype = uint32_t
# tox_hash_length()
    tox_hash_length.argtypes = []
except AttributeError:
    pass
tox_hash_length.__doc__ = """uint32_t tox_hash_length()
    c-toxcore/toxcore/tox.h:304"""
# c-toxcore/toxcore/tox.h:311
# c-toxcore/toxcore/tox.h 311
try:
    tox_file_id_length = _libraries['FIXME_STUB'].tox_file_id_length
    tox_file_id_length.restype = uint32_t
# tox_file_id_length()
    tox_file_id_length.argtypes = []
except AttributeError:
    pass
tox_file_id_length.__doc__ = """uint32_t tox_file_id_length()
    c-toxcore/toxcore/tox.h:311"""
# c-toxcore/toxcore/tox.h:320
# c-toxcore/toxcore/tox.h 320
try:
    tox_max_filename_length = _libraries['FIXME_STUB'].tox_max_filename_length
    tox_max_filename_length.restype = uint32_t
# tox_max_filename_length()
    tox_max_filename_length.argtypes = []
except AttributeError:
    pass
tox_max_filename_length.__doc__ = """uint32_t tox_max_filename_length()
    c-toxcore/toxcore/tox.h:320"""
# c-toxcore/toxcore/tox.h:332
# c-toxcore/toxcore/tox.h 332
try:
    tox_max_hostname_length = _libraries['FIXME_STUB'].tox_max_hostname_length
    tox_max_hostname_length.restype = uint32_t
# tox_max_hostname_length()
    tox_max_hostname_length.argtypes = []
except AttributeError:
    pass
tox_max_hostname_length.__doc__ = """uint32_t tox_max_hostname_length()
    c-toxcore/toxcore/tox.h:332"""
# c-toxcore/toxcore/tox.h:343
# Represents the possible statuses a client can have.
# Represents the possible statuses a client can have.

# values for enumeration 'Tox_User_Status'
Tox_User_Status__enumvalues = {
    0: 'TOX_USER_STATUS_NONE',
    1: 'TOX_USER_STATUS_AWAY',
    2: 'TOX_USER_STATUS_BUSY',
}
TOX_USER_STATUS_NONE = 0
TOX_USER_STATUS_AWAY = 1
TOX_USER_STATUS_BUSY = 2
Tox_User_Status = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:364
# c-toxcore/toxcore/tox.h 364
try:
    tox_user_status_to_string = _libraries['FIXME_STUB'].tox_user_status_to_string
    tox_user_status_to_string.restype = POINTER_T(ctypes.c_char)
# tox_user_status_to_string(value)
    tox_user_status_to_string.argtypes = [Tox_User_Status]
except AttributeError:
    pass
tox_user_status_to_string.__doc__ = """LP_c_char tox_user_status_to_string(Tox_User_Status value)
    c-toxcore/toxcore/tox.h:364"""
# c-toxcore/toxcore/tox.h:370
# Represents message types for tox_friend_send_message and conference messages.
# Represents message types for tox_friend_send_message and conference messages.

# values for enumeration 'Tox_Message_Type'
Tox_Message_Type__enumvalues = {
    0: 'TOX_MESSAGE_TYPE_NORMAL',
    1: 'TOX_MESSAGE_TYPE_ACTION',
}
TOX_MESSAGE_TYPE_NORMAL = 0
TOX_MESSAGE_TYPE_ACTION = 1
Tox_Message_Type = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:385
# c-toxcore/toxcore/tox.h 385
try:
    tox_message_type_to_string = _libraries['FIXME_STUB'].tox_message_type_to_string
    tox_message_type_to_string.restype = POINTER_T(ctypes.c_char)
# tox_message_type_to_string(value)
    tox_message_type_to_string.argtypes = [Tox_Message_Type]
except AttributeError:
    pass
tox_message_type_to_string.__doc__ = """LP_c_char tox_message_type_to_string(Tox_Message_Type value)
    c-toxcore/toxcore/tox.h:385"""
# c-toxcore/toxcore/tox.h:396
# Type of proxy used to connect to TCP relays.
# Type of proxy used to connect to TCP relays.

# values for enumeration 'Tox_Proxy_Type'
Tox_Proxy_Type__enumvalues = {
    0: 'TOX_PROXY_TYPE_NONE',
    1: 'TOX_PROXY_TYPE_HTTP',
    2: 'TOX_PROXY_TYPE_SOCKS5',
}
TOX_PROXY_TYPE_NONE = 0
TOX_PROXY_TYPE_HTTP = 1
TOX_PROXY_TYPE_SOCKS5 = 2
Tox_Proxy_Type = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:415
# c-toxcore/toxcore/tox.h 415
try:
    tox_proxy_type_to_string = _libraries['FIXME_STUB'].tox_proxy_type_to_string
    tox_proxy_type_to_string.restype = POINTER_T(ctypes.c_char)
# tox_proxy_type_to_string(value)
    tox_proxy_type_to_string.argtypes = [Tox_Proxy_Type]
except AttributeError:
    pass
tox_proxy_type_to_string.__doc__ = """LP_c_char tox_proxy_type_to_string(Tox_Proxy_Type value)
    c-toxcore/toxcore/tox.h:415"""
# c-toxcore/toxcore/tox.h:420
# Type of savedata to create the Tox instance from.
# Type of savedata to create the Tox instance from.

# values for enumeration 'Tox_Savedata_Type'
Tox_Savedata_Type__enumvalues = {
    0: 'TOX_SAVEDATA_TYPE_NONE',
    1: 'TOX_SAVEDATA_TYPE_TOX_SAVE',
    2: 'TOX_SAVEDATA_TYPE_SECRET_KEY',
}
TOX_SAVEDATA_TYPE_NONE = 0
TOX_SAVEDATA_TYPE_TOX_SAVE = 1
TOX_SAVEDATA_TYPE_SECRET_KEY = 2
Tox_Savedata_Type = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:439
# c-toxcore/toxcore/tox.h 439
try:
    tox_savedata_type_to_string = _libraries['FIXME_STUB'].tox_savedata_type_to_string
    tox_savedata_type_to_string.restype = POINTER_T(ctypes.c_char)
# tox_savedata_type_to_string(value)
    tox_savedata_type_to_string.argtypes = [Tox_Savedata_Type]
except AttributeError:
    pass
tox_savedata_type_to_string.__doc__ = """LP_c_char tox_savedata_type_to_string(Tox_Savedata_Type value)
    c-toxcore/toxcore/tox.h:439"""
# c-toxcore/toxcore/tox.h:444
# Severity level of log messages.
# Severity level of log messages.

# values for enumeration 'Tox_Log_Level'
Tox_Log_Level__enumvalues = {
    0: 'TOX_LOG_LEVEL_TRACE',
    1: 'TOX_LOG_LEVEL_DEBUG',
    2: 'TOX_LOG_LEVEL_INFO',
    3: 'TOX_LOG_LEVEL_WARNING',
    4: 'TOX_LOG_LEVEL_ERROR',
}
TOX_LOG_LEVEL_TRACE = 0
TOX_LOG_LEVEL_DEBUG = 1
TOX_LOG_LEVEL_INFO = 2
TOX_LOG_LEVEL_WARNING = 3
TOX_LOG_LEVEL_ERROR = 4
Tox_Log_Level = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:473
# c-toxcore/toxcore/tox.h 473
try:
    tox_log_level_to_string = _libraries['FIXME_STUB'].tox_log_level_to_string
    tox_log_level_to_string.restype = POINTER_T(ctypes.c_char)
# tox_log_level_to_string(value)
    tox_log_level_to_string.argtypes = [Tox_Log_Level]
except AttributeError:
    pass
tox_log_level_to_string.__doc__ = """LP_c_char tox_log_level_to_string(Tox_Log_Level value)
    c-toxcore/toxcore/tox.h:473"""
# c-toxcore/toxcore/tox.h:496
# This event is triggered when Tox logs an internal message.
# This event is triggered when Tox logs an internal message.
# c-toxcore/toxcore/tox.h:115
tox_log_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), Tox_Log_Level, POINTER_T(ctypes.c_char), ctypes.c_uint32, POINTER_T(ctypes.c_char), POINTER_T(ctypes.c_char), POINTER_T(None))
# c-toxcore/toxcore/tox.h:514
# This struct contains all the startup options for Tox.
# This struct contains all the startup options for Tox.
class struct_Tox_Options(Structure):
    pass

# c-toxcore/toxcore/tox.h:115
struct_Tox_Options._pack_ = 1 # source:False
struct_Tox_Options._fields_ = [
    ('ipv6_enabled', ctypes.c_bool),
    ('udp_enabled', ctypes.c_bool),
    ('local_discovery_enabled', ctypes.c_bool),
    ('dht_announcements_enabled', ctypes.c_bool),
    ('proxy_type', Tox_Proxy_Type),
    ('proxy_host', POINTER_T(ctypes.c_char)),
    ('proxy_port', ctypes.c_uint16),
    ('start_port', ctypes.c_uint16),
    ('end_port', ctypes.c_uint16),
    ('tcp_port', ctypes.c_uint16),
    ('hole_punching_enabled', ctypes.c_bool),
    ('PADDING_0', ctypes.c_ubyte * 3),
    ('savedata_type', Tox_Savedata_Type),
    ('savedata_data', POINTER_T(ctypes.c_ubyte)),
    ('savedata_length', ctypes.c_uint64),
    ('log_callback', ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), Tox_Log_Level, POINTER_T(ctypes.c_char), ctypes.c_uint32, POINTER_T(ctypes.c_char), POINTER_T(ctypes.c_char), POINTER_T(None))),
    ('log_user_data', POINTER_T(None)),
    ('experimental_thread_safety', ctypes.c_bool),
    ('experimental_groups_persistence', ctypes.c_bool),
    ('PADDING_1', ctypes.c_ubyte * 6),
]

Tox_Options = struct_Tox_Options
# c-toxcore/toxcore/tox.h:673
# c-toxcore/toxcore/tox.h 673
try:
    tox_options_get_ipv6_enabled = _libraries['FIXME_STUB'].tox_options_get_ipv6_enabled
    tox_options_get_ipv6_enabled.restype = ctypes.c_bool
# tox_options_get_ipv6_enabled(options)
    tox_options_get_ipv6_enabled.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_ipv6_enabled.__doc__ = """c_bool tox_options_get_ipv6_enabled(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:673"""
# c-toxcore/toxcore/tox.h:675
# c-toxcore/toxcore/tox.h 675
try:
    tox_options_set_ipv6_enabled = _libraries['FIXME_STUB'].tox_options_set_ipv6_enabled
    tox_options_set_ipv6_enabled.restype = None
# tox_options_set_ipv6_enabled(options, ipv6_enabled)
    tox_options_set_ipv6_enabled.argtypes = [POINTER_T(struct_Tox_Options), ctypes.c_bool]
except AttributeError:
    pass
tox_options_set_ipv6_enabled.__doc__ = """None tox_options_set_ipv6_enabled(LP_struct_Tox_Options options, c_bool ipv6_enabled)
    c-toxcore/toxcore/tox.h:675"""
# c-toxcore/toxcore/tox.h:677
# c-toxcore/toxcore/tox.h 677
try:
    tox_options_get_udp_enabled = _libraries['FIXME_STUB'].tox_options_get_udp_enabled
    tox_options_get_udp_enabled.restype = ctypes.c_bool
# tox_options_get_udp_enabled(options)
    tox_options_get_udp_enabled.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_udp_enabled.__doc__ = """c_bool tox_options_get_udp_enabled(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:677"""
# c-toxcore/toxcore/tox.h:679
# c-toxcore/toxcore/tox.h 679
try:
    tox_options_set_udp_enabled = _libraries['FIXME_STUB'].tox_options_set_udp_enabled
    tox_options_set_udp_enabled.restype = None
# tox_options_set_udp_enabled(options, udp_enabled)
    tox_options_set_udp_enabled.argtypes = [POINTER_T(struct_Tox_Options), ctypes.c_bool]
except AttributeError:
    pass
tox_options_set_udp_enabled.__doc__ = """None tox_options_set_udp_enabled(LP_struct_Tox_Options options, c_bool udp_enabled)
    c-toxcore/toxcore/tox.h:679"""
# c-toxcore/toxcore/tox.h:681
# c-toxcore/toxcore/tox.h 681
try:
    tox_options_get_local_discovery_enabled = _libraries['FIXME_STUB'].tox_options_get_local_discovery_enabled
    tox_options_get_local_discovery_enabled.restype = ctypes.c_bool
# tox_options_get_local_discovery_enabled(options)
    tox_options_get_local_discovery_enabled.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_local_discovery_enabled.__doc__ = """c_bool tox_options_get_local_discovery_enabled(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:681"""
# c-toxcore/toxcore/tox.h:683
# c-toxcore/toxcore/tox.h 683
try:
    tox_options_set_local_discovery_enabled = _libraries['FIXME_STUB'].tox_options_set_local_discovery_enabled
    tox_options_set_local_discovery_enabled.restype = None
# tox_options_set_local_discovery_enabled(options, local_discovery_enabled)
    tox_options_set_local_discovery_enabled.argtypes = [POINTER_T(struct_Tox_Options), ctypes.c_bool]
except AttributeError:
    pass
tox_options_set_local_discovery_enabled.__doc__ = """None tox_options_set_local_discovery_enabled(LP_struct_Tox_Options options, c_bool local_discovery_enabled)
    c-toxcore/toxcore/tox.h:683"""
# c-toxcore/toxcore/tox.h:685
# c-toxcore/toxcore/tox.h 685
try:
    tox_options_get_dht_announcements_enabled = _libraries['FIXME_STUB'].tox_options_get_dht_announcements_enabled
    tox_options_get_dht_announcements_enabled.restype = ctypes.c_bool
# tox_options_get_dht_announcements_enabled(options)
    tox_options_get_dht_announcements_enabled.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_dht_announcements_enabled.__doc__ = """c_bool tox_options_get_dht_announcements_enabled(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:685"""
# c-toxcore/toxcore/tox.h:687
# c-toxcore/toxcore/tox.h 687
try:
    tox_options_set_dht_announcements_enabled = _libraries['FIXME_STUB'].tox_options_set_dht_announcements_enabled
    tox_options_set_dht_announcements_enabled.restype = None
# tox_options_set_dht_announcements_enabled(options, dht_announcements_enabled)
    tox_options_set_dht_announcements_enabled.argtypes = [POINTER_T(struct_Tox_Options), ctypes.c_bool]
except AttributeError:
    pass
tox_options_set_dht_announcements_enabled.__doc__ = """None tox_options_set_dht_announcements_enabled(LP_struct_Tox_Options options, c_bool dht_announcements_enabled)
    c-toxcore/toxcore/tox.h:687"""
# c-toxcore/toxcore/tox.h:689
# c-toxcore/toxcore/tox.h 689
try:
    tox_options_get_proxy_type = _libraries['FIXME_STUB'].tox_options_get_proxy_type
    tox_options_get_proxy_type.restype = Tox_Proxy_Type
# tox_options_get_proxy_type(options)
    tox_options_get_proxy_type.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_proxy_type.__doc__ = """Tox_Proxy_Type tox_options_get_proxy_type(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:689"""
# c-toxcore/toxcore/tox.h:691
# c-toxcore/toxcore/tox.h 691
try:
    tox_options_set_proxy_type = _libraries['FIXME_STUB'].tox_options_set_proxy_type
    tox_options_set_proxy_type.restype = None
# tox_options_set_proxy_type(options, proxy_type)
    tox_options_set_proxy_type.argtypes = [POINTER_T(struct_Tox_Options), Tox_Proxy_Type]
except AttributeError:
    pass
tox_options_set_proxy_type.__doc__ = """None tox_options_set_proxy_type(LP_struct_Tox_Options options, Tox_Proxy_Type proxy_type)
    c-toxcore/toxcore/tox.h:691"""
# c-toxcore/toxcore/tox.h:693
# c-toxcore/toxcore/tox.h 693
try:
    tox_options_get_proxy_host = _libraries['FIXME_STUB'].tox_options_get_proxy_host
    tox_options_get_proxy_host.restype = POINTER_T(ctypes.c_char)
# tox_options_get_proxy_host(options)
    tox_options_get_proxy_host.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_proxy_host.__doc__ = """LP_c_char tox_options_get_proxy_host(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:693"""
# c-toxcore/toxcore/tox.h:695
# c-toxcore/toxcore/tox.h 695
try:
    tox_options_set_proxy_host = _libraries['FIXME_STUB'].tox_options_set_proxy_host
    tox_options_set_proxy_host.restype = None
# tox_options_set_proxy_host(options, proxy_host)
    tox_options_set_proxy_host.argtypes = [POINTER_T(struct_Tox_Options), POINTER_T(ctypes.c_char)]
except AttributeError:
    pass
tox_options_set_proxy_host.__doc__ = """None tox_options_set_proxy_host(LP_struct_Tox_Options options, LP_c_char proxy_host)
    c-toxcore/toxcore/tox.h:695"""
# /usr/include/x86_64-linux-gnu/bits/stdint-uintn.h:25
uint16_t = ctypes.c_uint16
# c-toxcore/toxcore/tox.h:697
# c-toxcore/toxcore/tox.h 697
try:
    tox_options_get_proxy_port = _libraries['FIXME_STUB'].tox_options_get_proxy_port
    tox_options_get_proxy_port.restype = uint16_t
# tox_options_get_proxy_port(options)
    tox_options_get_proxy_port.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_proxy_port.__doc__ = """uint16_t tox_options_get_proxy_port(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:697"""
# c-toxcore/toxcore/tox.h:699
# c-toxcore/toxcore/tox.h 699
try:
    tox_options_set_proxy_port = _libraries['FIXME_STUB'].tox_options_set_proxy_port
    tox_options_set_proxy_port.restype = None
# tox_options_set_proxy_port(options, proxy_port)
    tox_options_set_proxy_port.argtypes = [POINTER_T(struct_Tox_Options), uint16_t]
except AttributeError:
    pass
tox_options_set_proxy_port.__doc__ = """None tox_options_set_proxy_port(LP_struct_Tox_Options options, uint16_t proxy_port)
    c-toxcore/toxcore/tox.h:699"""
# c-toxcore/toxcore/tox.h:701
# c-toxcore/toxcore/tox.h 701
try:
    tox_options_get_start_port = _libraries['FIXME_STUB'].tox_options_get_start_port
    tox_options_get_start_port.restype = uint16_t
# tox_options_get_start_port(options)
    tox_options_get_start_port.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_start_port.__doc__ = """uint16_t tox_options_get_start_port(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:701"""
# c-toxcore/toxcore/tox.h:703
# c-toxcore/toxcore/tox.h 703
try:
    tox_options_set_start_port = _libraries['FIXME_STUB'].tox_options_set_start_port
    tox_options_set_start_port.restype = None
# tox_options_set_start_port(options, start_port)
    tox_options_set_start_port.argtypes = [POINTER_T(struct_Tox_Options), uint16_t]
except AttributeError:
    pass
tox_options_set_start_port.__doc__ = """None tox_options_set_start_port(LP_struct_Tox_Options options, uint16_t start_port)
    c-toxcore/toxcore/tox.h:703"""
# c-toxcore/toxcore/tox.h:705
# c-toxcore/toxcore/tox.h 705
try:
    tox_options_get_end_port = _libraries['FIXME_STUB'].tox_options_get_end_port
    tox_options_get_end_port.restype = uint16_t
# tox_options_get_end_port(options)
    tox_options_get_end_port.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_end_port.__doc__ = """uint16_t tox_options_get_end_port(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:705"""
# c-toxcore/toxcore/tox.h:707
# c-toxcore/toxcore/tox.h 707
try:
    tox_options_set_end_port = _libraries['FIXME_STUB'].tox_options_set_end_port
    tox_options_set_end_port.restype = None
# tox_options_set_end_port(options, end_port)
    tox_options_set_end_port.argtypes = [POINTER_T(struct_Tox_Options), uint16_t]
except AttributeError:
    pass
tox_options_set_end_port.__doc__ = """None tox_options_set_end_port(LP_struct_Tox_Options options, uint16_t end_port)
    c-toxcore/toxcore/tox.h:707"""
# c-toxcore/toxcore/tox.h:709
# c-toxcore/toxcore/tox.h 709
try:
    tox_options_get_tcp_port = _libraries['FIXME_STUB'].tox_options_get_tcp_port
    tox_options_get_tcp_port.restype = uint16_t
# tox_options_get_tcp_port(options)
    tox_options_get_tcp_port.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_tcp_port.__doc__ = """uint16_t tox_options_get_tcp_port(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:709"""
# c-toxcore/toxcore/tox.h:711
# c-toxcore/toxcore/tox.h 711
try:
    tox_options_set_tcp_port = _libraries['FIXME_STUB'].tox_options_set_tcp_port
    tox_options_set_tcp_port.restype = None
# tox_options_set_tcp_port(options, tcp_port)
    tox_options_set_tcp_port.argtypes = [POINTER_T(struct_Tox_Options), uint16_t]
except AttributeError:
    pass
tox_options_set_tcp_port.__doc__ = """None tox_options_set_tcp_port(LP_struct_Tox_Options options, uint16_t tcp_port)
    c-toxcore/toxcore/tox.h:711"""
# c-toxcore/toxcore/tox.h:713
# c-toxcore/toxcore/tox.h 713
try:
    tox_options_get_hole_punching_enabled = _libraries['FIXME_STUB'].tox_options_get_hole_punching_enabled
    tox_options_get_hole_punching_enabled.restype = ctypes.c_bool
# tox_options_get_hole_punching_enabled(options)
    tox_options_get_hole_punching_enabled.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_hole_punching_enabled.__doc__ = """c_bool tox_options_get_hole_punching_enabled(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:713"""
# c-toxcore/toxcore/tox.h:715
# c-toxcore/toxcore/tox.h 715
try:
    tox_options_set_hole_punching_enabled = _libraries['FIXME_STUB'].tox_options_set_hole_punching_enabled
    tox_options_set_hole_punching_enabled.restype = None
# tox_options_set_hole_punching_enabled(options, hole_punching_enabled)
    tox_options_set_hole_punching_enabled.argtypes = [POINTER_T(struct_Tox_Options), ctypes.c_bool]
except AttributeError:
    pass
tox_options_set_hole_punching_enabled.__doc__ = """None tox_options_set_hole_punching_enabled(LP_struct_Tox_Options options, c_bool hole_punching_enabled)
    c-toxcore/toxcore/tox.h:715"""
# c-toxcore/toxcore/tox.h:717
# c-toxcore/toxcore/tox.h 717
try:
    tox_options_get_savedata_type = _libraries['FIXME_STUB'].tox_options_get_savedata_type
    tox_options_get_savedata_type.restype = Tox_Savedata_Type
# tox_options_get_savedata_type(options)
    tox_options_get_savedata_type.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_savedata_type.__doc__ = """Tox_Savedata_Type tox_options_get_savedata_type(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:717"""
# c-toxcore/toxcore/tox.h:719
# c-toxcore/toxcore/tox.h 719
try:
    tox_options_set_savedata_type = _libraries['FIXME_STUB'].tox_options_set_savedata_type
    tox_options_set_savedata_type.restype = None
# tox_options_set_savedata_type(options, savedata_type)
    tox_options_set_savedata_type.argtypes = [POINTER_T(struct_Tox_Options), Tox_Savedata_Type]
except AttributeError:
    pass
tox_options_set_savedata_type.__doc__ = """None tox_options_set_savedata_type(LP_struct_Tox_Options options, Tox_Savedata_Type savedata_type)
    c-toxcore/toxcore/tox.h:719"""
# c-toxcore/toxcore/tox.h:721
# c-toxcore/toxcore/tox.h 721
try:
    tox_options_get_savedata_data = _libraries['FIXME_STUB'].tox_options_get_savedata_data
    tox_options_get_savedata_data.restype = POINTER_T(ctypes.c_ubyte)
# tox_options_get_savedata_data(options)
    tox_options_get_savedata_data.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_savedata_data.__doc__ = """LP_c_ubyte tox_options_get_savedata_data(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:721"""
# /usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h:209
size_t = ctypes.c_uint64
# c-toxcore/toxcore/tox.h:723
# c-toxcore/toxcore/tox.h 723
try:
    tox_options_set_savedata_data = _libraries['FIXME_STUB'].tox_options_set_savedata_data
    tox_options_set_savedata_data.restype = None
# tox_options_set_savedata_data(options, savedata_data, length)
    tox_options_set_savedata_data.argtypes = [POINTER_T(struct_Tox_Options), ctypes.c_ubyte * 0, size_t]
except AttributeError:
    pass
tox_options_set_savedata_data.__doc__ = """None tox_options_set_savedata_data(LP_struct_Tox_Options options, array_c_ubyte savedata_data, size_t length)
    c-toxcore/toxcore/tox.h:723"""
# c-toxcore/toxcore/tox.h:725
# c-toxcore/toxcore/tox.h 725
try:
    tox_options_get_savedata_length = _libraries['FIXME_STUB'].tox_options_get_savedata_length
    tox_options_get_savedata_length.restype = size_t
# tox_options_get_savedata_length(options)
    tox_options_get_savedata_length.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_savedata_length.__doc__ = """size_t tox_options_get_savedata_length(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:725"""
# c-toxcore/toxcore/tox.h:727
# c-toxcore/toxcore/tox.h 727
try:
    tox_options_set_savedata_length = _libraries['FIXME_STUB'].tox_options_set_savedata_length
    tox_options_set_savedata_length.restype = None
# tox_options_set_savedata_length(options, savedata_length)
    tox_options_set_savedata_length.argtypes = [POINTER_T(struct_Tox_Options), size_t]
except AttributeError:
    pass
tox_options_set_savedata_length.__doc__ = """None tox_options_set_savedata_length(LP_struct_Tox_Options options, size_t savedata_length)
    c-toxcore/toxcore/tox.h:727"""
# c-toxcore/toxcore/tox.h:729
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 729
try:
    tox_options_get_log_callback = _libraries['FIXME_STUB'].tox_options_get_log_callback
    tox_options_get_log_callback.restype = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), Tox_Log_Level, POINTER_T(ctypes.c_char), ctypes.c_uint32, POINTER_T(ctypes.c_char), POINTER_T(ctypes.c_char), POINTER_T(None))
# tox_options_get_log_callback(options)
    tox_options_get_log_callback.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_log_callback.__doc__ = """LP_FP_ tox_options_get_log_callback(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:729"""
# c-toxcore/toxcore/tox.h:731
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 731
try:
    tox_options_set_log_callback = _libraries['FIXME_STUB'].tox_options_set_log_callback
    tox_options_set_log_callback.restype = None
# tox_options_set_log_callback(options, log_callback)
    tox_options_set_log_callback.argtypes = [POINTER_T(struct_Tox_Options), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), Tox_Log_Level, POINTER_T(ctypes.c_char), ctypes.c_uint32, POINTER_T(ctypes.c_char), POINTER_T(ctypes.c_char), POINTER_T(None))]
except AttributeError:
    pass
tox_options_set_log_callback.__doc__ = """None tox_options_set_log_callback(LP_struct_Tox_Options options, LP_FP_ log_callback)
    c-toxcore/toxcore/tox.h:731"""
# c-toxcore/toxcore/tox.h:733
# c-toxcore/toxcore/tox.h 733
try:
    tox_options_get_log_user_data = _libraries['FIXME_STUB'].tox_options_get_log_user_data
    tox_options_get_log_user_data.restype = POINTER_T(None)
# tox_options_get_log_user_data(options)
    tox_options_get_log_user_data.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_log_user_data.__doc__ = """LP_None tox_options_get_log_user_data(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:733"""
# c-toxcore/toxcore/tox.h:735
# c-toxcore/toxcore/tox.h 735
try:
    tox_options_set_log_user_data = _libraries['FIXME_STUB'].tox_options_set_log_user_data
    tox_options_set_log_user_data.restype = None
# tox_options_set_log_user_data(options, log_user_data)
    tox_options_set_log_user_data.argtypes = [POINTER_T(struct_Tox_Options), POINTER_T(None)]
except AttributeError:
    pass
tox_options_set_log_user_data.__doc__ = """None tox_options_set_log_user_data(LP_struct_Tox_Options options, LP_None log_user_data)
    c-toxcore/toxcore/tox.h:735"""
# c-toxcore/toxcore/tox.h:737
# c-toxcore/toxcore/tox.h 737
try:
    tox_options_get_experimental_thread_safety = _libraries['FIXME_STUB'].tox_options_get_experimental_thread_safety
    tox_options_get_experimental_thread_safety.restype = ctypes.c_bool
# tox_options_get_experimental_thread_safety(options)
    tox_options_get_experimental_thread_safety.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_experimental_thread_safety.__doc__ = """c_bool tox_options_get_experimental_thread_safety(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:737"""
# c-toxcore/toxcore/tox.h:739
# c-toxcore/toxcore/tox.h 739
try:
    tox_options_set_experimental_thread_safety = _libraries['FIXME_STUB'].tox_options_set_experimental_thread_safety
    tox_options_set_experimental_thread_safety.restype = None
# tox_options_set_experimental_thread_safety(options, experimental_thread_safety)
    tox_options_set_experimental_thread_safety.argtypes = [POINTER_T(struct_Tox_Options), ctypes.c_bool]
except AttributeError:
    pass
tox_options_set_experimental_thread_safety.__doc__ = """None tox_options_set_experimental_thread_safety(LP_struct_Tox_Options options, c_bool experimental_thread_safety)
    c-toxcore/toxcore/tox.h:739"""
# c-toxcore/toxcore/tox.h:741
# c-toxcore/toxcore/tox.h 741
try:
    tox_options_get_experimental_groups_persistence = _libraries['FIXME_STUB'].tox_options_get_experimental_groups_persistence
    tox_options_get_experimental_groups_persistence.restype = ctypes.c_bool
# tox_options_get_experimental_groups_persistence(options)
    tox_options_get_experimental_groups_persistence.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_get_experimental_groups_persistence.__doc__ = """c_bool tox_options_get_experimental_groups_persistence(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:741"""
# c-toxcore/toxcore/tox.h:743
# c-toxcore/toxcore/tox.h 743
try:
    tox_options_set_experimental_groups_persistence = _libraries['FIXME_STUB'].tox_options_set_experimental_groups_persistence
    tox_options_set_experimental_groups_persistence.restype = None
# tox_options_set_experimental_groups_persistence(options, experimental_groups_persistence)
    tox_options_set_experimental_groups_persistence.argtypes = [POINTER_T(struct_Tox_Options), ctypes.c_bool]
except AttributeError:
    pass
tox_options_set_experimental_groups_persistence.__doc__ = """None tox_options_set_experimental_groups_persistence(LP_struct_Tox_Options options, c_bool experimental_groups_persistence)
    c-toxcore/toxcore/tox.h:743"""
# c-toxcore/toxcore/tox.h:756
# Initialises a Tox_Options object with the default options.
# Initialises a Tox_Options object with the default options.
# c-toxcore/toxcore/tox.h 756
try:
    tox_options_default = _libraries['FIXME_STUB'].tox_options_default
    tox_options_default.restype = None
# tox_options_default(options)
    tox_options_default.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_default.__doc__ = """None tox_options_default(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:756"""
# c-toxcore/toxcore/tox.h:758

# values for enumeration 'Tox_Err_Options_New'
Tox_Err_Options_New__enumvalues = {
    0: 'TOX_ERR_OPTIONS_NEW_OK',
    1: 'TOX_ERR_OPTIONS_NEW_MALLOC',
}
TOX_ERR_OPTIONS_NEW_OK = 0
TOX_ERR_OPTIONS_NEW_MALLOC = 1
Tox_Err_Options_New = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:772
# c-toxcore/toxcore/tox.h 772
try:
    tox_err_options_new_to_string = _libraries['FIXME_STUB'].tox_err_options_new_to_string
    tox_err_options_new_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_options_new_to_string(value)
    tox_err_options_new_to_string.argtypes = [Tox_Err_Options_New]
except AttributeError:
    pass
tox_err_options_new_to_string.__doc__ = """LP_c_char tox_err_options_new_to_string(Tox_Err_Options_New value)
    c-toxcore/toxcore/tox.h:772"""
# c-toxcore/toxcore/tox.h:786
# Allocates a new Tox_Options object and initialises it with the default
# options.
# Allocates a new Tox_Options object and initialises it with the default
# options.
# c-toxcore/toxcore/tox.h:758
# c-toxcore/toxcore/tox.h 786
try:
    tox_options_new = _libraries['FIXME_STUB'].tox_options_new
    tox_options_new.restype = POINTER_T(struct_Tox_Options)
# tox_options_new(error)
    tox_options_new.argtypes = [POINTER_T(Tox_Err_Options_New)]
except AttributeError:
    pass
tox_options_new.__doc__ = """LP_struct_Tox_Options tox_options_new(LP_Tox_Err_Options_New error)
    c-toxcore/toxcore/tox.h:786"""
# c-toxcore/toxcore/tox.h:794
# Releases all resources associated with an options objects.
# Releases all resources associated with an options objects.
# c-toxcore/toxcore/tox.h 794
try:
    tox_options_free = _libraries['FIXME_STUB'].tox_options_free
    tox_options_free.restype = None
# tox_options_free(options)
    tox_options_free.argtypes = [POINTER_T(struct_Tox_Options)]
except AttributeError:
    pass
tox_options_free.__doc__ = """None tox_options_free(LP_struct_Tox_Options options)
    c-toxcore/toxcore/tox.h:794"""
# c-toxcore/toxcore/tox.h:802
# @{
# @{

# values for enumeration 'Tox_Err_New'
Tox_Err_New__enumvalues = {
    0: 'TOX_ERR_NEW_OK',
    1: 'TOX_ERR_NEW_NULL',
    2: 'TOX_ERR_NEW_MALLOC',
    3: 'TOX_ERR_NEW_PORT_ALLOC',
    4: 'TOX_ERR_NEW_PROXY_BAD_TYPE',
    5: 'TOX_ERR_NEW_PROXY_BAD_HOST',
    6: 'TOX_ERR_NEW_PROXY_BAD_PORT',
    7: 'TOX_ERR_NEW_PROXY_NOT_FOUND',
    8: 'TOX_ERR_NEW_LOAD_ENCRYPTED',
    9: 'TOX_ERR_NEW_LOAD_BAD_FORMAT',
}
TOX_ERR_NEW_OK = 0
TOX_ERR_NEW_NULL = 1
TOX_ERR_NEW_MALLOC = 2
TOX_ERR_NEW_PORT_ALLOC = 3
TOX_ERR_NEW_PROXY_BAD_TYPE = 4
TOX_ERR_NEW_PROXY_BAD_HOST = 5
TOX_ERR_NEW_PROXY_BAD_PORT = 6
TOX_ERR_NEW_PROXY_NOT_FOUND = 7
TOX_ERR_NEW_LOAD_ENCRYPTED = 8
TOX_ERR_NEW_LOAD_BAD_FORMAT = 9
Tox_Err_New = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:865
# c-toxcore/toxcore/tox.h 865
try:
    tox_err_new_to_string = _libraries['FIXME_STUB'].tox_err_new_to_string
    tox_err_new_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_new_to_string(value)
    tox_err_new_to_string.argtypes = [Tox_Err_New]
except AttributeError:
    pass
tox_err_new_to_string.__doc__ = """LP_c_char tox_err_new_to_string(Tox_Err_New value)
    c-toxcore/toxcore/tox.h:865"""
# c-toxcore/toxcore/tox.h:880
# Creates and initialises a new Tox instance with the options passed.
# Creates and initialises a new Tox instance with the options passed.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:802
# c-toxcore/toxcore/tox.h 880
try:
    tox_new = _libraries['FIXME_STUB'].tox_new
    tox_new.restype = POINTER_T(struct_Tox)
# tox_new(options, error)
    tox_new.argtypes = [POINTER_T(struct_Tox_Options), POINTER_T(Tox_Err_New)]
except AttributeError:
    pass
tox_new.__doc__ = """LP_struct_Tox tox_new(LP_struct_Tox_Options options, LP_Tox_Err_New error)
    c-toxcore/toxcore/tox.h:880"""
# c-toxcore/toxcore/tox.h:889
# Releases all resources associated with the Tox instance and disconnects from
# the network.
# Releases all resources associated with the Tox instance and disconnects from
# the network.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 889
try:
    tox_kill = _libraries['FIXME_STUB'].tox_kill
    tox_kill.restype = None
# tox_kill(tox)
    tox_kill.argtypes = [POINTER_T(struct_Tox)]
except AttributeError:
    pass
tox_kill.__doc__ = """None tox_kill(LP_struct_Tox tox)
    c-toxcore/toxcore/tox.h:889"""
# c-toxcore/toxcore/tox.h:899
# Calculates the number of bytes required to store the Tox instance with
# tox_get_savedata.
# Calculates the number of bytes required to store the Tox instance with
# tox_get_savedata.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 899
try:
    tox_get_savedata_size = _libraries['FIXME_STUB'].tox_get_savedata_size
    tox_get_savedata_size.restype = size_t
# tox_get_savedata_size(tox)
    tox_get_savedata_size.argtypes = [POINTER_T(struct_Tox)]
except AttributeError:
    pass
tox_get_savedata_size.__doc__ = """size_t tox_get_savedata_size(LP_struct_Tox tox)
    c-toxcore/toxcore/tox.h:899"""
# c-toxcore/toxcore/tox.h:909
# Store all information associated with the Tox instance to a byte array.
# Store all information associated with the Tox instance to a byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 909
try:
    tox_get_savedata = _libraries['FIXME_STUB'].tox_get_savedata
    tox_get_savedata.restype = None
# tox_get_savedata(tox, savedata)
    tox_get_savedata.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 0]
except AttributeError:
    pass
tox_get_savedata.__doc__ = """None tox_get_savedata(LP_struct_Tox tox, array_c_ubyte savedata)
    c-toxcore/toxcore/tox.h:909"""
# c-toxcore/toxcore/tox.h:917
# @{
# @{

# values for enumeration 'Tox_Err_Bootstrap'
Tox_Err_Bootstrap__enumvalues = {
    0: 'TOX_ERR_BOOTSTRAP_OK',
    1: 'TOX_ERR_BOOTSTRAP_NULL',
    2: 'TOX_ERR_BOOTSTRAP_BAD_HOST',
    3: 'TOX_ERR_BOOTSTRAP_BAD_PORT',
}
TOX_ERR_BOOTSTRAP_OK = 0
TOX_ERR_BOOTSTRAP_NULL = 1
TOX_ERR_BOOTSTRAP_BAD_HOST = 2
TOX_ERR_BOOTSTRAP_BAD_PORT = 3
Tox_Err_Bootstrap = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:943
# c-toxcore/toxcore/tox.h 943
try:
    tox_err_bootstrap_to_string = _libraries['FIXME_STUB'].tox_err_bootstrap_to_string
    tox_err_bootstrap_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_bootstrap_to_string(value)
    tox_err_bootstrap_to_string.argtypes = [Tox_Err_Bootstrap]
except AttributeError:
    pass
tox_err_bootstrap_to_string.__doc__ = """LP_c_char tox_err_bootstrap_to_string(Tox_Err_Bootstrap value)
    c-toxcore/toxcore/tox.h:943"""
# c-toxcore/toxcore/tox.h:960
# Sends a "get nodes" request to the given bootstrap node with IP, port, and
# public key to setup connections.
# Sends a "get nodes" request to the given bootstrap node with IP, port, and
# public key to setup connections.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:917
# c-toxcore/toxcore/tox.h 960
try:
    tox_bootstrap = _libraries['FIXME_STUB'].tox_bootstrap
    tox_bootstrap.restype = ctypes.c_bool
# tox_bootstrap(tox, host, port, public_key, error)
    tox_bootstrap.argtypes = [POINTER_T(struct_Tox), POINTER_T(ctypes.c_char), uint16_t, ctypes.c_ubyte * 32, POINTER_T(Tox_Err_Bootstrap)]
except AttributeError:
    pass
tox_bootstrap.__doc__ = """c_bool tox_bootstrap(LP_struct_Tox tox, LP_c_char host, uint16_t port, array_c_ubyte public_key, LP_Tox_Err_Bootstrap error)
    c-toxcore/toxcore/tox.h:960"""
# c-toxcore/toxcore/tox.h:976
# Adds additional host:port pair as TCP relay.
# Adds additional host:port pair as TCP relay.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:917
# c-toxcore/toxcore/tox.h 976
try:
    tox_add_tcp_relay = _libraries['FIXME_STUB'].tox_add_tcp_relay
    tox_add_tcp_relay.restype = ctypes.c_bool
# tox_add_tcp_relay(tox, host, port, public_key, error)
    tox_add_tcp_relay.argtypes = [POINTER_T(struct_Tox), POINTER_T(ctypes.c_char), uint16_t, ctypes.c_ubyte * 32, POINTER_T(Tox_Err_Bootstrap)]
except AttributeError:
    pass
tox_add_tcp_relay.__doc__ = """c_bool tox_add_tcp_relay(LP_struct_Tox tox, LP_c_char host, uint16_t port, array_c_ubyte public_key, LP_Tox_Err_Bootstrap error)
    c-toxcore/toxcore/tox.h:976"""
# c-toxcore/toxcore/tox.h:981
# Protocols that can be used to connect to the network or friends.
# Protocols that can be used to connect to the network or friends.

# values for enumeration 'Tox_Connection'
Tox_Connection__enumvalues = {
    0: 'TOX_CONNECTION_NONE',
    1: 'TOX_CONNECTION_TCP',
    2: 'TOX_CONNECTION_UDP',
}
TOX_CONNECTION_NONE = 0
TOX_CONNECTION_TCP = 1
TOX_CONNECTION_UDP = 2
Tox_Connection = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:1011
# c-toxcore/toxcore/tox.h 1011
try:
    tox_connection_to_string = _libraries['FIXME_STUB'].tox_connection_to_string
    tox_connection_to_string.restype = POINTER_T(ctypes.c_char)
# tox_connection_to_string(value)
    tox_connection_to_string.argtypes = [Tox_Connection]
except AttributeError:
    pass
tox_connection_to_string.__doc__ = """LP_c_char tox_connection_to_string(Tox_Connection value)
    c-toxcore/toxcore/tox.h:1011"""
# c-toxcore/toxcore/tox.h:1022
# Return whether we are connected to the DHT.
# Return whether we are connected to the DHT.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1022
try:
    tox_self_get_connection_status = _libraries['FIXME_STUB'].tox_self_get_connection_status
    tox_self_get_connection_status.restype = Tox_Connection
# tox_self_get_connection_status(tox)
    tox_self_get_connection_status.argtypes = [POINTER_T(struct_Tox)]
except AttributeError:
    pass
tox_self_get_connection_status.__doc__ = """Tox_Connection tox_self_get_connection_status(LP_struct_Tox tox)
    c-toxcore/toxcore/tox.h:1022"""
# c-toxcore/toxcore/tox.h:1027
# c-toxcore/toxcore/tox.h:115
tox_self_connection_status_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), Tox_Connection, POINTER_T(None))
# c-toxcore/toxcore/tox.h:1042
# Set the callback for the `self_connection_status` event.
# Set the callback for the `self_connection_status` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1042
try:
    tox_callback_self_connection_status = _libraries['FIXME_STUB'].tox_callback_self_connection_status
    tox_callback_self_connection_status.restype = None
# tox_callback_self_connection_status(tox, callback)
    tox_callback_self_connection_status.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), Tox_Connection, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_self_connection_status.__doc__ = """None tox_callback_self_connection_status(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:1042"""
# c-toxcore/toxcore/tox.h:1048
# Return the time in milliseconds before `tox_iterate()` should be called again
# for optimal performance.
# Return the time in milliseconds before `tox_iterate()` should be called again
# for optimal performance.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1048
try:
    tox_iteration_interval = _libraries['FIXME_STUB'].tox_iteration_interval
    tox_iteration_interval.restype = uint32_t
# tox_iteration_interval(tox)
    tox_iteration_interval.argtypes = [POINTER_T(struct_Tox)]
except AttributeError:
    pass
tox_iteration_interval.__doc__ = """uint32_t tox_iteration_interval(LP_struct_Tox tox)
    c-toxcore/toxcore/tox.h:1048"""
# c-toxcore/toxcore/tox.h:1056
# The main loop that needs to be run in intervals of `tox_iteration_interval()`
# milliseconds.
# The main loop that needs to be run in intervals of `tox_iteration_interval()`
# milliseconds.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1056
try:
    tox_iterate = _libraries['FIXME_STUB'].tox_iterate
    tox_iterate.restype = None
# tox_iterate(tox, user_data)
    tox_iterate.argtypes = [POINTER_T(struct_Tox), POINTER_T(None)]
except AttributeError:
    pass
tox_iterate.__doc__ = """None tox_iterate(LP_struct_Tox tox, LP_None user_data)
    c-toxcore/toxcore/tox.h:1056"""
# c-toxcore/toxcore/tox.h:1074
# Writes the Tox friend address of the client to a byte array.
# Writes the Tox friend address of the client to a byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1074
try:
    tox_self_get_address = _libraries['FIXME_STUB'].tox_self_get_address
    tox_self_get_address.restype = None
# tox_self_get_address(tox, address)
    tox_self_get_address.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 38]
except AttributeError:
    pass
tox_self_get_address.__doc__ = """None tox_self_get_address(LP_struct_Tox tox, array_c_ubyte address)
    c-toxcore/toxcore/tox.h:1074"""
# c-toxcore/toxcore/tox.h:1084
# Set the 4-byte nospam part of the address.
# Set the 4-byte nospam part of the address.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1084
try:
    tox_self_set_nospam = _libraries['FIXME_STUB'].tox_self_set_nospam
    tox_self_set_nospam.restype = None
# tox_self_set_nospam(tox, nospam)
    tox_self_set_nospam.argtypes = [POINTER_T(struct_Tox), uint32_t]
except AttributeError:
    pass
tox_self_set_nospam.__doc__ = """None tox_self_set_nospam(LP_struct_Tox tox, uint32_t nospam)
    c-toxcore/toxcore/tox.h:1084"""
# c-toxcore/toxcore/tox.h:1091
# Get the 4-byte nospam part of the address.
# Get the 4-byte nospam part of the address.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1091
try:
    tox_self_get_nospam = _libraries['FIXME_STUB'].tox_self_get_nospam
    tox_self_get_nospam.restype = uint32_t
# tox_self_get_nospam(tox)
    tox_self_get_nospam.argtypes = [POINTER_T(struct_Tox)]
except AttributeError:
    pass
tox_self_get_nospam.__doc__ = """uint32_t tox_self_get_nospam(LP_struct_Tox tox)
    c-toxcore/toxcore/tox.h:1091"""
# c-toxcore/toxcore/tox.h:1099
# Copy the Tox Public Key (long term) from the Tox object.
# Copy the Tox Public Key (long term) from the Tox object.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1099
try:
    tox_self_get_public_key = _libraries['FIXME_STUB'].tox_self_get_public_key
    tox_self_get_public_key.restype = None
# tox_self_get_public_key(tox, public_key)
    tox_self_get_public_key.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 32]
except AttributeError:
    pass
tox_self_get_public_key.__doc__ = """None tox_self_get_public_key(LP_struct_Tox tox, array_c_ubyte public_key)
    c-toxcore/toxcore/tox.h:1099"""
# c-toxcore/toxcore/tox.h:1107
# Copy the Tox Secret Key from the Tox object.
# Copy the Tox Secret Key from the Tox object.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1107
try:
    tox_self_get_secret_key = _libraries['FIXME_STUB'].tox_self_get_secret_key
    tox_self_get_secret_key.restype = None
# tox_self_get_secret_key(tox, secret_key)
    tox_self_get_secret_key.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 32]
except AttributeError:
    pass
tox_self_get_secret_key.__doc__ = """None tox_self_get_secret_key(LP_struct_Tox tox, array_c_ubyte secret_key)
    c-toxcore/toxcore/tox.h:1107"""
# c-toxcore/toxcore/tox.h:1119
# Common error codes for all functions that set a piece of user-visible client
# information.
# Common error codes for all functions that set a piece of user-visible client
# information.

# values for enumeration 'Tox_Err_Set_Info'
Tox_Err_Set_Info__enumvalues = {
    0: 'TOX_ERR_SET_INFO_OK',
    1: 'TOX_ERR_SET_INFO_NULL',
    2: 'TOX_ERR_SET_INFO_TOO_LONG',
}
TOX_ERR_SET_INFO_OK = 0
TOX_ERR_SET_INFO_NULL = 1
TOX_ERR_SET_INFO_TOO_LONG = 2
Tox_Err_Set_Info = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:1138
# c-toxcore/toxcore/tox.h 1138
try:
    tox_err_set_info_to_string = _libraries['FIXME_STUB'].tox_err_set_info_to_string
    tox_err_set_info_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_set_info_to_string(value)
    tox_err_set_info_to_string.argtypes = [Tox_Err_Set_Info]
except AttributeError:
    pass
tox_err_set_info_to_string.__doc__ = """LP_c_char tox_err_set_info_to_string(Tox_Err_Set_Info value)
    c-toxcore/toxcore/tox.h:1138"""
# c-toxcore/toxcore/tox.h:1151
# Set the nickname for the Tox client.
# Set the nickname for the Tox client.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1119
# c-toxcore/toxcore/tox.h 1151
try:
    tox_self_set_name = _libraries['FIXME_STUB'].tox_self_set_name
    tox_self_set_name.restype = ctypes.c_bool
# tox_self_set_name(tox, name, length, error)
    tox_self_set_name.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Set_Info)]
except AttributeError:
    pass
tox_self_set_name.__doc__ = """c_bool tox_self_set_name(LP_struct_Tox tox, array_c_ubyte name, size_t length, LP_Tox_Err_Set_Info error)
    c-toxcore/toxcore/tox.h:1151"""
# c-toxcore/toxcore/tox.h:1162
# Return the length of the current nickname as passed to tox_self_set_name.
# Return the length of the current nickname as passed to tox_self_set_name.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1162
try:
    tox_self_get_name_size = _libraries['FIXME_STUB'].tox_self_get_name_size
    tox_self_get_name_size.restype = size_t
# tox_self_get_name_size(tox)
    tox_self_get_name_size.argtypes = [POINTER_T(struct_Tox)]
except AttributeError:
    pass
tox_self_get_name_size.__doc__ = """size_t tox_self_get_name_size(LP_struct_Tox tox)
    c-toxcore/toxcore/tox.h:1162"""
# c-toxcore/toxcore/tox.h:1176
# Write the nickname set by tox_self_set_name to a byte array.
# Write the nickname set by tox_self_set_name to a byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1176
try:
    tox_self_get_name = _libraries['FIXME_STUB'].tox_self_get_name
    tox_self_get_name.restype = None
# tox_self_get_name(tox, name)
    tox_self_get_name.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 0]
except AttributeError:
    pass
tox_self_get_name.__doc__ = """None tox_self_get_name(LP_struct_Tox tox, array_c_ubyte name)
    c-toxcore/toxcore/tox.h:1176"""
# c-toxcore/toxcore/tox.h:1185
# Set the client's status message.
# Set the client's status message.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1119
# c-toxcore/toxcore/tox.h 1185
try:
    tox_self_set_status_message = _libraries['FIXME_STUB'].tox_self_set_status_message
    tox_self_set_status_message.restype = ctypes.c_bool
# tox_self_set_status_message(tox, status_message, length, error)
    tox_self_set_status_message.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Set_Info)]
except AttributeError:
    pass
tox_self_set_status_message.__doc__ = """c_bool tox_self_set_status_message(LP_struct_Tox tox, array_c_ubyte status_message, size_t length, LP_Tox_Err_Set_Info error)
    c-toxcore/toxcore/tox.h:1185"""
# c-toxcore/toxcore/tox.h:1197
# Return the length of the current status message as passed to
# tox_self_set_status_message.
# Return the length of the current status message as passed to
# tox_self_set_status_message.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1197
try:
    tox_self_get_status_message_size = _libraries['FIXME_STUB'].tox_self_get_status_message_size
    tox_self_get_status_message_size.restype = size_t
# tox_self_get_status_message_size(tox)
    tox_self_get_status_message_size.argtypes = [POINTER_T(struct_Tox)]
except AttributeError:
    pass
tox_self_get_status_message_size.__doc__ = """size_t tox_self_get_status_message_size(LP_struct_Tox tox)
    c-toxcore/toxcore/tox.h:1197"""
# c-toxcore/toxcore/tox.h:1212
# Write the status message set by tox_self_set_status_message to a byte array.
# Write the status message set by tox_self_set_status_message to a byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1212
try:
    tox_self_get_status_message = _libraries['FIXME_STUB'].tox_self_get_status_message
    tox_self_get_status_message.restype = None
# tox_self_get_status_message(tox, status_message)
    tox_self_get_status_message.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 0]
except AttributeError:
    pass
tox_self_get_status_message.__doc__ = """None tox_self_get_status_message(LP_struct_Tox tox, array_c_ubyte status_message)
    c-toxcore/toxcore/tox.h:1212"""
# c-toxcore/toxcore/tox.h:1219
# Set the client's user status.
# Set the client's user status.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1219
try:
    tox_self_set_status = _libraries['FIXME_STUB'].tox_self_set_status
    tox_self_set_status.restype = None
# tox_self_set_status(tox, status)
    tox_self_set_status.argtypes = [POINTER_T(struct_Tox), Tox_User_Status]
except AttributeError:
    pass
tox_self_set_status.__doc__ = """None tox_self_set_status(LP_struct_Tox tox, Tox_User_Status status)
    c-toxcore/toxcore/tox.h:1219"""
# c-toxcore/toxcore/tox.h:1224
# Returns the client's user status.
# Returns the client's user status.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1224
try:
    tox_self_get_status = _libraries['FIXME_STUB'].tox_self_get_status
    tox_self_get_status.restype = Tox_User_Status
# tox_self_get_status(tox)
    tox_self_get_status.argtypes = [POINTER_T(struct_Tox)]
except AttributeError:
    pass
tox_self_get_status.__doc__ = """Tox_User_Status tox_self_get_status(LP_struct_Tox tox)
    c-toxcore/toxcore/tox.h:1224"""
# c-toxcore/toxcore/tox.h:1232
# @{
# @{
Tox_Friend_Number = ctypes.c_uint32
# c-toxcore/toxcore/tox.h:1234

# values for enumeration 'Tox_Err_Friend_Add'
Tox_Err_Friend_Add__enumvalues = {
    0: 'TOX_ERR_FRIEND_ADD_OK',
    1: 'TOX_ERR_FRIEND_ADD_NULL',
    2: 'TOX_ERR_FRIEND_ADD_TOO_LONG',
    3: 'TOX_ERR_FRIEND_ADD_NO_MESSAGE',
    4: 'TOX_ERR_FRIEND_ADD_OWN_KEY',
    5: 'TOX_ERR_FRIEND_ADD_ALREADY_SENT',
    6: 'TOX_ERR_FRIEND_ADD_BAD_CHECKSUM',
    7: 'TOX_ERR_FRIEND_ADD_SET_NEW_NOSPAM',
    8: 'TOX_ERR_FRIEND_ADD_MALLOC',
}
TOX_ERR_FRIEND_ADD_OK = 0
TOX_ERR_FRIEND_ADD_NULL = 1
TOX_ERR_FRIEND_ADD_TOO_LONG = 2
TOX_ERR_FRIEND_ADD_NO_MESSAGE = 3
TOX_ERR_FRIEND_ADD_OWN_KEY = 4
TOX_ERR_FRIEND_ADD_ALREADY_SENT = 5
TOX_ERR_FRIEND_ADD_BAD_CHECKSUM = 6
TOX_ERR_FRIEND_ADD_SET_NEW_NOSPAM = 7
TOX_ERR_FRIEND_ADD_MALLOC = 8
Tox_Err_Friend_Add = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:1286
# c-toxcore/toxcore/tox.h 1286
try:
    tox_err_friend_add_to_string = _libraries['FIXME_STUB'].tox_err_friend_add_to_string
    tox_err_friend_add_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_friend_add_to_string(value)
    tox_err_friend_add_to_string.argtypes = [Tox_Err_Friend_Add]
except AttributeError:
    pass
tox_err_friend_add_to_string.__doc__ = """LP_c_char tox_err_friend_add_to_string(Tox_Err_Friend_Add value)
    c-toxcore/toxcore/tox.h:1286"""
# c-toxcore/toxcore/tox.h:1311
# Add a friend to the friend list and send a friend request.
# Add a friend to the friend list and send a friend request.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1234
# c-toxcore/toxcore/tox.h 1311
try:
    tox_friend_add = _libraries['FIXME_STUB'].tox_friend_add
    tox_friend_add.restype = Tox_Friend_Number
# tox_friend_add(tox, address, message, length, error)
    tox_friend_add.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 38, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Friend_Add)]
except AttributeError:
    pass
tox_friend_add.__doc__ = """Tox_Friend_Number tox_friend_add(LP_struct_Tox tox, array_c_ubyte address, array_c_ubyte message, size_t length, LP_Tox_Err_Friend_Add error)
    c-toxcore/toxcore/tox.h:1311"""
# c-toxcore/toxcore/tox.h:1334
# Add a friend without sending a friend request.
# Add a friend without sending a friend request.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1234
# c-toxcore/toxcore/tox.h 1334
try:
    tox_friend_add_norequest = _libraries['FIXME_STUB'].tox_friend_add_norequest
    tox_friend_add_norequest.restype = Tox_Friend_Number
# tox_friend_add_norequest(tox, public_key, error)
    tox_friend_add_norequest.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 32, POINTER_T(Tox_Err_Friend_Add)]
except AttributeError:
    pass
tox_friend_add_norequest.__doc__ = """Tox_Friend_Number tox_friend_add_norequest(LP_struct_Tox tox, array_c_ubyte public_key, LP_Tox_Err_Friend_Add error)
    c-toxcore/toxcore/tox.h:1334"""
# c-toxcore/toxcore/tox.h:1337

# values for enumeration 'Tox_Err_Friend_Delete'
Tox_Err_Friend_Delete__enumvalues = {
    0: 'TOX_ERR_FRIEND_DELETE_OK',
    1: 'TOX_ERR_FRIEND_DELETE_FRIEND_NOT_FOUND',
}
TOX_ERR_FRIEND_DELETE_OK = 0
TOX_ERR_FRIEND_DELETE_FRIEND_NOT_FOUND = 1
Tox_Err_Friend_Delete = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:1352
# c-toxcore/toxcore/tox.h 1352
try:
    tox_err_friend_delete_to_string = _libraries['FIXME_STUB'].tox_err_friend_delete_to_string
    tox_err_friend_delete_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_friend_delete_to_string(value)
    tox_err_friend_delete_to_string.argtypes = [Tox_Err_Friend_Delete]
except AttributeError:
    pass
tox_err_friend_delete_to_string.__doc__ = """LP_c_char tox_err_friend_delete_to_string(Tox_Err_Friend_Delete value)
    c-toxcore/toxcore/tox.h:1352"""
# c-toxcore/toxcore/tox.h:1365
# Remove a friend from the friend list.
# Remove a friend from the friend list.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1337
# c-toxcore/toxcore/tox.h 1365
try:
    tox_friend_delete = _libraries['FIXME_STUB'].tox_friend_delete
    tox_friend_delete.restype = ctypes.c_bool
# tox_friend_delete(tox, friend_number, error)
    tox_friend_delete.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, POINTER_T(Tox_Err_Friend_Delete)]
except AttributeError:
    pass
tox_friend_delete.__doc__ = """c_bool tox_friend_delete(LP_struct_Tox tox, Tox_Friend_Number friend_number, LP_Tox_Err_Friend_Delete error)
    c-toxcore/toxcore/tox.h:1365"""
# c-toxcore/toxcore/tox.h:1373
# @{
# @{

# values for enumeration 'Tox_Err_Friend_By_Public_Key'
Tox_Err_Friend_By_Public_Key__enumvalues = {
    0: 'TOX_ERR_FRIEND_BY_PUBLIC_KEY_OK',
    1: 'TOX_ERR_FRIEND_BY_PUBLIC_KEY_NULL',
    2: 'TOX_ERR_FRIEND_BY_PUBLIC_KEY_NOT_FOUND',
}
TOX_ERR_FRIEND_BY_PUBLIC_KEY_OK = 0
TOX_ERR_FRIEND_BY_PUBLIC_KEY_NULL = 1
TOX_ERR_FRIEND_BY_PUBLIC_KEY_NOT_FOUND = 2
Tox_Err_Friend_By_Public_Key = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:1392
# c-toxcore/toxcore/tox.h 1392
try:
    tox_err_friend_by_public_key_to_string = _libraries['FIXME_STUB'].tox_err_friend_by_public_key_to_string
    tox_err_friend_by_public_key_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_friend_by_public_key_to_string(value)
    tox_err_friend_by_public_key_to_string.argtypes = [Tox_Err_Friend_By_Public_Key]
except AttributeError:
    pass
tox_err_friend_by_public_key_to_string.__doc__ = """LP_c_char tox_err_friend_by_public_key_to_string(Tox_Err_Friend_By_Public_Key value)
    c-toxcore/toxcore/tox.h:1392"""
# c-toxcore/toxcore/tox.h:1401
# Return the friend number associated with that Public Key.
# Return the friend number associated with that Public Key.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1373
# c-toxcore/toxcore/tox.h 1401
try:
    tox_friend_by_public_key = _libraries['FIXME_STUB'].tox_friend_by_public_key
    tox_friend_by_public_key.restype = Tox_Friend_Number
# tox_friend_by_public_key(tox, public_key, error)
    tox_friend_by_public_key.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 32, POINTER_T(Tox_Err_Friend_By_Public_Key)]
except AttributeError:
    pass
tox_friend_by_public_key.__doc__ = """Tox_Friend_Number tox_friend_by_public_key(LP_struct_Tox tox, array_c_ubyte public_key, LP_Tox_Err_Friend_By_Public_Key error)
    c-toxcore/toxcore/tox.h:1401"""
# c-toxcore/toxcore/tox.h:1407
# Checks if a friend with the given friend number exists and returns true if it
# does.
# Checks if a friend with the given friend number exists and returns true if it
# does.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1407
try:
    tox_friend_exists = _libraries['FIXME_STUB'].tox_friend_exists
    tox_friend_exists.restype = ctypes.c_bool
# tox_friend_exists(tox, friend_number)
    tox_friend_exists.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number]
except AttributeError:
    pass
tox_friend_exists.__doc__ = """c_bool tox_friend_exists(LP_struct_Tox tox, Tox_Friend_Number friend_number)
    c-toxcore/toxcore/tox.h:1407"""
# c-toxcore/toxcore/tox.h:1415
# Return the number of friends on the friend list.
# Return the number of friends on the friend list.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1415
try:
    tox_self_get_friend_list_size = _libraries['FIXME_STUB'].tox_self_get_friend_list_size
    tox_self_get_friend_list_size.restype = size_t
# tox_self_get_friend_list_size(tox)
    tox_self_get_friend_list_size.argtypes = [POINTER_T(struct_Tox)]
except AttributeError:
    pass
tox_self_get_friend_list_size.__doc__ = """size_t tox_self_get_friend_list_size(LP_struct_Tox tox)
    c-toxcore/toxcore/tox.h:1415"""
# c-toxcore/toxcore/tox.h:1426
# Copy a list of valid friend numbers into an array.
# Copy a list of valid friend numbers into an array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1426
try:
    tox_self_get_friend_list = _libraries['FIXME_STUB'].tox_self_get_friend_list
    tox_self_get_friend_list.restype = None
# tox_self_get_friend_list(tox, friend_list)
    tox_self_get_friend_list.argtypes = [POINTER_T(struct_Tox), ctypes.c_uint32 * 0]
except AttributeError:
    pass
tox_self_get_friend_list.__doc__ = """None tox_self_get_friend_list(LP_struct_Tox tox, array_c_uint32 friend_list)
    c-toxcore/toxcore/tox.h:1426"""
# c-toxcore/toxcore/tox.h:1428

# values for enumeration 'Tox_Err_Friend_Get_Public_Key'
Tox_Err_Friend_Get_Public_Key__enumvalues = {
    0: 'TOX_ERR_FRIEND_GET_PUBLIC_KEY_OK',
    1: 'TOX_ERR_FRIEND_GET_PUBLIC_KEY_FRIEND_NOT_FOUND',
}
TOX_ERR_FRIEND_GET_PUBLIC_KEY_OK = 0
TOX_ERR_FRIEND_GET_PUBLIC_KEY_FRIEND_NOT_FOUND = 1
Tox_Err_Friend_Get_Public_Key = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:1442
# c-toxcore/toxcore/tox.h 1442
try:
    tox_err_friend_get_public_key_to_string = _libraries['FIXME_STUB'].tox_err_friend_get_public_key_to_string
    tox_err_friend_get_public_key_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_friend_get_public_key_to_string(value)
    tox_err_friend_get_public_key_to_string.argtypes = [Tox_Err_Friend_Get_Public_Key]
except AttributeError:
    pass
tox_err_friend_get_public_key_to_string.__doc__ = """LP_c_char tox_err_friend_get_public_key_to_string(Tox_Err_Friend_Get_Public_Key value)
    c-toxcore/toxcore/tox.h:1442"""
# c-toxcore/toxcore/tox.h:1454
# Copies the Public Key associated with a given friend number to a byte array.
# Copies the Public Key associated with a given friend number to a byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1428
# c-toxcore/toxcore/tox.h 1454
try:
    tox_friend_get_public_key = _libraries['FIXME_STUB'].tox_friend_get_public_key
    tox_friend_get_public_key.restype = ctypes.c_bool
# tox_friend_get_public_key(tox, friend_number, public_key, error)
    tox_friend_get_public_key.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, ctypes.c_ubyte * 32, POINTER_T(Tox_Err_Friend_Get_Public_Key)]
except AttributeError:
    pass
tox_friend_get_public_key.__doc__ = """c_bool tox_friend_get_public_key(LP_struct_Tox tox, Tox_Friend_Number friend_number, array_c_ubyte public_key, LP_Tox_Err_Friend_Get_Public_Key error)
    c-toxcore/toxcore/tox.h:1454"""
# c-toxcore/toxcore/tox.h:1458

# values for enumeration 'Tox_Err_Friend_Get_Last_Online'
Tox_Err_Friend_Get_Last_Online__enumvalues = {
    0: 'TOX_ERR_FRIEND_GET_LAST_ONLINE_OK',
    1: 'TOX_ERR_FRIEND_GET_LAST_ONLINE_FRIEND_NOT_FOUND',
}
TOX_ERR_FRIEND_GET_LAST_ONLINE_OK = 0
TOX_ERR_FRIEND_GET_LAST_ONLINE_FRIEND_NOT_FOUND = 1
Tox_Err_Friend_Get_Last_Online = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:1472
# c-toxcore/toxcore/tox.h 1472
try:
    tox_err_friend_get_last_online_to_string = _libraries['FIXME_STUB'].tox_err_friend_get_last_online_to_string
    tox_err_friend_get_last_online_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_friend_get_last_online_to_string(value)
    tox_err_friend_get_last_online_to_string.argtypes = [Tox_Err_Friend_Get_Last_Online]
except AttributeError:
    pass
tox_err_friend_get_last_online_to_string.__doc__ = """LP_c_char tox_err_friend_get_last_online_to_string(Tox_Err_Friend_Get_Last_Online value)
    c-toxcore/toxcore/tox.h:1472"""
# /usr/include/x86_64-linux-gnu/bits/stdint-uintn.h:27
uint64_t = ctypes.c_uint64
# c-toxcore/toxcore/tox.h:1482
# Return a unix-time timestamp of the last time the friend associated with a
# given friend number was seen online.
# Return a unix-time timestamp of the last time the friend associated with a
# given friend number was seen online.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1458
# c-toxcore/toxcore/tox.h 1482
try:
    tox_friend_get_last_online = _libraries['FIXME_STUB'].tox_friend_get_last_online
    tox_friend_get_last_online.restype = uint64_t
# tox_friend_get_last_online(tox, friend_number, error)
    tox_friend_get_last_online.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, POINTER_T(Tox_Err_Friend_Get_Last_Online)]
except AttributeError:
    pass
tox_friend_get_last_online.__doc__ = """uint64_t tox_friend_get_last_online(LP_struct_Tox tox, Tox_Friend_Number friend_number, LP_Tox_Err_Friend_Get_Last_Online error)
    c-toxcore/toxcore/tox.h:1482"""
# c-toxcore/toxcore/tox.h:1494
# Common error codes for friend state query functions.
# Common error codes for friend state query functions.

# values for enumeration 'Tox_Err_Friend_Query'
Tox_Err_Friend_Query__enumvalues = {
    0: 'TOX_ERR_FRIEND_QUERY_OK',
    1: 'TOX_ERR_FRIEND_QUERY_NULL',
    2: 'TOX_ERR_FRIEND_QUERY_FRIEND_NOT_FOUND',
}
TOX_ERR_FRIEND_QUERY_OK = 0
TOX_ERR_FRIEND_QUERY_NULL = 1
TOX_ERR_FRIEND_QUERY_FRIEND_NOT_FOUND = 2
Tox_Err_Friend_Query = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:1516
# c-toxcore/toxcore/tox.h 1516
try:
    tox_err_friend_query_to_string = _libraries['FIXME_STUB'].tox_err_friend_query_to_string
    tox_err_friend_query_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_friend_query_to_string(value)
    tox_err_friend_query_to_string.argtypes = [Tox_Err_Friend_Query]
except AttributeError:
    pass
tox_err_friend_query_to_string.__doc__ = """LP_c_char tox_err_friend_query_to_string(Tox_Err_Friend_Query value)
    c-toxcore/toxcore/tox.h:1516"""
# c-toxcore/toxcore/tox.h:1526
# Return the length of the friend's name.
# Return the length of the friend's name.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1494
# c-toxcore/toxcore/tox.h 1526
try:
    tox_friend_get_name_size = _libraries['FIXME_STUB'].tox_friend_get_name_size
    tox_friend_get_name_size.restype = size_t
# tox_friend_get_name_size(tox, friend_number, error)
    tox_friend_get_name_size.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, POINTER_T(Tox_Err_Friend_Query)]
except AttributeError:
    pass
tox_friend_get_name_size.__doc__ = """size_t tox_friend_get_name_size(LP_struct_Tox tox, Tox_Friend_Number friend_number, LP_Tox_Err_Friend_Query error)
    c-toxcore/toxcore/tox.h:1526"""
# c-toxcore/toxcore/tox.h:1543
# Write the name of the friend designated by the given friend number to a byte
# array.
# Write the name of the friend designated by the given friend number to a byte
# array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1494
# c-toxcore/toxcore/tox.h 1543
try:
    tox_friend_get_name = _libraries['FIXME_STUB'].tox_friend_get_name
    tox_friend_get_name.restype = ctypes.c_bool
# tox_friend_get_name(tox, friend_number, name, error)
    tox_friend_get_name.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, ctypes.c_ubyte * 0, POINTER_T(Tox_Err_Friend_Query)]
except AttributeError:
    pass
tox_friend_get_name.__doc__ = """c_bool tox_friend_get_name(LP_struct_Tox tox, Tox_Friend_Number friend_number, array_c_ubyte name, LP_Tox_Err_Friend_Query error)
    c-toxcore/toxcore/tox.h:1543"""
# c-toxcore/toxcore/tox.h:1553
# c-toxcore/toxcore/tox.h:115
tox_friend_name_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:1564
# Set the callback for the `friend_name` event.
# Set the callback for the `friend_name` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1564
try:
    tox_callback_friend_name = _libraries['FIXME_STUB'].tox_callback_friend_name
    tox_callback_friend_name.restype = None
# tox_callback_friend_name(tox, callback)
    tox_callback_friend_name.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_friend_name.__doc__ = """None tox_callback_friend_name(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:1564"""
# c-toxcore/toxcore/tox.h:1571
# Return the length of the friend's status message.
# Return the length of the friend's status message.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1494
# c-toxcore/toxcore/tox.h 1571
try:
    tox_friend_get_status_message_size = _libraries['FIXME_STUB'].tox_friend_get_status_message_size
    tox_friend_get_status_message_size.restype = size_t
# tox_friend_get_status_message_size(tox, friend_number, error)
    tox_friend_get_status_message_size.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, POINTER_T(Tox_Err_Friend_Query)]
except AttributeError:
    pass
tox_friend_get_status_message_size.__doc__ = """size_t tox_friend_get_status_message_size(LP_struct_Tox tox, Tox_Friend_Number friend_number, LP_Tox_Err_Friend_Query error)
    c-toxcore/toxcore/tox.h:1571"""
# c-toxcore/toxcore/tox.h:1587
# Write the status message of the friend designated by the given friend number
# to a byte array.
# Write the status message of the friend designated by the given friend number
# to a byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1494
# c-toxcore/toxcore/tox.h 1587
try:
    tox_friend_get_status_message = _libraries['FIXME_STUB'].tox_friend_get_status_message
    tox_friend_get_status_message.restype = ctypes.c_bool
# tox_friend_get_status_message(tox, friend_number, status_message, error)
    tox_friend_get_status_message.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, ctypes.c_ubyte * 0, POINTER_T(Tox_Err_Friend_Query)]
except AttributeError:
    pass
tox_friend_get_status_message.__doc__ = """c_bool tox_friend_get_status_message(LP_struct_Tox tox, Tox_Friend_Number friend_number, array_c_ubyte status_message, LP_Tox_Err_Friend_Query error)
    c-toxcore/toxcore/tox.h:1587"""
# c-toxcore/toxcore/tox.h:1600
# c-toxcore/toxcore/tox.h:115
tox_friend_status_message_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:1611
# Set the callback for the `friend_status_message` event.
# Set the callback for the `friend_status_message` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1611
try:
    tox_callback_friend_status_message = _libraries['FIXME_STUB'].tox_callback_friend_status_message
    tox_callback_friend_status_message.restype = None
# tox_callback_friend_status_message(tox, callback)
    tox_callback_friend_status_message.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_friend_status_message.__doc__ = """None tox_callback_friend_status_message(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:1611"""
# c-toxcore/toxcore/tox.h:1624
# Return the friend's user status (away/busy/...).
# Return the friend's user status (away/busy/...).
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1494
# c-toxcore/toxcore/tox.h 1624
try:
    tox_friend_get_status = _libraries['FIXME_STUB'].tox_friend_get_status
    tox_friend_get_status.restype = Tox_User_Status
# tox_friend_get_status(tox, friend_number, error)
    tox_friend_get_status.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, POINTER_T(Tox_Err_Friend_Query)]
except AttributeError:
    pass
tox_friend_get_status.__doc__ = """Tox_User_Status tox_friend_get_status(LP_struct_Tox tox, Tox_Friend_Number friend_number, LP_Tox_Err_Friend_Query error)
    c-toxcore/toxcore/tox.h:1624"""
# c-toxcore/toxcore/tox.h:1632
# c-toxcore/toxcore/tox.h:115
tox_friend_status_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_User_Status, POINTER_T(None))
# c-toxcore/toxcore/tox.h:1642
# Set the callback for the `friend_status` event.
# Set the callback for the `friend_status` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1642
try:
    tox_callback_friend_status = _libraries['FIXME_STUB'].tox_callback_friend_status
    tox_callback_friend_status.restype = None
# tox_callback_friend_status(tox, callback)
    tox_callback_friend_status.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_User_Status, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_friend_status.__doc__ = """None tox_callback_friend_status(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:1642"""
# c-toxcore/toxcore/tox.h:1659
# Check whether a friend is currently connected to this client.
# Check whether a friend is currently connected to this client.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1494
# c-toxcore/toxcore/tox.h 1659
try:
    tox_friend_get_connection_status = _libraries['FIXME_STUB'].tox_friend_get_connection_status
    tox_friend_get_connection_status.restype = Tox_Connection
# tox_friend_get_connection_status(tox, friend_number, error)
    tox_friend_get_connection_status.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, POINTER_T(Tox_Err_Friend_Query)]
except AttributeError:
    pass
tox_friend_get_connection_status.__doc__ = """Tox_Connection tox_friend_get_connection_status(LP_struct_Tox tox, Tox_Friend_Number friend_number, LP_Tox_Err_Friend_Query error)
    c-toxcore/toxcore/tox.h:1659"""
# c-toxcore/toxcore/tox.h:1668
# c-toxcore/toxcore/tox.h:115
tox_friend_connection_status_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Connection, POINTER_T(None))
# c-toxcore/toxcore/tox.h:1682
# Set the callback for the `friend_connection_status` event.
# Set the callback for the `friend_connection_status` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1682
try:
    tox_callback_friend_connection_status = _libraries['FIXME_STUB'].tox_callback_friend_connection_status
    tox_callback_friend_connection_status.restype = None
# tox_callback_friend_connection_status(tox, callback)
    tox_callback_friend_connection_status.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Connection, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_friend_connection_status.__doc__ = """None tox_callback_friend_connection_status(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:1682"""
# c-toxcore/toxcore/tox.h:1696
# Check whether a friend is currently typing a message.
# Check whether a friend is currently typing a message.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1494
# c-toxcore/toxcore/tox.h 1696
try:
    tox_friend_get_typing = _libraries['FIXME_STUB'].tox_friend_get_typing
    tox_friend_get_typing.restype = ctypes.c_bool
# tox_friend_get_typing(tox, friend_number, error)
    tox_friend_get_typing.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, POINTER_T(Tox_Err_Friend_Query)]
except AttributeError:
    pass
tox_friend_get_typing.__doc__ = """c_bool tox_friend_get_typing(LP_struct_Tox tox, Tox_Friend_Number friend_number, LP_Tox_Err_Friend_Query error)
    c-toxcore/toxcore/tox.h:1696"""
# c-toxcore/toxcore/tox.h:1705
# c-toxcore/toxcore/tox.h:115
tox_friend_typing_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_bool, POINTER_T(None))
# c-toxcore/toxcore/tox.h:1715
# Set the callback for the `friend_typing` event.
# Set the callback for the `friend_typing` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1715
try:
    tox_callback_friend_typing = _libraries['FIXME_STUB'].tox_callback_friend_typing
    tox_callback_friend_typing.restype = None
# tox_callback_friend_typing(tox, callback)
    tox_callback_friend_typing.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_bool, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_friend_typing.__doc__ = """None tox_callback_friend_typing(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:1715"""
# c-toxcore/toxcore/tox.h:1723
# @{
# @{

# values for enumeration 'Tox_Err_Set_Typing'
Tox_Err_Set_Typing__enumvalues = {
    0: 'TOX_ERR_SET_TYPING_OK',
    1: 'TOX_ERR_SET_TYPING_FRIEND_NOT_FOUND',
}
TOX_ERR_SET_TYPING_OK = 0
TOX_ERR_SET_TYPING_FRIEND_NOT_FOUND = 1
Tox_Err_Set_Typing = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:1737
# c-toxcore/toxcore/tox.h 1737
try:
    tox_err_set_typing_to_string = _libraries['FIXME_STUB'].tox_err_set_typing_to_string
    tox_err_set_typing_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_set_typing_to_string(value)
    tox_err_set_typing_to_string.argtypes = [Tox_Err_Set_Typing]
except AttributeError:
    pass
tox_err_set_typing_to_string.__doc__ = """LP_c_char tox_err_set_typing_to_string(Tox_Err_Set_Typing value)
    c-toxcore/toxcore/tox.h:1737"""
# c-toxcore/toxcore/tox.h:1749
# Set the client's typing status for a friend.
# Set the client's typing status for a friend.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1723
# c-toxcore/toxcore/tox.h 1749
try:
    tox_self_set_typing = _libraries['FIXME_STUB'].tox_self_set_typing
    tox_self_set_typing.restype = ctypes.c_bool
# tox_self_set_typing(tox, friend_number, typing, error)
    tox_self_set_typing.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, ctypes.c_bool, POINTER_T(Tox_Err_Set_Typing)]
except AttributeError:
    pass
tox_self_set_typing.__doc__ = """c_bool tox_self_set_typing(LP_struct_Tox tox, Tox_Friend_Number friend_number, c_bool typing, LP_Tox_Err_Set_Typing error)
    c-toxcore/toxcore/tox.h:1749"""
# c-toxcore/toxcore/tox.h:1752

# values for enumeration 'Tox_Err_Friend_Send_Message'
Tox_Err_Friend_Send_Message__enumvalues = {
    0: 'TOX_ERR_FRIEND_SEND_MESSAGE_OK',
    1: 'TOX_ERR_FRIEND_SEND_MESSAGE_NULL',
    2: 'TOX_ERR_FRIEND_SEND_MESSAGE_FRIEND_NOT_FOUND',
    3: 'TOX_ERR_FRIEND_SEND_MESSAGE_FRIEND_NOT_CONNECTED',
    4: 'TOX_ERR_FRIEND_SEND_MESSAGE_SENDQ',
    5: 'TOX_ERR_FRIEND_SEND_MESSAGE_TOO_LONG',
    6: 'TOX_ERR_FRIEND_SEND_MESSAGE_EMPTY',
}
TOX_ERR_FRIEND_SEND_MESSAGE_OK = 0
TOX_ERR_FRIEND_SEND_MESSAGE_NULL = 1
TOX_ERR_FRIEND_SEND_MESSAGE_FRIEND_NOT_FOUND = 2
TOX_ERR_FRIEND_SEND_MESSAGE_FRIEND_NOT_CONNECTED = 3
TOX_ERR_FRIEND_SEND_MESSAGE_SENDQ = 4
TOX_ERR_FRIEND_SEND_MESSAGE_TOO_LONG = 5
TOX_ERR_FRIEND_SEND_MESSAGE_EMPTY = 6
Tox_Err_Friend_Send_Message = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:1791
# c-toxcore/toxcore/tox.h 1791
try:
    tox_err_friend_send_message_to_string = _libraries['FIXME_STUB'].tox_err_friend_send_message_to_string
    tox_err_friend_send_message_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_friend_send_message_to_string(value)
    tox_err_friend_send_message_to_string.argtypes = [Tox_Err_Friend_Send_Message]
except AttributeError:
    pass
tox_err_friend_send_message_to_string.__doc__ = """LP_c_char tox_err_friend_send_message_to_string(Tox_Err_Friend_Send_Message value)
    c-toxcore/toxcore/tox.h:1791"""
# c-toxcore/toxcore/tox.h:1793
Tox_Friend_Message_Id = ctypes.c_uint32
# c-toxcore/toxcore/tox.h:1819
# Send a text chat message to an online friend.
# Send a text chat message to an online friend.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1752
# c-toxcore/toxcore/tox.h 1819
try:
    tox_friend_send_message = _libraries['FIXME_STUB'].tox_friend_send_message
    tox_friend_send_message.restype = Tox_Friend_Message_Id
# tox_friend_send_message(tox, friend_number, type, message, length, error)
    tox_friend_send_message.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, Tox_Message_Type, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Friend_Send_Message)]
except AttributeError:
    pass
tox_friend_send_message.__doc__ = """Tox_Friend_Message_Id tox_friend_send_message(LP_struct_Tox tox, Tox_Friend_Number friend_number, Tox_Message_Type type, array_c_ubyte message, size_t length, LP_Tox_Err_Friend_Send_Message error)
    c-toxcore/toxcore/tox.h:1819"""
# c-toxcore/toxcore/tox.h:1829
# c-toxcore/toxcore/tox.h:115
tox_friend_read_receipt_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(None))
# c-toxcore/toxcore/tox.h:1840
# Set the callback for the `friend_read_receipt` event.
# Set the callback for the `friend_read_receipt` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1840
try:
    tox_callback_friend_read_receipt = _libraries['FIXME_STUB'].tox_callback_friend_read_receipt
    tox_callback_friend_read_receipt.restype = None
# tox_callback_friend_read_receipt(tox, callback)
    tox_callback_friend_read_receipt.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_friend_read_receipt.__doc__ = """None tox_callback_friend_read_receipt(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:1840"""
# c-toxcore/toxcore/tox.h:1853
# c-toxcore/toxcore/tox.h:115
tox_friend_request_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), POINTER_T(ctypes.c_ubyte), POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:1865
# Set the callback for the `friend_request` event.
# Set the callback for the `friend_request` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1865
try:
    tox_callback_friend_request = _libraries['FIXME_STUB'].tox_callback_friend_request
    tox_callback_friend_request.restype = None
# tox_callback_friend_request(tox, callback)
    tox_callback_friend_request.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), POINTER_T(ctypes.c_ubyte), POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_friend_request.__doc__ = """None tox_callback_friend_request(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:1865"""
# c-toxcore/toxcore/tox.h:1873
# c-toxcore/toxcore/tox.h:115
tox_friend_message_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Message_Type, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:1884
# Set the callback for the `friend_message` event.
# Set the callback for the `friend_message` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 1884
try:
    tox_callback_friend_message = _libraries['FIXME_STUB'].tox_callback_friend_message
    tox_callback_friend_message.restype = None
# tox_callback_friend_message(tox, callback)
    tox_callback_friend_message.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Message_Type, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_friend_message.__doc__ = """None tox_callback_friend_message(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:1884"""
# c-toxcore/toxcore/tox.h:1892
# @{
# @{
Tox_File_Number = ctypes.c_uint32
# c-toxcore/toxcore/tox.h:1913
# Generates a cryptographic hash of the given data.
# Generates a cryptographic hash of the given data.
# c-toxcore/toxcore/tox.h 1913
try:
    tox_hash = _libraries['FIXME_STUB'].tox_hash
    tox_hash.restype = ctypes.c_bool
# tox_hash(hash, data, length)
    tox_hash.argtypes = [ctypes.c_ubyte * 32, ctypes.c_ubyte * 0, size_t]
except AttributeError:
    pass
tox_hash.__doc__ = """c_bool tox_hash(array_c_ubyte hash, array_c_ubyte data, size_t length)
    c-toxcore/toxcore/tox.h:1913"""
# c-toxcore/toxcore/tox.h:1924
# A list of pre-defined file kinds.
# A list of pre-defined file kinds.

# values for enumeration 'Tox_File_Kind'
Tox_File_Kind__enumvalues = {
    0: 'TOX_FILE_KIND_DATA',
    1: 'TOX_FILE_KIND_AVATAR',
}
TOX_FILE_KIND_DATA = 0
TOX_FILE_KIND_AVATAR = 1
Tox_File_Kind = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:1956

# values for enumeration 'Tox_File_Control'
Tox_File_Control__enumvalues = {
    0: 'TOX_FILE_CONTROL_RESUME',
    1: 'TOX_FILE_CONTROL_PAUSE',
    2: 'TOX_FILE_CONTROL_CANCEL',
}
TOX_FILE_CONTROL_RESUME = 0
TOX_FILE_CONTROL_PAUSE = 1
TOX_FILE_CONTROL_CANCEL = 2
Tox_File_Control = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:1981
# c-toxcore/toxcore/tox.h 1981
try:
    tox_file_control_to_string = _libraries['FIXME_STUB'].tox_file_control_to_string
    tox_file_control_to_string.restype = POINTER_T(ctypes.c_char)
# tox_file_control_to_string(value)
    tox_file_control_to_string.argtypes = [Tox_File_Control]
except AttributeError:
    pass
tox_file_control_to_string.__doc__ = """LP_c_char tox_file_control_to_string(Tox_File_Control value)
    c-toxcore/toxcore/tox.h:1981"""
# c-toxcore/toxcore/tox.h:1983

# values for enumeration 'Tox_Err_File_Control'
Tox_Err_File_Control__enumvalues = {
    0: 'TOX_ERR_FILE_CONTROL_OK',
    1: 'TOX_ERR_FILE_CONTROL_FRIEND_NOT_FOUND',
    2: 'TOX_ERR_FILE_CONTROL_FRIEND_NOT_CONNECTED',
    3: 'TOX_ERR_FILE_CONTROL_NOT_FOUND',
    4: 'TOX_ERR_FILE_CONTROL_NOT_PAUSED',
    5: 'TOX_ERR_FILE_CONTROL_DENIED',
    6: 'TOX_ERR_FILE_CONTROL_ALREADY_PAUSED',
    7: 'TOX_ERR_FILE_CONTROL_SENDQ',
}
TOX_ERR_FILE_CONTROL_OK = 0
TOX_ERR_FILE_CONTROL_FRIEND_NOT_FOUND = 1
TOX_ERR_FILE_CONTROL_FRIEND_NOT_CONNECTED = 2
TOX_ERR_FILE_CONTROL_NOT_FOUND = 3
TOX_ERR_FILE_CONTROL_NOT_PAUSED = 4
TOX_ERR_FILE_CONTROL_DENIED = 5
TOX_ERR_FILE_CONTROL_ALREADY_PAUSED = 6
TOX_ERR_FILE_CONTROL_SENDQ = 7
Tox_Err_File_Control = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:2029
# c-toxcore/toxcore/tox.h 2029
try:
    tox_err_file_control_to_string = _libraries['FIXME_STUB'].tox_err_file_control_to_string
    tox_err_file_control_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_file_control_to_string(value)
    tox_err_file_control_to_string.argtypes = [Tox_Err_File_Control]
except AttributeError:
    pass
tox_err_file_control_to_string.__doc__ = """LP_c_char tox_err_file_control_to_string(Tox_Err_File_Control value)
    c-toxcore/toxcore/tox.h:2029"""
# c-toxcore/toxcore/tox.h:2041
# Sends a file control command to a friend for a given file transfer.
# Sends a file control command to a friend for a given file transfer.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:1983
# c-toxcore/toxcore/tox.h 2041
try:
    tox_file_control = _libraries['FIXME_STUB'].tox_file_control
    tox_file_control.restype = ctypes.c_bool
# tox_file_control(tox, friend_number, file_number, control, error)
    tox_file_control.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, Tox_File_Number, Tox_File_Control, POINTER_T(Tox_Err_File_Control)]
except AttributeError:
    pass
tox_file_control.__doc__ = """c_bool tox_file_control(LP_struct_Tox tox, Tox_Friend_Number friend_number, Tox_File_Number file_number, Tox_File_Control control, LP_Tox_Err_File_Control error)
    c-toxcore/toxcore/tox.h:2041"""
# c-toxcore/toxcore/tox.h:2054
# When receiving TOX_FILE_CONTROL_CANCEL, the client should release the
# resources associated with the file number and consider the transfer failed.
# When receiving TOX_FILE_CONTROL_CANCEL, the client should release the
# resources associated with the file number and consider the transfer failed.
# c-toxcore/toxcore/tox.h:115
tox_file_recv_control_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, Tox_File_Control, POINTER_T(None))
# c-toxcore/toxcore/tox.h:2066
# Set the callback for the `file_recv_control` event.
# Set the callback for the `file_recv_control` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 2066
try:
    tox_callback_file_recv_control = _libraries['FIXME_STUB'].tox_callback_file_recv_control
    tox_callback_file_recv_control.restype = None
# tox_callback_file_recv_control(tox, callback)
    tox_callback_file_recv_control.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, Tox_File_Control, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_file_recv_control.__doc__ = """None tox_callback_file_recv_control(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:2066"""
# c-toxcore/toxcore/tox.h:2068

# values for enumeration 'Tox_Err_File_Seek'
Tox_Err_File_Seek__enumvalues = {
    0: 'TOX_ERR_FILE_SEEK_OK',
    1: 'TOX_ERR_FILE_SEEK_FRIEND_NOT_FOUND',
    2: 'TOX_ERR_FILE_SEEK_FRIEND_NOT_CONNECTED',
    3: 'TOX_ERR_FILE_SEEK_NOT_FOUND',
    4: 'TOX_ERR_FILE_SEEK_DENIED',
    5: 'TOX_ERR_FILE_SEEK_INVALID_POSITION',
    6: 'TOX_ERR_FILE_SEEK_SENDQ',
}
TOX_ERR_FILE_SEEK_OK = 0
TOX_ERR_FILE_SEEK_FRIEND_NOT_FOUND = 1
TOX_ERR_FILE_SEEK_FRIEND_NOT_CONNECTED = 2
TOX_ERR_FILE_SEEK_NOT_FOUND = 3
TOX_ERR_FILE_SEEK_DENIED = 4
TOX_ERR_FILE_SEEK_INVALID_POSITION = 5
TOX_ERR_FILE_SEEK_SENDQ = 6
Tox_Err_File_Seek = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:2108
# c-toxcore/toxcore/tox.h 2108
try:
    tox_err_file_seek_to_string = _libraries['FIXME_STUB'].tox_err_file_seek_to_string
    tox_err_file_seek_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_file_seek_to_string(value)
    tox_err_file_seek_to_string.argtypes = [Tox_Err_File_Seek]
except AttributeError:
    pass
tox_err_file_seek_to_string.__doc__ = """LP_c_char tox_err_file_seek_to_string(Tox_Err_File_Seek value)
    c-toxcore/toxcore/tox.h:2108"""
# c-toxcore/toxcore/tox.h:2122
# Sends a file seek control command to a friend for a given file transfer.
# Sends a file seek control command to a friend for a given file transfer.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2068
# c-toxcore/toxcore/tox.h 2122
try:
    tox_file_seek = _libraries['FIXME_STUB'].tox_file_seek
    tox_file_seek.restype = ctypes.c_bool
# tox_file_seek(tox, friend_number, file_number, position, error)
    tox_file_seek.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, Tox_File_Number, uint64_t, POINTER_T(Tox_Err_File_Seek)]
except AttributeError:
    pass
tox_file_seek.__doc__ = """c_bool tox_file_seek(LP_struct_Tox tox, Tox_Friend_Number friend_number, Tox_File_Number file_number, uint64_t position, LP_Tox_Err_File_Seek error)
    c-toxcore/toxcore/tox.h:2122"""
# c-toxcore/toxcore/tox.h:2125

# values for enumeration 'Tox_Err_File_Get'
Tox_Err_File_Get__enumvalues = {
    0: 'TOX_ERR_FILE_GET_OK',
    1: 'TOX_ERR_FILE_GET_NULL',
    2: 'TOX_ERR_FILE_GET_FRIEND_NOT_FOUND',
    3: 'TOX_ERR_FILE_GET_NOT_FOUND',
}
TOX_ERR_FILE_GET_OK = 0
TOX_ERR_FILE_GET_NULL = 1
TOX_ERR_FILE_GET_FRIEND_NOT_FOUND = 2
TOX_ERR_FILE_GET_NOT_FOUND = 3
Tox_Err_File_Get = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:2150
# c-toxcore/toxcore/tox.h 2150
try:
    tox_err_file_get_to_string = _libraries['FIXME_STUB'].tox_err_file_get_to_string
    tox_err_file_get_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_file_get_to_string(value)
    tox_err_file_get_to_string.argtypes = [Tox_Err_File_Get]
except AttributeError:
    pass
tox_err_file_get_to_string.__doc__ = """LP_c_char tox_err_file_get_to_string(Tox_Err_File_Get value)
    c-toxcore/toxcore/tox.h:2150"""
# c-toxcore/toxcore/tox.h:2163
# Copy the file id associated to the file transfer to a byte array.
# Copy the file id associated to the file transfer to a byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2125
# c-toxcore/toxcore/tox.h 2163
try:
    tox_file_get_file_id = _libraries['FIXME_STUB'].tox_file_get_file_id
    tox_file_get_file_id.restype = ctypes.c_bool
# tox_file_get_file_id(tox, friend_number, file_number, file_id, error)
    tox_file_get_file_id.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, Tox_File_Number, ctypes.c_ubyte * 32, POINTER_T(Tox_Err_File_Get)]
except AttributeError:
    pass
tox_file_get_file_id.__doc__ = """c_bool tox_file_get_file_id(LP_struct_Tox tox, Tox_Friend_Number friend_number, Tox_File_Number file_number, array_c_ubyte file_id, LP_Tox_Err_File_Get error)
    c-toxcore/toxcore/tox.h:2163"""
# c-toxcore/toxcore/tox.h:2174
# @{
# @{

# values for enumeration 'Tox_Err_File_Send'
Tox_Err_File_Send__enumvalues = {
    0: 'TOX_ERR_FILE_SEND_OK',
    1: 'TOX_ERR_FILE_SEND_NULL',
    2: 'TOX_ERR_FILE_SEND_FRIEND_NOT_FOUND',
    3: 'TOX_ERR_FILE_SEND_FRIEND_NOT_CONNECTED',
    4: 'TOX_ERR_FILE_SEND_NAME_TOO_LONG',
    5: 'TOX_ERR_FILE_SEND_TOO_MANY',
}
TOX_ERR_FILE_SEND_OK = 0
TOX_ERR_FILE_SEND_NULL = 1
TOX_ERR_FILE_SEND_FRIEND_NOT_FOUND = 2
TOX_ERR_FILE_SEND_FRIEND_NOT_CONNECTED = 3
TOX_ERR_FILE_SEND_NAME_TOO_LONG = 4
TOX_ERR_FILE_SEND_TOO_MANY = 5
Tox_Err_File_Send = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:2209
# c-toxcore/toxcore/tox.h 2209
try:
    tox_err_file_send_to_string = _libraries['FIXME_STUB'].tox_err_file_send_to_string
    tox_err_file_send_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_file_send_to_string(value)
    tox_err_file_send_to_string.argtypes = [Tox_Err_File_Send]
except AttributeError:
    pass
tox_err_file_send_to_string.__doc__ = """LP_c_char tox_err_file_send_to_string(Tox_Err_File_Send value)
    c-toxcore/toxcore/tox.h:2209"""
# c-toxcore/toxcore/tox.h:2271
# Send a file transmission request.
# Send a file transmission request.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2174
# c-toxcore/toxcore/tox.h 2271
try:
    tox_file_send = _libraries['FIXME_STUB'].tox_file_send
    tox_file_send.restype = Tox_File_Number
# tox_file_send(tox, friend_number, kind, file_size, file_id, filename, filename_length, error)
    tox_file_send.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, uint32_t, uint64_t, ctypes.c_ubyte * 32, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_File_Send)]
except AttributeError:
    pass
tox_file_send.__doc__ = """Tox_File_Number tox_file_send(LP_struct_Tox tox, Tox_Friend_Number friend_number, uint32_t kind, uint64_t file_size, array_c_ubyte file_id, array_c_ubyte filename, size_t filename_length, LP_Tox_Err_File_Send error)
    c-toxcore/toxcore/tox.h:2271"""
# c-toxcore/toxcore/tox.h:2276

# values for enumeration 'Tox_Err_File_Send_Chunk'
Tox_Err_File_Send_Chunk__enumvalues = {
    0: 'TOX_ERR_FILE_SEND_CHUNK_OK',
    1: 'TOX_ERR_FILE_SEND_CHUNK_NULL',
    2: 'TOX_ERR_FILE_SEND_CHUNK_FRIEND_NOT_FOUND',
    3: 'TOX_ERR_FILE_SEND_CHUNK_FRIEND_NOT_CONNECTED',
    4: 'TOX_ERR_FILE_SEND_CHUNK_NOT_FOUND',
    5: 'TOX_ERR_FILE_SEND_CHUNK_NOT_TRANSFERRING',
    6: 'TOX_ERR_FILE_SEND_CHUNK_INVALID_LENGTH',
    7: 'TOX_ERR_FILE_SEND_CHUNK_SENDQ',
    8: 'TOX_ERR_FILE_SEND_CHUNK_WRONG_POSITION',
}
TOX_ERR_FILE_SEND_CHUNK_OK = 0
TOX_ERR_FILE_SEND_CHUNK_NULL = 1
TOX_ERR_FILE_SEND_CHUNK_FRIEND_NOT_FOUND = 2
TOX_ERR_FILE_SEND_CHUNK_FRIEND_NOT_CONNECTED = 3
TOX_ERR_FILE_SEND_CHUNK_NOT_FOUND = 4
TOX_ERR_FILE_SEND_CHUNK_NOT_TRANSFERRING = 5
TOX_ERR_FILE_SEND_CHUNK_INVALID_LENGTH = 6
TOX_ERR_FILE_SEND_CHUNK_SENDQ = 7
TOX_ERR_FILE_SEND_CHUNK_WRONG_POSITION = 8
Tox_Err_File_Send_Chunk = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:2331
# c-toxcore/toxcore/tox.h 2331
try:
    tox_err_file_send_chunk_to_string = _libraries['FIXME_STUB'].tox_err_file_send_chunk_to_string
    tox_err_file_send_chunk_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_file_send_chunk_to_string(value)
    tox_err_file_send_chunk_to_string.argtypes = [Tox_Err_File_Send_Chunk]
except AttributeError:
    pass
tox_err_file_send_chunk_to_string.__doc__ = """LP_c_char tox_err_file_send_chunk_to_string(Tox_Err_File_Send_Chunk value)
    c-toxcore/toxcore/tox.h:2331"""
# c-toxcore/toxcore/tox.h:2350
# Send a chunk of file data to a friend.
# Send a chunk of file data to a friend.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2276
# c-toxcore/toxcore/tox.h 2350
try:
    tox_file_send_chunk = _libraries['FIXME_STUB'].tox_file_send_chunk
    tox_file_send_chunk.restype = ctypes.c_bool
# tox_file_send_chunk(tox, friend_number, file_number, position, data, length, error)
    tox_file_send_chunk.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, Tox_File_Number, uint64_t, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_File_Send_Chunk)]
except AttributeError:
    pass
tox_file_send_chunk.__doc__ = """c_bool tox_file_send_chunk(LP_struct_Tox tox, Tox_Friend_Number friend_number, Tox_File_Number file_number, uint64_t position, array_c_ubyte data, size_t length, LP_Tox_Err_File_Send_Chunk error)
    c-toxcore/toxcore/tox.h:2350"""
# c-toxcore/toxcore/tox.h:2376
# If the length parameter is 0, the file transfer is finished, and the client's
# resources associated with the file number should be released. After a call
# with zero length, the file number can be reused for future file transfers.
# If the length parameter is 0, the file transfer is finished, and the client's
# resources associated with the file number should be released. After a call
# with zero length, the file number can be reused for future file transfers.
# c-toxcore/toxcore/tox.h:115
tox_file_chunk_request_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint64, ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:2387
# Set the callback for the `file_chunk_request` event.
# Set the callback for the `file_chunk_request` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 2387
try:
    tox_callback_file_chunk_request = _libraries['FIXME_STUB'].tox_callback_file_chunk_request
    tox_callback_file_chunk_request.restype = None
# tox_callback_file_chunk_request(tox, callback)
    tox_callback_file_chunk_request.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint64, ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_file_chunk_request.__doc__ = """None tox_callback_file_chunk_request(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:2387"""
# c-toxcore/toxcore/tox.h:2413
# The client should acquire resources to be associated with the file transfer.
# Incoming file transfers start in the PAUSED state. After this callback
# returns, a transfer can be rejected by sending a TOX_FILE_CONTROL_CANCEL
# control command before any other control commands. It can be accepted by
# sending TOX_FILE_CONTROL_RESUME.
# The client should acquire resources to be associated with the file transfer.
# Incoming file transfers start in the PAUSED state. After this callback
# returns, a transfer can be rejected by sending a TOX_FILE_CONTROL_CANCEL
# control command before any other control commands. It can be accepted by
# sending TOX_FILE_CONTROL_RESUME.
# c-toxcore/toxcore/tox.h:115
tox_file_recv_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint64, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:2424
# Set the callback for the `file_recv` event.
# Set the callback for the `file_recv` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 2424
try:
    tox_callback_file_recv = _libraries['FIXME_STUB'].tox_callback_file_recv
    tox_callback_file_recv.restype = None
# tox_callback_file_recv(tox, callback)
    tox_callback_file_recv.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint64, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_file_recv.__doc__ = """None tox_callback_file_recv(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:2424"""
# c-toxcore/toxcore/tox.h:2442
# When length is 0, the transfer is finished and the client should release the
# resources it acquired for the transfer. After a call with length = 0, the file
# number can be reused for new file transfers.
# When length is 0, the transfer is finished and the client should release the
# resources it acquired for the transfer. After a call with length = 0, the file
# number can be reused for new file transfers.
# c-toxcore/toxcore/tox.h:115
tox_file_recv_chunk_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint64, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:2454
# Set the callback for the `file_recv_chunk` event.
# Set the callback for the `file_recv_chunk` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 2454
try:
    tox_callback_file_recv_chunk = _libraries['FIXME_STUB'].tox_callback_file_recv_chunk
    tox_callback_file_recv_chunk.restype = None
# tox_callback_file_recv_chunk(tox, callback)
    tox_callback_file_recv_chunk.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint64, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_file_recv_chunk.__doc__ = """None tox_callback_file_recv_chunk(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:2454"""
# c-toxcore/toxcore/tox.h:2462
# @{
# @{
Tox_Conference_Number = ctypes.c_uint32
# c-toxcore/toxcore/tox.h:2463
Tox_Conference_Peer_Number = ctypes.c_uint32
# c-toxcore/toxcore/tox.h:2464
Tox_Conference_Offline_Peer_Number = ctypes.c_uint32
# c-toxcore/toxcore/tox.h:2469
# Conference types for the conference_invite event.
# Conference types for the conference_invite event.

# values for enumeration 'Tox_Conference_Type'
Tox_Conference_Type__enumvalues = {
    0: 'TOX_CONFERENCE_TYPE_TEXT',
    1: 'TOX_CONFERENCE_TYPE_AV',
}
TOX_CONFERENCE_TYPE_TEXT = 0
TOX_CONFERENCE_TYPE_AV = 1
Tox_Conference_Type = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:2484
# c-toxcore/toxcore/tox.h 2484
try:
    tox_conference_type_to_string = _libraries['FIXME_STUB'].tox_conference_type_to_string
    tox_conference_type_to_string.restype = POINTER_T(ctypes.c_char)
# tox_conference_type_to_string(value)
    tox_conference_type_to_string.argtypes = [Tox_Conference_Type]
except AttributeError:
    pass
tox_conference_type_to_string.__doc__ = """LP_c_char tox_conference_type_to_string(Tox_Conference_Type value)
    c-toxcore/toxcore/tox.h:2484"""
# c-toxcore/toxcore/tox.h:2496
# The invitation will remain valid until the inviting friend goes offline or
# exits the conference.
# The invitation will remain valid until the inviting friend goes offline or
# exits the conference.
# c-toxcore/toxcore/tox.h:115
tox_conference_invite_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Conference_Type, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:2507
# Set the callback for the `conference_invite` event.
# Set the callback for the `conference_invite` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 2507
try:
    tox_callback_conference_invite = _libraries['FIXME_STUB'].tox_callback_conference_invite
    tox_callback_conference_invite.restype = None
# tox_callback_conference_invite(tox, callback)
    tox_callback_conference_invite.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Conference_Type, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_conference_invite.__doc__ = """None tox_callback_conference_invite(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:2507"""
# c-toxcore/toxcore/tox.h:2513
# c-toxcore/toxcore/tox.h:115
tox_conference_connected_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(None))
# c-toxcore/toxcore/tox.h:2523
# Set the callback for the `conference_connected` event.
# Set the callback for the `conference_connected` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 2523
try:
    tox_callback_conference_connected = _libraries['FIXME_STUB'].tox_callback_conference_connected
    tox_callback_conference_connected.restype = None
# tox_callback_conference_connected(tox, callback)
    tox_callback_conference_connected.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_conference_connected.__doc__ = """None tox_callback_conference_connected(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:2523"""
# c-toxcore/toxcore/tox.h:2533
# c-toxcore/toxcore/tox.h:115
tox_conference_message_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, Tox_Message_Type, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:2544
# Set the callback for the `conference_message` event.
# Set the callback for the `conference_message` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 2544
try:
    tox_callback_conference_message = _libraries['FIXME_STUB'].tox_callback_conference_message
    tox_callback_conference_message.restype = None
# tox_callback_conference_message(tox, callback)
    tox_callback_conference_message.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, Tox_Message_Type, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_conference_message.__doc__ = """None tox_callback_conference_message(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:2544"""
# c-toxcore/toxcore/tox.h:2553
# c-toxcore/toxcore/tox.h:115
tox_conference_title_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:2567
# Set the callback for the `conference_title` event.
# Set the callback for the `conference_title` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 2567
try:
    tox_callback_conference_title = _libraries['FIXME_STUB'].tox_callback_conference_title
    tox_callback_conference_title.restype = None
# tox_callback_conference_title(tox, callback)
    tox_callback_conference_title.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_conference_title.__doc__ = """None tox_callback_conference_title(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:2567"""
# c-toxcore/toxcore/tox.h:2576
# c-toxcore/toxcore/tox.h:115
tox_conference_peer_name_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:2587
# Set the callback for the `conference_peer_name` event.
# Set the callback for the `conference_peer_name` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 2587
try:
    tox_callback_conference_peer_name = _libraries['FIXME_STUB'].tox_callback_conference_peer_name
    tox_callback_conference_peer_name.restype = None
# tox_callback_conference_peer_name(tox, callback)
    tox_callback_conference_peer_name.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_conference_peer_name.__doc__ = """None tox_callback_conference_peer_name(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:2587"""
# c-toxcore/toxcore/tox.h:2593
# c-toxcore/toxcore/tox.h:115
tox_conference_peer_list_changed_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(None))
# c-toxcore/toxcore/tox.h:2602
# Set the callback for the `conference_peer_list_changed` event.
# Set the callback for the `conference_peer_list_changed` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 2602
try:
    tox_callback_conference_peer_list_changed = _libraries['FIXME_STUB'].tox_callback_conference_peer_list_changed
    tox_callback_conference_peer_list_changed.restype = None
# tox_callback_conference_peer_list_changed(tox, callback)
    tox_callback_conference_peer_list_changed.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_conference_peer_list_changed.__doc__ = """None tox_callback_conference_peer_list_changed(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:2602"""
# c-toxcore/toxcore/tox.h:2604

# values for enumeration 'Tox_Err_Conference_New'
Tox_Err_Conference_New__enumvalues = {
    0: 'TOX_ERR_CONFERENCE_NEW_OK',
    1: 'TOX_ERR_CONFERENCE_NEW_INIT',
}
TOX_ERR_CONFERENCE_NEW_OK = 0
TOX_ERR_CONFERENCE_NEW_INIT = 1
Tox_Err_Conference_New = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:2618
# c-toxcore/toxcore/tox.h 2618
try:
    tox_err_conference_new_to_string = _libraries['FIXME_STUB'].tox_err_conference_new_to_string
    tox_err_conference_new_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_conference_new_to_string(value)
    tox_err_conference_new_to_string.argtypes = [Tox_Err_Conference_New]
except AttributeError:
    pass
tox_err_conference_new_to_string.__doc__ = """LP_c_char tox_err_conference_new_to_string(Tox_Err_Conference_New value)
    c-toxcore/toxcore/tox.h:2618"""
# c-toxcore/toxcore/tox.h:2629
# Creates a new conference.
# Creates a new conference.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2604
# c-toxcore/toxcore/tox.h 2629
try:
    tox_conference_new = _libraries['FIXME_STUB'].tox_conference_new
    tox_conference_new.restype = Tox_Conference_Number
# tox_conference_new(tox, error)
    tox_conference_new.argtypes = [POINTER_T(struct_Tox), POINTER_T(Tox_Err_Conference_New)]
except AttributeError:
    pass
tox_conference_new.__doc__ = """Tox_Conference_Number tox_conference_new(LP_struct_Tox tox, LP_Tox_Err_Conference_New error)
    c-toxcore/toxcore/tox.h:2629"""
# c-toxcore/toxcore/tox.h:2631

# values for enumeration 'Tox_Err_Conference_Delete'
Tox_Err_Conference_Delete__enumvalues = {
    0: 'TOX_ERR_CONFERENCE_DELETE_OK',
    1: 'TOX_ERR_CONFERENCE_DELETE_CONFERENCE_NOT_FOUND',
}
TOX_ERR_CONFERENCE_DELETE_OK = 0
TOX_ERR_CONFERENCE_DELETE_CONFERENCE_NOT_FOUND = 1
Tox_Err_Conference_Delete = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:2645
# c-toxcore/toxcore/tox.h 2645
try:
    tox_err_conference_delete_to_string = _libraries['FIXME_STUB'].tox_err_conference_delete_to_string
    tox_err_conference_delete_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_conference_delete_to_string(value)
    tox_err_conference_delete_to_string.argtypes = [Tox_Err_Conference_Delete]
except AttributeError:
    pass
tox_err_conference_delete_to_string.__doc__ = """LP_c_char tox_err_conference_delete_to_string(Tox_Err_Conference_Delete value)
    c-toxcore/toxcore/tox.h:2645"""
# c-toxcore/toxcore/tox.h:2655
# This function deletes a conference.
# This function deletes a conference.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2631
# c-toxcore/toxcore/tox.h 2655
try:
    tox_conference_delete = _libraries['FIXME_STUB'].tox_conference_delete
    tox_conference_delete.restype = ctypes.c_bool
# tox_conference_delete(tox, conference_number, error)
    tox_conference_delete.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, POINTER_T(Tox_Err_Conference_Delete)]
except AttributeError:
    pass
tox_conference_delete.__doc__ = """c_bool tox_conference_delete(LP_struct_Tox tox, Tox_Conference_Number conference_number, LP_Tox_Err_Conference_Delete error)
    c-toxcore/toxcore/tox.h:2655"""
# c-toxcore/toxcore/tox.h:2660
# Error codes for peer info queries.
# Error codes for peer info queries.

# values for enumeration 'Tox_Err_Conference_Peer_Query'
Tox_Err_Conference_Peer_Query__enumvalues = {
    0: 'TOX_ERR_CONFERENCE_PEER_QUERY_OK',
    1: 'TOX_ERR_CONFERENCE_PEER_QUERY_CONFERENCE_NOT_FOUND',
    2: 'TOX_ERR_CONFERENCE_PEER_QUERY_PEER_NOT_FOUND',
    3: 'TOX_ERR_CONFERENCE_PEER_QUERY_NO_CONNECTION',
}
TOX_ERR_CONFERENCE_PEER_QUERY_OK = 0
TOX_ERR_CONFERENCE_PEER_QUERY_CONFERENCE_NOT_FOUND = 1
TOX_ERR_CONFERENCE_PEER_QUERY_PEER_NOT_FOUND = 2
TOX_ERR_CONFERENCE_PEER_QUERY_NO_CONNECTION = 3
Tox_Err_Conference_Peer_Query = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:2684
# c-toxcore/toxcore/tox.h 2684
try:
    tox_err_conference_peer_query_to_string = _libraries['FIXME_STUB'].tox_err_conference_peer_query_to_string
    tox_err_conference_peer_query_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_conference_peer_query_to_string(value)
    tox_err_conference_peer_query_to_string.argtypes = [Tox_Err_Conference_Peer_Query]
except AttributeError:
    pass
tox_err_conference_peer_query_to_string.__doc__ = """LP_c_char tox_err_conference_peer_query_to_string(Tox_Err_Conference_Peer_Query value)
    c-toxcore/toxcore/tox.h:2684"""
# c-toxcore/toxcore/tox.h:2693
# Return the number of online peers in the conference.
# Return the number of online peers in the conference.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2660
# c-toxcore/toxcore/tox.h 2693
try:
    tox_conference_peer_count = _libraries['FIXME_STUB'].tox_conference_peer_count
    tox_conference_peer_count.restype = uint32_t
# tox_conference_peer_count(tox, conference_number, error)
    tox_conference_peer_count.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, POINTER_T(Tox_Err_Conference_Peer_Query)]
except AttributeError:
    pass
tox_conference_peer_count.__doc__ = """uint32_t tox_conference_peer_count(LP_struct_Tox tox, Tox_Conference_Number conference_number, LP_Tox_Err_Conference_Peer_Query error)
    c-toxcore/toxcore/tox.h:2693"""
# c-toxcore/toxcore/tox.h:2701
# Return the length of the peer's name.
# Return the length of the peer's name.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2660
# c-toxcore/toxcore/tox.h 2701
try:
    tox_conference_peer_get_name_size = _libraries['FIXME_STUB'].tox_conference_peer_get_name_size
    tox_conference_peer_get_name_size.restype = size_t
# tox_conference_peer_get_name_size(tox, conference_number, peer_number, error)
    tox_conference_peer_get_name_size.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, Tox_Conference_Peer_Number, POINTER_T(Tox_Err_Conference_Peer_Query)]
except AttributeError:
    pass
tox_conference_peer_get_name_size.__doc__ = """size_t tox_conference_peer_get_name_size(LP_struct_Tox tox, Tox_Conference_Number conference_number, Tox_Conference_Peer_Number peer_number, LP_Tox_Err_Conference_Peer_Query error)
    c-toxcore/toxcore/tox.h:2701"""
# c-toxcore/toxcore/tox.h:2715
# Copy the name of peer_number who is in conference_number to name.
# Copy the name of peer_number who is in conference_number to name.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2660
# c-toxcore/toxcore/tox.h 2715
try:
    tox_conference_peer_get_name = _libraries['FIXME_STUB'].tox_conference_peer_get_name
    tox_conference_peer_get_name.restype = ctypes.c_bool
# tox_conference_peer_get_name(tox, conference_number, peer_number, name, error)
    tox_conference_peer_get_name.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, Tox_Conference_Peer_Number, ctypes.c_ubyte * 0, POINTER_T(Tox_Err_Conference_Peer_Query)]
except AttributeError:
    pass
tox_conference_peer_get_name.__doc__ = """c_bool tox_conference_peer_get_name(LP_struct_Tox tox, Tox_Conference_Number conference_number, Tox_Conference_Peer_Number peer_number, array_c_ubyte name, LP_Tox_Err_Conference_Peer_Query error)
    c-toxcore/toxcore/tox.h:2715"""
# c-toxcore/toxcore/tox.h:2727
# Copy the public key of peer_number who is in conference_number to public_key.
# Copy the public key of peer_number who is in conference_number to public_key.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2660
# c-toxcore/toxcore/tox.h 2727
try:
    tox_conference_peer_get_public_key = _libraries['FIXME_STUB'].tox_conference_peer_get_public_key
    tox_conference_peer_get_public_key.restype = ctypes.c_bool
# tox_conference_peer_get_public_key(tox, conference_number, peer_number, public_key, error)
    tox_conference_peer_get_public_key.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, Tox_Conference_Peer_Number, ctypes.c_ubyte * 32, POINTER_T(Tox_Err_Conference_Peer_Query)]
except AttributeError:
    pass
tox_conference_peer_get_public_key.__doc__ = """c_bool tox_conference_peer_get_public_key(LP_struct_Tox tox, Tox_Conference_Number conference_number, Tox_Conference_Peer_Number peer_number, array_c_ubyte public_key, LP_Tox_Err_Conference_Peer_Query error)
    c-toxcore/toxcore/tox.h:2727"""
# c-toxcore/toxcore/tox.h:2734
# Return true if passed peer_number corresponds to our own.
# Return true if passed peer_number corresponds to our own.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2660
# c-toxcore/toxcore/tox.h 2734
try:
    tox_conference_peer_number_is_ours = _libraries['FIXME_STUB'].tox_conference_peer_number_is_ours
    tox_conference_peer_number_is_ours.restype = ctypes.c_bool
# tox_conference_peer_number_is_ours(tox, conference_number, peer_number, error)
    tox_conference_peer_number_is_ours.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, Tox_Conference_Peer_Number, POINTER_T(Tox_Err_Conference_Peer_Query)]
except AttributeError:
    pass
tox_conference_peer_number_is_ours.__doc__ = """c_bool tox_conference_peer_number_is_ours(LP_struct_Tox tox, Tox_Conference_Number conference_number, Tox_Conference_Peer_Number peer_number, LP_Tox_Err_Conference_Peer_Query error)
    c-toxcore/toxcore/tox.h:2734"""
# c-toxcore/toxcore/tox.h:2746
# Return the number of offline peers in the conference.
# Return the number of offline peers in the conference.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2660
# c-toxcore/toxcore/tox.h 2746
try:
    tox_conference_offline_peer_count = _libraries['FIXME_STUB'].tox_conference_offline_peer_count
    tox_conference_offline_peer_count.restype = uint32_t
# tox_conference_offline_peer_count(tox, conference_number, error)
    tox_conference_offline_peer_count.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, POINTER_T(Tox_Err_Conference_Peer_Query)]
except AttributeError:
    pass
tox_conference_offline_peer_count.__doc__ = """uint32_t tox_conference_offline_peer_count(LP_struct_Tox tox, Tox_Conference_Number conference_number, LP_Tox_Err_Conference_Peer_Query error)
    c-toxcore/toxcore/tox.h:2746"""
# c-toxcore/toxcore/tox.h:2755
# Return the length of the offline peer's name.
# Return the length of the offline peer's name.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2660
# c-toxcore/toxcore/tox.h 2755
try:
    tox_conference_offline_peer_get_name_size = _libraries['FIXME_STUB'].tox_conference_offline_peer_get_name_size
    tox_conference_offline_peer_get_name_size.restype = size_t
# tox_conference_offline_peer_get_name_size(tox, conference_number, offline_peer_number, error)
    tox_conference_offline_peer_get_name_size.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, Tox_Conference_Offline_Peer_Number, POINTER_T(Tox_Err_Conference_Peer_Query)]
except AttributeError:
    pass
tox_conference_offline_peer_get_name_size.__doc__ = """size_t tox_conference_offline_peer_get_name_size(LP_struct_Tox tox, Tox_Conference_Number conference_number, Tox_Conference_Offline_Peer_Number offline_peer_number, LP_Tox_Err_Conference_Peer_Query error)
    c-toxcore/toxcore/tox.h:2755"""
# c-toxcore/toxcore/tox.h:2770
# Copy the name of offline_peer_number who is in conference_number to name.
# Copy the name of offline_peer_number who is in conference_number to name.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2660
# c-toxcore/toxcore/tox.h 2770
try:
    tox_conference_offline_peer_get_name = _libraries['FIXME_STUB'].tox_conference_offline_peer_get_name
    tox_conference_offline_peer_get_name.restype = ctypes.c_bool
# tox_conference_offline_peer_get_name(tox, conference_number, offline_peer_number, name, error)
    tox_conference_offline_peer_get_name.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, Tox_Conference_Offline_Peer_Number, ctypes.c_ubyte * 0, POINTER_T(Tox_Err_Conference_Peer_Query)]
except AttributeError:
    pass
tox_conference_offline_peer_get_name.__doc__ = """c_bool tox_conference_offline_peer_get_name(LP_struct_Tox tox, Tox_Conference_Number conference_number, Tox_Conference_Offline_Peer_Number offline_peer_number, array_c_ubyte name, LP_Tox_Err_Conference_Peer_Query error)
    c-toxcore/toxcore/tox.h:2770"""
# c-toxcore/toxcore/tox.h:2782
# Copy the public key of offline_peer_number who is in conference_number to
# public_key.
# Copy the public key of offline_peer_number who is in conference_number to
# public_key.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2660
# c-toxcore/toxcore/tox.h 2782
try:
    tox_conference_offline_peer_get_public_key = _libraries['FIXME_STUB'].tox_conference_offline_peer_get_public_key
    tox_conference_offline_peer_get_public_key.restype = ctypes.c_bool
# tox_conference_offline_peer_get_public_key(tox, conference_number, offline_peer_number, public_key, error)
    tox_conference_offline_peer_get_public_key.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, Tox_Conference_Offline_Peer_Number, ctypes.c_ubyte * 32, POINTER_T(Tox_Err_Conference_Peer_Query)]
except AttributeError:
    pass
tox_conference_offline_peer_get_public_key.__doc__ = """c_bool tox_conference_offline_peer_get_public_key(LP_struct_Tox tox, Tox_Conference_Number conference_number, Tox_Conference_Offline_Peer_Number offline_peer_number, array_c_ubyte public_key, LP_Tox_Err_Conference_Peer_Query error)
    c-toxcore/toxcore/tox.h:2782"""
# c-toxcore/toxcore/tox.h:2790
# Return a unix-time timestamp of the last time offline_peer_number was seen to
# be active.
# Return a unix-time timestamp of the last time offline_peer_number was seen to
# be active.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2660
# c-toxcore/toxcore/tox.h 2790
try:
    tox_conference_offline_peer_get_last_active = _libraries['FIXME_STUB'].tox_conference_offline_peer_get_last_active
    tox_conference_offline_peer_get_last_active.restype = uint64_t
# tox_conference_offline_peer_get_last_active(tox, conference_number, offline_peer_number, error)
    tox_conference_offline_peer_get_last_active.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, Tox_Conference_Offline_Peer_Number, POINTER_T(Tox_Err_Conference_Peer_Query)]
except AttributeError:
    pass
tox_conference_offline_peer_get_last_active.__doc__ = """uint64_t tox_conference_offline_peer_get_last_active(LP_struct_Tox tox, Tox_Conference_Number conference_number, Tox_Conference_Offline_Peer_Number offline_peer_number, LP_Tox_Err_Conference_Peer_Query error)
    c-toxcore/toxcore/tox.h:2790"""
# c-toxcore/toxcore/tox.h:2794

# values for enumeration 'Tox_Err_Conference_Set_Max_Offline'
Tox_Err_Conference_Set_Max_Offline__enumvalues = {
    0: 'TOX_ERR_CONFERENCE_SET_MAX_OFFLINE_OK',
    1: 'TOX_ERR_CONFERENCE_SET_MAX_OFFLINE_CONFERENCE_NOT_FOUND',
}
TOX_ERR_CONFERENCE_SET_MAX_OFFLINE_OK = 0
TOX_ERR_CONFERENCE_SET_MAX_OFFLINE_CONFERENCE_NOT_FOUND = 1
Tox_Err_Conference_Set_Max_Offline = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:2808
# c-toxcore/toxcore/tox.h 2808
try:
    tox_err_conference_set_max_offline_to_string = _libraries['FIXME_STUB'].tox_err_conference_set_max_offline_to_string
    tox_err_conference_set_max_offline_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_conference_set_max_offline_to_string(value)
    tox_err_conference_set_max_offline_to_string.argtypes = [Tox_Err_Conference_Set_Max_Offline]
except AttributeError:
    pass
tox_err_conference_set_max_offline_to_string.__doc__ = """LP_c_char tox_err_conference_set_max_offline_to_string(Tox_Err_Conference_Set_Max_Offline value)
    c-toxcore/toxcore/tox.h:2808"""
# c-toxcore/toxcore/tox.h:2813
# Set maximum number of offline peers to store, overriding the default.
# Set maximum number of offline peers to store, overriding the default.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2794
# c-toxcore/toxcore/tox.h 2813
try:
    tox_conference_set_max_offline = _libraries['FIXME_STUB'].tox_conference_set_max_offline
    tox_conference_set_max_offline.restype = ctypes.c_bool
# tox_conference_set_max_offline(tox, conference_number, max_offline, error)
    tox_conference_set_max_offline.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, uint32_t, POINTER_T(Tox_Err_Conference_Set_Max_Offline)]
except AttributeError:
    pass
tox_conference_set_max_offline.__doc__ = """c_bool tox_conference_set_max_offline(LP_struct_Tox tox, Tox_Conference_Number conference_number, uint32_t max_offline, LP_Tox_Err_Conference_Set_Max_Offline error)
    c-toxcore/toxcore/tox.h:2813"""
# c-toxcore/toxcore/tox.h:2817

# values for enumeration 'Tox_Err_Conference_Invite'
Tox_Err_Conference_Invite__enumvalues = {
    0: 'TOX_ERR_CONFERENCE_INVITE_OK',
    1: 'TOX_ERR_CONFERENCE_INVITE_CONFERENCE_NOT_FOUND',
    2: 'TOX_ERR_CONFERENCE_INVITE_FAIL_SEND',
    3: 'TOX_ERR_CONFERENCE_INVITE_NO_CONNECTION',
}
TOX_ERR_CONFERENCE_INVITE_OK = 0
TOX_ERR_CONFERENCE_INVITE_CONFERENCE_NOT_FOUND = 1
TOX_ERR_CONFERENCE_INVITE_FAIL_SEND = 2
TOX_ERR_CONFERENCE_INVITE_NO_CONNECTION = 3
Tox_Err_Conference_Invite = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:2841
# c-toxcore/toxcore/tox.h 2841
try:
    tox_err_conference_invite_to_string = _libraries['FIXME_STUB'].tox_err_conference_invite_to_string
    tox_err_conference_invite_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_conference_invite_to_string(value)
    tox_err_conference_invite_to_string.argtypes = [Tox_Err_Conference_Invite]
except AttributeError:
    pass
tox_err_conference_invite_to_string.__doc__ = """LP_c_char tox_err_conference_invite_to_string(Tox_Err_Conference_Invite value)
    c-toxcore/toxcore/tox.h:2841"""
# c-toxcore/toxcore/tox.h:2852
# Invites a friend to a conference.
# Invites a friend to a conference.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2817
# c-toxcore/toxcore/tox.h 2852
try:
    tox_conference_invite = _libraries['FIXME_STUB'].tox_conference_invite
    tox_conference_invite.restype = ctypes.c_bool
# tox_conference_invite(tox, friend_number, conference_number, error)
    tox_conference_invite.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, Tox_Conference_Number, POINTER_T(Tox_Err_Conference_Invite)]
except AttributeError:
    pass
tox_conference_invite.__doc__ = """c_bool tox_conference_invite(LP_struct_Tox tox, Tox_Friend_Number friend_number, Tox_Conference_Number conference_number, LP_Tox_Err_Conference_Invite error)
    c-toxcore/toxcore/tox.h:2852"""
# c-toxcore/toxcore/tox.h:2856

# values for enumeration 'Tox_Err_Conference_Join'
Tox_Err_Conference_Join__enumvalues = {
    0: 'TOX_ERR_CONFERENCE_JOIN_OK',
    1: 'TOX_ERR_CONFERENCE_JOIN_INVALID_LENGTH',
    2: 'TOX_ERR_CONFERENCE_JOIN_WRONG_TYPE',
    3: 'TOX_ERR_CONFERENCE_JOIN_FRIEND_NOT_FOUND',
    4: 'TOX_ERR_CONFERENCE_JOIN_DUPLICATE',
    5: 'TOX_ERR_CONFERENCE_JOIN_INIT_FAIL',
    6: 'TOX_ERR_CONFERENCE_JOIN_FAIL_SEND',
    7: 'TOX_ERR_CONFERENCE_JOIN_NULL',
}
TOX_ERR_CONFERENCE_JOIN_OK = 0
TOX_ERR_CONFERENCE_JOIN_INVALID_LENGTH = 1
TOX_ERR_CONFERENCE_JOIN_WRONG_TYPE = 2
TOX_ERR_CONFERENCE_JOIN_FRIEND_NOT_FOUND = 3
TOX_ERR_CONFERENCE_JOIN_DUPLICATE = 4
TOX_ERR_CONFERENCE_JOIN_INIT_FAIL = 5
TOX_ERR_CONFERENCE_JOIN_FAIL_SEND = 6
TOX_ERR_CONFERENCE_JOIN_NULL = 7
Tox_Err_Conference_Join = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:2901
# c-toxcore/toxcore/tox.h 2901
try:
    tox_err_conference_join_to_string = _libraries['FIXME_STUB'].tox_err_conference_join_to_string
    tox_err_conference_join_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_conference_join_to_string(value)
    tox_err_conference_join_to_string.argtypes = [Tox_Err_Conference_Join]
except AttributeError:
    pass
tox_err_conference_join_to_string.__doc__ = """LP_c_char tox_err_conference_join_to_string(Tox_Err_Conference_Join value)
    c-toxcore/toxcore/tox.h:2901"""
# c-toxcore/toxcore/tox.h:2920
# Joins a conference that the client has been invited to.
# Joins a conference that the client has been invited to.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2856
# c-toxcore/toxcore/tox.h 2920
try:
    tox_conference_join = _libraries['FIXME_STUB'].tox_conference_join
    tox_conference_join.restype = Tox_Conference_Number
# tox_conference_join(tox, friend_number, cookie, length, error)
    tox_conference_join.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Conference_Join)]
except AttributeError:
    pass
tox_conference_join.__doc__ = """Tox_Conference_Number tox_conference_join(LP_struct_Tox tox, Tox_Friend_Number friend_number, array_c_ubyte cookie, size_t length, LP_Tox_Err_Conference_Join error)
    c-toxcore/toxcore/tox.h:2920"""
# c-toxcore/toxcore/tox.h:2925

# values for enumeration 'Tox_Err_Conference_Send_Message'
Tox_Err_Conference_Send_Message__enumvalues = {
    0: 'TOX_ERR_CONFERENCE_SEND_MESSAGE_OK',
    1: 'TOX_ERR_CONFERENCE_SEND_MESSAGE_CONFERENCE_NOT_FOUND',
    2: 'TOX_ERR_CONFERENCE_SEND_MESSAGE_TOO_LONG',
    3: 'TOX_ERR_CONFERENCE_SEND_MESSAGE_NO_CONNECTION',
    4: 'TOX_ERR_CONFERENCE_SEND_MESSAGE_FAIL_SEND',
}
TOX_ERR_CONFERENCE_SEND_MESSAGE_OK = 0
TOX_ERR_CONFERENCE_SEND_MESSAGE_CONFERENCE_NOT_FOUND = 1
TOX_ERR_CONFERENCE_SEND_MESSAGE_TOO_LONG = 2
TOX_ERR_CONFERENCE_SEND_MESSAGE_NO_CONNECTION = 3
TOX_ERR_CONFERENCE_SEND_MESSAGE_FAIL_SEND = 4
Tox_Err_Conference_Send_Message = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:2954
# c-toxcore/toxcore/tox.h 2954
try:
    tox_err_conference_send_message_to_string = _libraries['FIXME_STUB'].tox_err_conference_send_message_to_string
    tox_err_conference_send_message_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_conference_send_message_to_string(value)
    tox_err_conference_send_message_to_string.argtypes = [Tox_Err_Conference_Send_Message]
except AttributeError:
    pass
tox_err_conference_send_message_to_string.__doc__ = """LP_c_char tox_err_conference_send_message_to_string(Tox_Err_Conference_Send_Message value)
    c-toxcore/toxcore/tox.h:2954"""
# c-toxcore/toxcore/tox.h:2975
# Send a text chat message to the conference.
# Send a text chat message to the conference.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2925
# c-toxcore/toxcore/tox.h 2975
try:
    tox_conference_send_message = _libraries['FIXME_STUB'].tox_conference_send_message
    tox_conference_send_message.restype = ctypes.c_bool
# tox_conference_send_message(tox, conference_number, type, message, length, error)
    tox_conference_send_message.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, Tox_Message_Type, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Conference_Send_Message)]
except AttributeError:
    pass
tox_conference_send_message.__doc__ = """c_bool tox_conference_send_message(LP_struct_Tox tox, Tox_Conference_Number conference_number, Tox_Message_Type type, array_c_ubyte message, size_t length, LP_Tox_Err_Conference_Send_Message error)
    c-toxcore/toxcore/tox.h:2975"""
# c-toxcore/toxcore/tox.h:2980

# values for enumeration 'Tox_Err_Conference_Title'
Tox_Err_Conference_Title__enumvalues = {
    0: 'TOX_ERR_CONFERENCE_TITLE_OK',
    1: 'TOX_ERR_CONFERENCE_TITLE_CONFERENCE_NOT_FOUND',
    2: 'TOX_ERR_CONFERENCE_TITLE_INVALID_LENGTH',
    3: 'TOX_ERR_CONFERENCE_TITLE_FAIL_SEND',
}
TOX_ERR_CONFERENCE_TITLE_OK = 0
TOX_ERR_CONFERENCE_TITLE_CONFERENCE_NOT_FOUND = 1
TOX_ERR_CONFERENCE_TITLE_INVALID_LENGTH = 2
TOX_ERR_CONFERENCE_TITLE_FAIL_SEND = 3
Tox_Err_Conference_Title = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3004
# c-toxcore/toxcore/tox.h 3004
try:
    tox_err_conference_title_to_string = _libraries['FIXME_STUB'].tox_err_conference_title_to_string
    tox_err_conference_title_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_conference_title_to_string(value)
    tox_err_conference_title_to_string.argtypes = [Tox_Err_Conference_Title]
except AttributeError:
    pass
tox_err_conference_title_to_string.__doc__ = """LP_c_char tox_err_conference_title_to_string(Tox_Err_Conference_Title value)
    c-toxcore/toxcore/tox.h:3004"""
# c-toxcore/toxcore/tox.h:3014
# Return the length of the conference title.
# Return the length of the conference title.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2980
# c-toxcore/toxcore/tox.h 3014
try:
    tox_conference_get_title_size = _libraries['FIXME_STUB'].tox_conference_get_title_size
    tox_conference_get_title_size.restype = size_t
# tox_conference_get_title_size(tox, conference_number, error)
    tox_conference_get_title_size.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, POINTER_T(Tox_Err_Conference_Title)]
except AttributeError:
    pass
tox_conference_get_title_size.__doc__ = """size_t tox_conference_get_title_size(LP_struct_Tox tox, Tox_Conference_Number conference_number, LP_Tox_Err_Conference_Title error)
    c-toxcore/toxcore/tox.h:3014"""
# c-toxcore/toxcore/tox.h:3032
# Write the title designated by the given conference number to a byte array.
# Write the title designated by the given conference number to a byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2980
# c-toxcore/toxcore/tox.h 3032
try:
    tox_conference_get_title = _libraries['FIXME_STUB'].tox_conference_get_title
    tox_conference_get_title.restype = ctypes.c_bool
# tox_conference_get_title(tox, conference_number, title, error)
    tox_conference_get_title.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, ctypes.c_ubyte * 0, POINTER_T(Tox_Err_Conference_Title)]
except AttributeError:
    pass
tox_conference_get_title.__doc__ = """c_bool tox_conference_get_title(LP_struct_Tox tox, Tox_Conference_Number conference_number, array_c_ubyte title, LP_Tox_Err_Conference_Title error)
    c-toxcore/toxcore/tox.h:3032"""
# c-toxcore/toxcore/tox.h:3045
# Set the conference title and broadcast it to the rest of the conference.
# Set the conference title and broadcast it to the rest of the conference.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:2980
# c-toxcore/toxcore/tox.h 3045
try:
    tox_conference_set_title = _libraries['FIXME_STUB'].tox_conference_set_title
    tox_conference_set_title.restype = ctypes.c_bool
# tox_conference_set_title(tox, conference_number, title, length, error)
    tox_conference_set_title.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Conference_Title)]
except AttributeError:
    pass
tox_conference_set_title.__doc__ = """c_bool tox_conference_set_title(LP_struct_Tox tox, Tox_Conference_Number conference_number, array_c_ubyte title, size_t length, LP_Tox_Err_Conference_Title error)
    c-toxcore/toxcore/tox.h:3045"""
# c-toxcore/toxcore/tox.h:3056
# Return the number of conferences in the Tox instance.
# Return the number of conferences in the Tox instance.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 3056
try:
    tox_conference_get_chatlist_size = _libraries['FIXME_STUB'].tox_conference_get_chatlist_size
    tox_conference_get_chatlist_size.restype = size_t
# tox_conference_get_chatlist_size(tox)
    tox_conference_get_chatlist_size.argtypes = [POINTER_T(struct_Tox)]
except AttributeError:
    pass
tox_conference_get_chatlist_size.__doc__ = """size_t tox_conference_get_chatlist_size(LP_struct_Tox tox)
    c-toxcore/toxcore/tox.h:3056"""
# c-toxcore/toxcore/tox.h:3072
# Copy a list of valid conference numbers into the array chatlist.
# Copy a list of valid conference numbers into the array chatlist.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 3072
try:
    tox_conference_get_chatlist = _libraries['FIXME_STUB'].tox_conference_get_chatlist
    tox_conference_get_chatlist.restype = None
# tox_conference_get_chatlist(tox, chatlist)
    tox_conference_get_chatlist.argtypes = [POINTER_T(struct_Tox), ctypes.c_uint32 * 0]
except AttributeError:
    pass
tox_conference_get_chatlist.__doc__ = """None tox_conference_get_chatlist(LP_struct_Tox tox, array_c_uint32 chatlist)
    c-toxcore/toxcore/tox.h:3072"""
# c-toxcore/toxcore/tox.h:3080
# Returns the type of conference (Tox_Conference_Type) that conference_number
# is.
# Returns the type of conference (Tox_Conference_Type) that conference_number
# is.

# values for enumeration 'Tox_Err_Conference_Get_Type'
Tox_Err_Conference_Get_Type__enumvalues = {
    0: 'TOX_ERR_CONFERENCE_GET_TYPE_OK',
    1: 'TOX_ERR_CONFERENCE_GET_TYPE_CONFERENCE_NOT_FOUND',
}
TOX_ERR_CONFERENCE_GET_TYPE_OK = 0
TOX_ERR_CONFERENCE_GET_TYPE_CONFERENCE_NOT_FOUND = 1
Tox_Err_Conference_Get_Type = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3094
# c-toxcore/toxcore/tox.h 3094
try:
    tox_err_conference_get_type_to_string = _libraries['FIXME_STUB'].tox_err_conference_get_type_to_string
    tox_err_conference_get_type_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_conference_get_type_to_string(value)
    tox_err_conference_get_type_to_string.argtypes = [Tox_Err_Conference_Get_Type]
except AttributeError:
    pass
tox_err_conference_get_type_to_string.__doc__ = """LP_c_char tox_err_conference_get_type_to_string(Tox_Err_Conference_Get_Type value)
    c-toxcore/toxcore/tox.h:3094"""
# c-toxcore/toxcore/tox.h:3099
# Get the type (text or A/V) for the conference.
# Get the type (text or A/V) for the conference.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3080
# c-toxcore/toxcore/tox.h 3099
try:
    tox_conference_get_type = _libraries['FIXME_STUB'].tox_conference_get_type
    tox_conference_get_type.restype = Tox_Conference_Type
# tox_conference_get_type(tox, conference_number, error)
    tox_conference_get_type.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, POINTER_T(Tox_Err_Conference_Get_Type)]
except AttributeError:
    pass
tox_conference_get_type.__doc__ = """Tox_Conference_Type tox_conference_get_type(LP_struct_Tox tox, Tox_Conference_Number conference_number, LP_Tox_Err_Conference_Get_Type error)
    c-toxcore/toxcore/tox.h:3099"""
# c-toxcore/toxcore/tox.h:3112
# Get the conference unique ID.
# Get the conference unique ID.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 3112
try:
    tox_conference_get_id = _libraries['FIXME_STUB'].tox_conference_get_id
    tox_conference_get_id.restype = ctypes.c_bool
# tox_conference_get_id(tox, conference_number, id)
    tox_conference_get_id.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, ctypes.c_ubyte * 32]
except AttributeError:
    pass
tox_conference_get_id.__doc__ = """c_bool tox_conference_get_id(LP_struct_Tox tox, Tox_Conference_Number conference_number, array_c_ubyte id)
    c-toxcore/toxcore/tox.h:3112"""
# c-toxcore/toxcore/tox.h:3115

# values for enumeration 'Tox_Err_Conference_By_Id'
Tox_Err_Conference_By_Id__enumvalues = {
    0: 'TOX_ERR_CONFERENCE_BY_ID_OK',
    1: 'TOX_ERR_CONFERENCE_BY_ID_NULL',
    2: 'TOX_ERR_CONFERENCE_BY_ID_NOT_FOUND',
}
TOX_ERR_CONFERENCE_BY_ID_OK = 0
TOX_ERR_CONFERENCE_BY_ID_NULL = 1
TOX_ERR_CONFERENCE_BY_ID_NOT_FOUND = 2
Tox_Err_Conference_By_Id = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3134
# c-toxcore/toxcore/tox.h 3134
try:
    tox_err_conference_by_id_to_string = _libraries['FIXME_STUB'].tox_err_conference_by_id_to_string
    tox_err_conference_by_id_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_conference_by_id_to_string(value)
    tox_err_conference_by_id_to_string.argtypes = [Tox_Err_Conference_By_Id]
except AttributeError:
    pass
tox_err_conference_by_id_to_string.__doc__ = """LP_c_char tox_err_conference_by_id_to_string(Tox_Err_Conference_By_Id value)
    c-toxcore/toxcore/tox.h:3134"""
# c-toxcore/toxcore/tox.h:3143
# Return the conference number associated with the specified id.
# Return the conference number associated with the specified id.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3115
# c-toxcore/toxcore/tox.h 3143
try:
    tox_conference_by_id = _libraries['FIXME_STUB'].tox_conference_by_id
    tox_conference_by_id.restype = Tox_Conference_Number
# tox_conference_by_id(tox, id, error)
    tox_conference_by_id.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 32, POINTER_T(Tox_Err_Conference_By_Id)]
except AttributeError:
    pass
tox_conference_by_id.__doc__ = """Tox_Conference_Number tox_conference_by_id(LP_struct_Tox tox, array_c_ubyte id, LP_Tox_Err_Conference_By_Id error)
    c-toxcore/toxcore/tox.h:3143"""
# c-toxcore/toxcore/tox.h:3158
# Get the conference unique ID.
# Get the conference unique ID.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 3158
try:
    tox_conference_get_uid = _libraries['FIXME_STUB'].tox_conference_get_uid
    tox_conference_get_uid.restype = ctypes.c_bool
# tox_conference_get_uid(tox, conference_number, uid)
    tox_conference_get_uid.argtypes = [POINTER_T(struct_Tox), Tox_Conference_Number, ctypes.c_ubyte * 32]
except AttributeError:
    pass
tox_conference_get_uid.__doc__ = """c_bool tox_conference_get_uid(LP_struct_Tox tox, Tox_Conference_Number conference_number, array_c_ubyte uid)
    c-toxcore/toxcore/tox.h:3158"""
# c-toxcore/toxcore/tox.h:3161

# values for enumeration 'Tox_Err_Conference_By_Uid'
Tox_Err_Conference_By_Uid__enumvalues = {
    0: 'TOX_ERR_CONFERENCE_BY_UID_OK',
    1: 'TOX_ERR_CONFERENCE_BY_UID_NULL',
    2: 'TOX_ERR_CONFERENCE_BY_UID_NOT_FOUND',
}
TOX_ERR_CONFERENCE_BY_UID_OK = 0
TOX_ERR_CONFERENCE_BY_UID_NULL = 1
TOX_ERR_CONFERENCE_BY_UID_NOT_FOUND = 2
Tox_Err_Conference_By_Uid = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3180
# c-toxcore/toxcore/tox.h 3180
try:
    tox_err_conference_by_uid_to_string = _libraries['FIXME_STUB'].tox_err_conference_by_uid_to_string
    tox_err_conference_by_uid_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_conference_by_uid_to_string(value)
    tox_err_conference_by_uid_to_string.argtypes = [Tox_Err_Conference_By_Uid]
except AttributeError:
    pass
tox_err_conference_by_uid_to_string.__doc__ = """LP_c_char tox_err_conference_by_uid_to_string(Tox_Err_Conference_By_Uid value)
    c-toxcore/toxcore/tox.h:3180"""
# c-toxcore/toxcore/tox.h:3192
# Return the conference number associated with the specified uid.
# Return the conference number associated with the specified uid.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3161
# c-toxcore/toxcore/tox.h 3192
try:
    tox_conference_by_uid = _libraries['FIXME_STUB'].tox_conference_by_uid
    tox_conference_by_uid.restype = Tox_Conference_Number
# tox_conference_by_uid(tox, uid, error)
    tox_conference_by_uid.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 32, POINTER_T(Tox_Err_Conference_By_Uid)]
except AttributeError:
    pass
tox_conference_by_uid.__doc__ = """Tox_Conference_Number tox_conference_by_uid(LP_struct_Tox tox, array_c_ubyte uid, LP_Tox_Err_Conference_By_Uid error)
    c-toxcore/toxcore/tox.h:3192"""
# c-toxcore/toxcore/tox.h:3201
# @{
# @{

# values for enumeration 'Tox_Err_Friend_Custom_Packet'
Tox_Err_Friend_Custom_Packet__enumvalues = {
    0: 'TOX_ERR_FRIEND_CUSTOM_PACKET_OK',
    1: 'TOX_ERR_FRIEND_CUSTOM_PACKET_NULL',
    2: 'TOX_ERR_FRIEND_CUSTOM_PACKET_FRIEND_NOT_FOUND',
    3: 'TOX_ERR_FRIEND_CUSTOM_PACKET_FRIEND_NOT_CONNECTED',
    4: 'TOX_ERR_FRIEND_CUSTOM_PACKET_INVALID',
    5: 'TOX_ERR_FRIEND_CUSTOM_PACKET_EMPTY',
    6: 'TOX_ERR_FRIEND_CUSTOM_PACKET_TOO_LONG',
    7: 'TOX_ERR_FRIEND_CUSTOM_PACKET_SENDQ',
}
TOX_ERR_FRIEND_CUSTOM_PACKET_OK = 0
TOX_ERR_FRIEND_CUSTOM_PACKET_NULL = 1
TOX_ERR_FRIEND_CUSTOM_PACKET_FRIEND_NOT_FOUND = 2
TOX_ERR_FRIEND_CUSTOM_PACKET_FRIEND_NOT_CONNECTED = 3
TOX_ERR_FRIEND_CUSTOM_PACKET_INVALID = 4
TOX_ERR_FRIEND_CUSTOM_PACKET_EMPTY = 5
TOX_ERR_FRIEND_CUSTOM_PACKET_TOO_LONG = 6
TOX_ERR_FRIEND_CUSTOM_PACKET_SENDQ = 7
Tox_Err_Friend_Custom_Packet = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3247
# c-toxcore/toxcore/tox.h 3247
try:
    tox_err_friend_custom_packet_to_string = _libraries['FIXME_STUB'].tox_err_friend_custom_packet_to_string
    tox_err_friend_custom_packet_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_friend_custom_packet_to_string(value)
    tox_err_friend_custom_packet_to_string.argtypes = [Tox_Err_Friend_Custom_Packet]
except AttributeError:
    pass
tox_err_friend_custom_packet_to_string.__doc__ = """LP_c_char tox_err_friend_custom_packet_to_string(Tox_Err_Friend_Custom_Packet value)
    c-toxcore/toxcore/tox.h:3247"""
# c-toxcore/toxcore/tox.h:3269
# Send a custom lossy packet to a friend.
# Send a custom lossy packet to a friend.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3201
# c-toxcore/toxcore/tox.h 3269
try:
    tox_friend_send_lossy_packet = _libraries['FIXME_STUB'].tox_friend_send_lossy_packet
    tox_friend_send_lossy_packet.restype = ctypes.c_bool
# tox_friend_send_lossy_packet(tox, friend_number, data, length, error)
    tox_friend_send_lossy_packet.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Friend_Custom_Packet)]
except AttributeError:
    pass
tox_friend_send_lossy_packet.__doc__ = """c_bool tox_friend_send_lossy_packet(LP_struct_Tox tox, Tox_Friend_Number friend_number, array_c_ubyte data, size_t length, LP_Tox_Err_Friend_Custom_Packet error)
    c-toxcore/toxcore/tox.h:3269"""
# c-toxcore/toxcore/tox.h:3290
# Send a custom lossless packet to a friend.
# Send a custom lossless packet to a friend.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3201
# c-toxcore/toxcore/tox.h 3290
try:
    tox_friend_send_lossless_packet = _libraries['FIXME_STUB'].tox_friend_send_lossless_packet
    tox_friend_send_lossless_packet.restype = ctypes.c_bool
# tox_friend_send_lossless_packet(tox, friend_number, data, length, error)
    tox_friend_send_lossless_packet.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Friend_Custom_Packet)]
except AttributeError:
    pass
tox_friend_send_lossless_packet.__doc__ = """c_bool tox_friend_send_lossless_packet(LP_struct_Tox tox, Tox_Friend_Number friend_number, array_c_ubyte data, size_t length, LP_Tox_Err_Friend_Custom_Packet error)
    c-toxcore/toxcore/tox.h:3290"""
# c-toxcore/toxcore/tox.h:3303
# tox_callback_friend_lossy_packet is the compatibility function to set the
# callback for all packet IDs except those reserved for ToxAV.
# tox_callback_friend_lossy_packet is the compatibility function to set the
# callback for all packet IDs except those reserved for ToxAV.
# c-toxcore/toxcore/tox.h:115
tox_friend_lossy_packet_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:3313
# Set the callback for the `friend_lossy_packet` event.
# Set the callback for the `friend_lossy_packet` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 3313
try:
    tox_callback_friend_lossy_packet = _libraries['FIXME_STUB'].tox_callback_friend_lossy_packet
    tox_callback_friend_lossy_packet.restype = None
# tox_callback_friend_lossy_packet(tox, callback)
    tox_callback_friend_lossy_packet.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_friend_lossy_packet.__doc__ = """None tox_callback_friend_lossy_packet(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:3313"""
# c-toxcore/toxcore/tox.h:3320
# c-toxcore/toxcore/tox.h:115
tox_friend_lossless_packet_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:3330
# Set the callback for the `friend_lossless_packet` event.
# Set the callback for the `friend_lossless_packet` event.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 3330
try:
    tox_callback_friend_lossless_packet = _libraries['FIXME_STUB'].tox_callback_friend_lossless_packet
    tox_callback_friend_lossless_packet.restype = None
# tox_callback_friend_lossless_packet(tox, callback)
    tox_callback_friend_lossless_packet.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_friend_lossless_packet.__doc__ = """None tox_callback_friend_lossless_packet(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:3330"""
# c-toxcore/toxcore/tox.h:3338
# @{
# @{

# values for enumeration 'Tox_Err_Get_Port'
Tox_Err_Get_Port__enumvalues = {
    0: 'TOX_ERR_GET_PORT_OK',
    1: 'TOX_ERR_GET_PORT_NOT_BOUND',
}
TOX_ERR_GET_PORT_OK = 0
TOX_ERR_GET_PORT_NOT_BOUND = 1
Tox_Err_Get_Port = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3352
# c-toxcore/toxcore/tox.h 3352
try:
    tox_err_get_port_to_string = _libraries['FIXME_STUB'].tox_err_get_port_to_string
    tox_err_get_port_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_get_port_to_string(value)
    tox_err_get_port_to_string.argtypes = [Tox_Err_Get_Port]
except AttributeError:
    pass
tox_err_get_port_to_string.__doc__ = """LP_c_char tox_err_get_port_to_string(Tox_Err_Get_Port value)
    c-toxcore/toxcore/tox.h:3352"""
# c-toxcore/toxcore/tox.h:3367
# Writes the temporary DHT public key of this instance to a byte array.
# Writes the temporary DHT public key of this instance to a byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 3367
try:
    tox_self_get_dht_id = _libraries['FIXME_STUB'].tox_self_get_dht_id
    tox_self_get_dht_id.restype = None
# tox_self_get_dht_id(tox, dht_id)
    tox_self_get_dht_id.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 32]
except AttributeError:
    pass
tox_self_get_dht_id.__doc__ = """None tox_self_get_dht_id(LP_struct_Tox tox, array_c_ubyte dht_id)
    c-toxcore/toxcore/tox.h:3367"""
# c-toxcore/toxcore/tox.h:3372
# Return the UDP port this Tox instance is bound to.
# Return the UDP port this Tox instance is bound to.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3338
# c-toxcore/toxcore/tox.h 3372
try:
    tox_self_get_udp_port = _libraries['FIXME_STUB'].tox_self_get_udp_port
    tox_self_get_udp_port.restype = uint16_t
# tox_self_get_udp_port(tox, error)
    tox_self_get_udp_port.argtypes = [POINTER_T(struct_Tox), POINTER_T(Tox_Err_Get_Port)]
except AttributeError:
    pass
tox_self_get_udp_port.__doc__ = """uint16_t tox_self_get_udp_port(LP_struct_Tox tox, LP_Tox_Err_Get_Port error)
    c-toxcore/toxcore/tox.h:3372"""
# c-toxcore/toxcore/tox.h:3379
# Return the TCP port this Tox instance is bound to.
# Return the TCP port this Tox instance is bound to.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3338
# c-toxcore/toxcore/tox.h 3379
try:
    tox_self_get_tcp_port = _libraries['FIXME_STUB'].tox_self_get_tcp_port
    tox_self_get_tcp_port.restype = uint16_t
# tox_self_get_tcp_port(tox, error)
    tox_self_get_tcp_port.argtypes = [POINTER_T(struct_Tox), POINTER_T(Tox_Err_Get_Port)]
except AttributeError:
    pass
tox_self_get_tcp_port.__doc__ = """uint16_t tox_self_get_tcp_port(LP_struct_Tox tox, LP_Tox_Err_Get_Port error)
    c-toxcore/toxcore/tox.h:3379"""
# c-toxcore/toxcore/tox.h:3387
# @{
# @{
Tox_Group_Number = ctypes.c_uint32
# c-toxcore/toxcore/tox.h:3388
Tox_Group_Peer_Number = ctypes.c_uint32
# c-toxcore/toxcore/tox.h:3389
Tox_Group_Message_Id = ctypes.c_uint32
# c-toxcore/toxcore/tox.h:3402
# c-toxcore/toxcore/tox.h 3402
try:
    tox_group_max_topic_length = _libraries['FIXME_STUB'].tox_group_max_topic_length
    tox_group_max_topic_length.restype = uint32_t
# tox_group_max_topic_length()
    tox_group_max_topic_length.argtypes = []
except AttributeError:
    pass
tox_group_max_topic_length.__doc__ = """uint32_t tox_group_max_topic_length()
    c-toxcore/toxcore/tox.h:3402"""
# c-toxcore/toxcore/tox.h:3409
# c-toxcore/toxcore/tox.h 3409
try:
    tox_group_max_part_length = _libraries['FIXME_STUB'].tox_group_max_part_length
    tox_group_max_part_length.restype = uint32_t
# tox_group_max_part_length()
    tox_group_max_part_length.argtypes = []
except AttributeError:
    pass
tox_group_max_part_length.__doc__ = """uint32_t tox_group_max_part_length()
    c-toxcore/toxcore/tox.h:3409"""
# c-toxcore/toxcore/tox.h:3416
# c-toxcore/toxcore/tox.h 3416
try:
    tox_group_max_message_length = _libraries['FIXME_STUB'].tox_group_max_message_length
    tox_group_max_message_length.restype = uint32_t
# tox_group_max_message_length()
    tox_group_max_message_length.argtypes = []
except AttributeError:
    pass
tox_group_max_message_length.__doc__ = """uint32_t tox_group_max_message_length()
    c-toxcore/toxcore/tox.h:3416"""
# c-toxcore/toxcore/tox.h:3423
# c-toxcore/toxcore/tox.h 3423
try:
    tox_group_max_custom_lossy_packet_length = _libraries['FIXME_STUB'].tox_group_max_custom_lossy_packet_length
    tox_group_max_custom_lossy_packet_length.restype = uint32_t
# tox_group_max_custom_lossy_packet_length()
    tox_group_max_custom_lossy_packet_length.argtypes = []
except AttributeError:
    pass
tox_group_max_custom_lossy_packet_length.__doc__ = """uint32_t tox_group_max_custom_lossy_packet_length()
    c-toxcore/toxcore/tox.h:3423"""
# c-toxcore/toxcore/tox.h:3430
# c-toxcore/toxcore/tox.h 3430
try:
    tox_group_max_custom_lossless_packet_length = _libraries['FIXME_STUB'].tox_group_max_custom_lossless_packet_length
    tox_group_max_custom_lossless_packet_length.restype = uint32_t
# tox_group_max_custom_lossless_packet_length()
    tox_group_max_custom_lossless_packet_length.argtypes = []
except AttributeError:
    pass
tox_group_max_custom_lossless_packet_length.__doc__ = """uint32_t tox_group_max_custom_lossless_packet_length()
    c-toxcore/toxcore/tox.h:3430"""
# c-toxcore/toxcore/tox.h:3437
# c-toxcore/toxcore/tox.h 3437
try:
    tox_group_max_group_name_length = _libraries['FIXME_STUB'].tox_group_max_group_name_length
    tox_group_max_group_name_length.restype = uint32_t
# tox_group_max_group_name_length()
    tox_group_max_group_name_length.argtypes = []
except AttributeError:
    pass
tox_group_max_group_name_length.__doc__ = """uint32_t tox_group_max_group_name_length()
    c-toxcore/toxcore/tox.h:3437"""
# c-toxcore/toxcore/tox.h:3444
# c-toxcore/toxcore/tox.h 3444
try:
    tox_group_max_password_size = _libraries['FIXME_STUB'].tox_group_max_password_size
    tox_group_max_password_size.restype = uint32_t
# tox_group_max_password_size()
    tox_group_max_password_size.argtypes = []
except AttributeError:
    pass
tox_group_max_password_size.__doc__ = """uint32_t tox_group_max_password_size()
    c-toxcore/toxcore/tox.h:3444"""
# c-toxcore/toxcore/tox.h:3451
# c-toxcore/toxcore/tox.h 3451
try:
    tox_group_chat_id_size = _libraries['FIXME_STUB'].tox_group_chat_id_size
    tox_group_chat_id_size.restype = uint32_t
# tox_group_chat_id_size()
    tox_group_chat_id_size.argtypes = []
except AttributeError:
    pass
tox_group_chat_id_size.__doc__ = """uint32_t tox_group_chat_id_size()
    c-toxcore/toxcore/tox.h:3451"""
# c-toxcore/toxcore/tox.h:3458
# c-toxcore/toxcore/tox.h 3458
try:
    tox_group_peer_public_key_size = _libraries['FIXME_STUB'].tox_group_peer_public_key_size
    tox_group_peer_public_key_size.restype = uint32_t
# tox_group_peer_public_key_size()
    tox_group_peer_public_key_size.argtypes = []
except AttributeError:
    pass
tox_group_peer_public_key_size.__doc__ = """uint32_t tox_group_peer_public_key_size()
    c-toxcore/toxcore/tox.h:3458"""
# c-toxcore/toxcore/tox.h:3469
# Represents the group privacy state.
# Represents the group privacy state.

# values for enumeration 'Tox_Group_Privacy_State'
Tox_Group_Privacy_State__enumvalues = {
    0: 'TOX_GROUP_PRIVACY_STATE_PUBLIC',
    1: 'TOX_GROUP_PRIVACY_STATE_PRIVATE',
}
TOX_GROUP_PRIVACY_STATE_PUBLIC = 0
TOX_GROUP_PRIVACY_STATE_PRIVATE = 1
Tox_Group_Privacy_State = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3495
# c-toxcore/toxcore/tox.h 3495
try:
    tox_group_privacy_state_to_string = _libraries['FIXME_STUB'].tox_group_privacy_state_to_string
    tox_group_privacy_state_to_string.restype = POINTER_T(ctypes.c_char)
# tox_group_privacy_state_to_string(value)
    tox_group_privacy_state_to_string.argtypes = [Tox_Group_Privacy_State]
except AttributeError:
    pass
tox_group_privacy_state_to_string.__doc__ = """LP_c_char tox_group_privacy_state_to_string(Tox_Group_Privacy_State value)
    c-toxcore/toxcore/tox.h:3495"""
# c-toxcore/toxcore/tox.h:3502
# Represents the state of the group topic lock.
# Represents the state of the group topic lock.

# values for enumeration 'Tox_Group_Topic_Lock'
Tox_Group_Topic_Lock__enumvalues = {
    0: 'TOX_GROUP_TOPIC_LOCK_ENABLED',
    1: 'TOX_GROUP_TOPIC_LOCK_DISABLED',
}
TOX_GROUP_TOPIC_LOCK_ENABLED = 0
TOX_GROUP_TOPIC_LOCK_DISABLED = 1
Tox_Group_Topic_Lock = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3518
# c-toxcore/toxcore/tox.h 3518
try:
    tox_group_topic_lock_to_string = _libraries['FIXME_STUB'].tox_group_topic_lock_to_string
    tox_group_topic_lock_to_string.restype = POINTER_T(ctypes.c_char)
# tox_group_topic_lock_to_string(value)
    tox_group_topic_lock_to_string.argtypes = [Tox_Group_Topic_Lock]
except AttributeError:
    pass
tox_group_topic_lock_to_string.__doc__ = """LP_c_char tox_group_topic_lock_to_string(Tox_Group_Topic_Lock value)
    c-toxcore/toxcore/tox.h:3518"""
# c-toxcore/toxcore/tox.h:3525
# Represents the group voice state, which determines which Group Roles have
# permission to speak in the group chat. The voice state does not have any
# effect private messages or topic setting.
# Represents the group voice state, which determines which Group Roles have
# permission to speak in the group chat. The voice state does not have any
# effect private messages or topic setting.

# values for enumeration 'Tox_Group_Voice_State'
Tox_Group_Voice_State__enumvalues = {
    0: 'TOX_GROUP_VOICE_STATE_ALL',
    1: 'TOX_GROUP_VOICE_STATE_MODERATOR',
    2: 'TOX_GROUP_VOICE_STATE_FOUNDER',
}
TOX_GROUP_VOICE_STATE_ALL = 0
TOX_GROUP_VOICE_STATE_MODERATOR = 1
TOX_GROUP_VOICE_STATE_FOUNDER = 2
Tox_Group_Voice_State = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3542
# c-toxcore/toxcore/tox.h 3542
try:
    tox_group_voice_state_to_string = _libraries['FIXME_STUB'].tox_group_voice_state_to_string
    tox_group_voice_state_to_string.restype = POINTER_T(ctypes.c_char)
# tox_group_voice_state_to_string(value)
    tox_group_voice_state_to_string.argtypes = [Tox_Group_Voice_State]
except AttributeError:
    pass
tox_group_voice_state_to_string.__doc__ = """LP_c_char tox_group_voice_state_to_string(Tox_Group_Voice_State value)
    c-toxcore/toxcore/tox.h:3542"""
# c-toxcore/toxcore/tox.h:3550
# Represents group roles.
# Represents group roles.

# values for enumeration 'Tox_Group_Role'
Tox_Group_Role__enumvalues = {
    0: 'TOX_GROUP_ROLE_FOUNDER',
    1: 'TOX_GROUP_ROLE_MODERATOR',
    2: 'TOX_GROUP_ROLE_USER',
    3: 'TOX_GROUP_ROLE_OBSERVER',
}
TOX_GROUP_ROLE_FOUNDER = 0
TOX_GROUP_ROLE_MODERATOR = 1
TOX_GROUP_ROLE_USER = 2
TOX_GROUP_ROLE_OBSERVER = 3
Tox_Group_Role = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3578
# c-toxcore/toxcore/tox.h 3578
try:
    tox_group_role_to_string = _libraries['FIXME_STUB'].tox_group_role_to_string
    tox_group_role_to_string.restype = POINTER_T(ctypes.c_char)
# tox_group_role_to_string(value)
    tox_group_role_to_string.argtypes = [Tox_Group_Role]
except AttributeError:
    pass
tox_group_role_to_string.__doc__ = """LP_c_char tox_group_role_to_string(Tox_Group_Role value)
    c-toxcore/toxcore/tox.h:3578"""
# c-toxcore/toxcore/tox.h:3586
# *****************************************************************************
# *****************************************************************************

# values for enumeration 'Tox_Err_Group_New'
Tox_Err_Group_New__enumvalues = {
    0: 'TOX_ERR_GROUP_NEW_OK',
    1: 'TOX_ERR_GROUP_NEW_TOO_LONG',
    2: 'TOX_ERR_GROUP_NEW_EMPTY',
    3: 'TOX_ERR_GROUP_NEW_INIT',
    4: 'TOX_ERR_GROUP_NEW_STATE',
    5: 'TOX_ERR_GROUP_NEW_ANNOUNCE',
}
TOX_ERR_GROUP_NEW_OK = 0
TOX_ERR_GROUP_NEW_TOO_LONG = 1
TOX_ERR_GROUP_NEW_EMPTY = 2
TOX_ERR_GROUP_NEW_INIT = 3
TOX_ERR_GROUP_NEW_STATE = 4
TOX_ERR_GROUP_NEW_ANNOUNCE = 5
Tox_Err_Group_New = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3623
# c-toxcore/toxcore/tox.h 3623
try:
    tox_err_group_new_to_string = _libraries['FIXME_STUB'].tox_err_group_new_to_string
    tox_err_group_new_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_new_to_string(value)
    tox_err_group_new_to_string.argtypes = [Tox_Err_Group_New]
except AttributeError:
    pass
tox_err_group_new_to_string.__doc__ = """LP_c_char tox_err_group_new_to_string(Tox_Err_Group_New value)
    c-toxcore/toxcore/tox.h:3623"""
# c-toxcore/toxcore/tox.h:3648
# Creates a new group chat.
# Creates a new group chat.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3586
# c-toxcore/toxcore/tox.h 3648
try:
    tox_group_new = _libraries['FIXME_STUB'].tox_group_new
    tox_group_new.restype = Tox_Group_Number
# tox_group_new(tox, privacy_state, group_name, group_name_length, name, name_length, error)
    tox_group_new.argtypes = [POINTER_T(struct_Tox), Tox_Group_Privacy_State, ctypes.c_ubyte * 0, size_t, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Group_New)]
except AttributeError:
    pass
tox_group_new.__doc__ = """Tox_Group_Number tox_group_new(LP_struct_Tox tox, Tox_Group_Privacy_State privacy_state, array_c_ubyte group_name, size_t group_name_length, array_c_ubyte name, size_t name_length, LP_Tox_Err_Group_New error)
    c-toxcore/toxcore/tox.h:3648"""
# c-toxcore/toxcore/tox.h:3653

# values for enumeration 'Tox_Err_Group_Join'
Tox_Err_Group_Join__enumvalues = {
    0: 'TOX_ERR_GROUP_JOIN_OK',
    1: 'TOX_ERR_GROUP_JOIN_INIT',
    2: 'TOX_ERR_GROUP_JOIN_BAD_CHAT_ID',
    3: 'TOX_ERR_GROUP_JOIN_EMPTY',
    4: 'TOX_ERR_GROUP_JOIN_TOO_LONG',
    5: 'TOX_ERR_GROUP_JOIN_PASSWORD',
    6: 'TOX_ERR_GROUP_JOIN_CORE',
}
TOX_ERR_GROUP_JOIN_OK = 0
TOX_ERR_GROUP_JOIN_INIT = 1
TOX_ERR_GROUP_JOIN_BAD_CHAT_ID = 2
TOX_ERR_GROUP_JOIN_EMPTY = 3
TOX_ERR_GROUP_JOIN_TOO_LONG = 4
TOX_ERR_GROUP_JOIN_PASSWORD = 5
TOX_ERR_GROUP_JOIN_CORE = 6
Tox_Err_Group_Join = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3695
# c-toxcore/toxcore/tox.h 3695
try:
    tox_err_group_join_to_string = _libraries['FIXME_STUB'].tox_err_group_join_to_string
    tox_err_group_join_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_join_to_string(value)
    tox_err_group_join_to_string.argtypes = [Tox_Err_Group_Join]
except AttributeError:
    pass
tox_err_group_join_to_string.__doc__ = """LP_c_char tox_err_group_join_to_string(Tox_Err_Group_Join value)
    c-toxcore/toxcore/tox.h:3695"""
# c-toxcore/toxcore/tox.h:3717
# Joins a group chat with specified Chat ID.
# Joins a group chat with specified Chat ID.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3653
# c-toxcore/toxcore/tox.h 3717
try:
    tox_group_join = _libraries['FIXME_STUB'].tox_group_join
    tox_group_join.restype = Tox_Group_Number
# tox_group_join(tox, chat_id, name, name_length, password, password_length, error)
    tox_group_join.argtypes = [POINTER_T(struct_Tox), ctypes.c_ubyte * 32, ctypes.c_ubyte * 0, size_t, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Group_Join)]
except AttributeError:
    pass
tox_group_join.__doc__ = """Tox_Group_Number tox_group_join(LP_struct_Tox tox, array_c_ubyte chat_id, array_c_ubyte name, size_t name_length, array_c_ubyte password, size_t password_length, LP_Tox_Err_Group_Join error)
    c-toxcore/toxcore/tox.h:3717"""
# c-toxcore/toxcore/tox.h:3723

# values for enumeration 'Tox_Err_Group_Is_Connected'
Tox_Err_Group_Is_Connected__enumvalues = {
    0: 'TOX_ERR_GROUP_IS_CONNECTED_OK',
    1: 'TOX_ERR_GROUP_IS_CONNECTED_GROUP_NOT_FOUND',
}
TOX_ERR_GROUP_IS_CONNECTED_OK = 0
TOX_ERR_GROUP_IS_CONNECTED_GROUP_NOT_FOUND = 1
Tox_Err_Group_Is_Connected = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3737
# c-toxcore/toxcore/tox.h 3737
try:
    tox_err_group_is_connected_to_string = _libraries['FIXME_STUB'].tox_err_group_is_connected_to_string
    tox_err_group_is_connected_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_is_connected_to_string(value)
    tox_err_group_is_connected_to_string.argtypes = [Tox_Err_Group_Is_Connected]
except AttributeError:
    pass
tox_err_group_is_connected_to_string.__doc__ = """LP_c_char tox_err_group_is_connected_to_string(Tox_Err_Group_Is_Connected value)
    c-toxcore/toxcore/tox.h:3737"""
# c-toxcore/toxcore/tox.h:3745
# Returns true if the group chat is currently connected or attempting to connect
# to other peers in the group.
# Returns true if the group chat is currently connected or attempting to connect
# to other peers in the group.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3723
# c-toxcore/toxcore/tox.h 3745
try:
    tox_group_is_connected = _libraries['FIXME_STUB'].tox_group_is_connected
    tox_group_is_connected.restype = ctypes.c_bool
# tox_group_is_connected(tox, group_number, error)
    tox_group_is_connected.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_Is_Connected)]
except AttributeError:
    pass
tox_group_is_connected.__doc__ = """c_bool tox_group_is_connected(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_Is_Connected error)
    c-toxcore/toxcore/tox.h:3745"""
# c-toxcore/toxcore/tox.h:3747

# values for enumeration 'Tox_Err_Group_Disconnect'
Tox_Err_Group_Disconnect__enumvalues = {
    0: 'TOX_ERR_GROUP_DISCONNECT_OK',
    1: 'TOX_ERR_GROUP_DISCONNECT_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_DISCONNECT_ALREADY_DISCONNECTED',
}
TOX_ERR_GROUP_DISCONNECT_OK = 0
TOX_ERR_GROUP_DISCONNECT_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_DISCONNECT_ALREADY_DISCONNECTED = 2
Tox_Err_Group_Disconnect = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3765
# c-toxcore/toxcore/tox.h 3765
try:
    tox_err_group_disconnect_to_string = _libraries['FIXME_STUB'].tox_err_group_disconnect_to_string
    tox_err_group_disconnect_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_disconnect_to_string(value)
    tox_err_group_disconnect_to_string.argtypes = [Tox_Err_Group_Disconnect]
except AttributeError:
    pass
tox_err_group_disconnect_to_string.__doc__ = """LP_c_char tox_err_group_disconnect_to_string(Tox_Err_Group_Disconnect value)
    c-toxcore/toxcore/tox.h:3765"""
# c-toxcore/toxcore/tox.h:3775
# Disconnects from a group chat while retaining the group state and credentials.
# Disconnects from a group chat while retaining the group state and credentials.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3747
# c-toxcore/toxcore/tox.h 3775
try:
    tox_group_disconnect = _libraries['FIXME_STUB'].tox_group_disconnect
    tox_group_disconnect.restype = ctypes.c_bool
# tox_group_disconnect(tox, group_number, error)
    tox_group_disconnect.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_Disconnect)]
except AttributeError:
    pass
tox_group_disconnect.__doc__ = """c_bool tox_group_disconnect(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_Disconnect error)
    c-toxcore/toxcore/tox.h:3775"""
# c-toxcore/toxcore/tox.h:3777

# values for enumeration 'Tox_Err_Group_Reconnect'
Tox_Err_Group_Reconnect__enumvalues = {
    0: 'TOX_ERR_GROUP_RECONNECT_OK',
    1: 'TOX_ERR_GROUP_RECONNECT_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_RECONNECT_CORE',
}
TOX_ERR_GROUP_RECONNECT_OK = 0
TOX_ERR_GROUP_RECONNECT_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_RECONNECT_CORE = 2
Tox_Err_Group_Reconnect = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3796
# c-toxcore/toxcore/tox.h 3796
try:
    tox_err_group_reconnect_to_string = _libraries['FIXME_STUB'].tox_err_group_reconnect_to_string
    tox_err_group_reconnect_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_reconnect_to_string(value)
    tox_err_group_reconnect_to_string.argtypes = [Tox_Err_Group_Reconnect]
except AttributeError:
    pass
tox_err_group_reconnect_to_string.__doc__ = """LP_c_char tox_err_group_reconnect_to_string(Tox_Err_Group_Reconnect value)
    c-toxcore/toxcore/tox.h:3796"""
# c-toxcore/toxcore/tox.h:3809
# Reconnects to a group.
# Reconnects to a group.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3777
# c-toxcore/toxcore/tox.h 3809
try:
    tox_group_reconnect = _libraries['FIXME_STUB'].tox_group_reconnect
    tox_group_reconnect.restype = ctypes.c_bool
# tox_group_reconnect(tox, group_number, error)
    tox_group_reconnect.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_Reconnect)]
except AttributeError:
    pass
tox_group_reconnect.__doc__ = """c_bool tox_group_reconnect(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_Reconnect error)
    c-toxcore/toxcore/tox.h:3809"""
# c-toxcore/toxcore/tox.h:3811

# values for enumeration 'Tox_Err_Group_Leave'
Tox_Err_Group_Leave__enumvalues = {
    0: 'TOX_ERR_GROUP_LEAVE_OK',
    1: 'TOX_ERR_GROUP_LEAVE_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_LEAVE_TOO_LONG',
    3: 'TOX_ERR_GROUP_LEAVE_FAIL_SEND',
}
TOX_ERR_GROUP_LEAVE_OK = 0
TOX_ERR_GROUP_LEAVE_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_LEAVE_TOO_LONG = 2
TOX_ERR_GROUP_LEAVE_FAIL_SEND = 3
Tox_Err_Group_Leave = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3834
# c-toxcore/toxcore/tox.h 3834
try:
    tox_err_group_leave_to_string = _libraries['FIXME_STUB'].tox_err_group_leave_to_string
    tox_err_group_leave_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_leave_to_string(value)
    tox_err_group_leave_to_string.argtypes = [Tox_Err_Group_Leave]
except AttributeError:
    pass
tox_err_group_leave_to_string.__doc__ = """LP_c_char tox_err_group_leave_to_string(Tox_Err_Group_Leave value)
    c-toxcore/toxcore/tox.h:3834"""
# c-toxcore/toxcore/tox.h:3852
# Leaves a group.
# Leaves a group.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3811
# c-toxcore/toxcore/tox.h 3852
try:
    tox_group_leave = _libraries['FIXME_STUB'].tox_group_leave
    tox_group_leave.restype = ctypes.c_bool
# tox_group_leave(tox, group_number, part_message, length, error)
    tox_group_leave.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Group_Leave)]
except AttributeError:
    pass
tox_group_leave.__doc__ = """c_bool tox_group_leave(LP_struct_Tox tox, Tox_Group_Number group_number, array_c_ubyte part_message, size_t length, LP_Tox_Err_Group_Leave error)
    c-toxcore/toxcore/tox.h:3852"""
# c-toxcore/toxcore/tox.h:3866
# General error codes for self state get and size functions.
# General error codes for self state get and size functions.

# values for enumeration 'Tox_Err_Group_Self_Query'
Tox_Err_Group_Self_Query__enumvalues = {
    0: 'TOX_ERR_GROUP_SELF_QUERY_OK',
    1: 'TOX_ERR_GROUP_SELF_QUERY_GROUP_NOT_FOUND',
}
TOX_ERR_GROUP_SELF_QUERY_OK = 0
TOX_ERR_GROUP_SELF_QUERY_GROUP_NOT_FOUND = 1
Tox_Err_Group_Self_Query = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3880
# c-toxcore/toxcore/tox.h 3880
try:
    tox_err_group_self_query_to_string = _libraries['FIXME_STUB'].tox_err_group_self_query_to_string
    tox_err_group_self_query_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_self_query_to_string(value)
    tox_err_group_self_query_to_string.argtypes = [Tox_Err_Group_Self_Query]
except AttributeError:
    pass
tox_err_group_self_query_to_string.__doc__ = """LP_c_char tox_err_group_self_query_to_string(Tox_Err_Group_Self_Query value)
    c-toxcore/toxcore/tox.h:3880"""
# c-toxcore/toxcore/tox.h:3885
# Error codes for self name setting.
# Error codes for self name setting.

# values for enumeration 'Tox_Err_Group_Self_Name_Set'
Tox_Err_Group_Self_Name_Set__enumvalues = {
    0: 'TOX_ERR_GROUP_SELF_NAME_SET_OK',
    1: 'TOX_ERR_GROUP_SELF_NAME_SET_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_SELF_NAME_SET_TOO_LONG',
    3: 'TOX_ERR_GROUP_SELF_NAME_SET_INVALID',
    4: 'TOX_ERR_GROUP_SELF_NAME_SET_FAIL_SEND',
}
TOX_ERR_GROUP_SELF_NAME_SET_OK = 0
TOX_ERR_GROUP_SELF_NAME_SET_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_SELF_NAME_SET_TOO_LONG = 2
TOX_ERR_GROUP_SELF_NAME_SET_INVALID = 3
TOX_ERR_GROUP_SELF_NAME_SET_FAIL_SEND = 4
Tox_Err_Group_Self_Name_Set = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3914
# c-toxcore/toxcore/tox.h 3914
try:
    tox_err_group_self_name_set_to_string = _libraries['FIXME_STUB'].tox_err_group_self_name_set_to_string
    tox_err_group_self_name_set_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_self_name_set_to_string(value)
    tox_err_group_self_name_set_to_string.argtypes = [Tox_Err_Group_Self_Name_Set]
except AttributeError:
    pass
tox_err_group_self_name_set_to_string.__doc__ = """LP_c_char tox_err_group_self_name_set_to_string(Tox_Err_Group_Self_Name_Set value)
    c-toxcore/toxcore/tox.h:3914"""
# c-toxcore/toxcore/tox.h:3928
# Set the client's nickname for the group instance designated by the given group
# number.
# Set the client's nickname for the group instance designated by the given group
# number.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3885
# c-toxcore/toxcore/tox.h 3928
try:
    tox_group_self_set_name = _libraries['FIXME_STUB'].tox_group_self_set_name
    tox_group_self_set_name.restype = ctypes.c_bool
# tox_group_self_set_name(tox, group_number, name, length, error)
    tox_group_self_set_name.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Group_Self_Name_Set)]
except AttributeError:
    pass
tox_group_self_set_name.__doc__ = """c_bool tox_group_self_set_name(LP_struct_Tox tox, Tox_Group_Number group_number, array_c_ubyte name, size_t length, LP_Tox_Err_Group_Self_Name_Set error)
    c-toxcore/toxcore/tox.h:3928"""
# c-toxcore/toxcore/tox.h:3942
# Return the length of the client's current nickname for the group instance
# designated by group_number as passed to tox_group_self_set_name.
# Return the length of the client's current nickname for the group instance
# designated by group_number as passed to tox_group_self_set_name.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3866
# c-toxcore/toxcore/tox.h 3942
try:
    tox_group_self_get_name_size = _libraries['FIXME_STUB'].tox_group_self_get_name_size
    tox_group_self_get_name_size.restype = size_t
# tox_group_self_get_name_size(tox, group_number, error)
    tox_group_self_get_name_size.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_Self_Query)]
except AttributeError:
    pass
tox_group_self_get_name_size.__doc__ = """size_t tox_group_self_get_name_size(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_Self_Query error)
    c-toxcore/toxcore/tox.h:3942"""
# c-toxcore/toxcore/tox.h:3958
# Write the nickname set by tox_group_self_set_name to a byte array.
# Write the nickname set by tox_group_self_set_name to a byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3866
# c-toxcore/toxcore/tox.h 3958
try:
    tox_group_self_get_name = _libraries['FIXME_STUB'].tox_group_self_get_name
    tox_group_self_get_name.restype = ctypes.c_bool
# tox_group_self_get_name(tox, group_number, name, error)
    tox_group_self_get_name.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, ctypes.c_ubyte * 0, POINTER_T(Tox_Err_Group_Self_Query)]
except AttributeError:
    pass
tox_group_self_get_name.__doc__ = """c_bool tox_group_self_get_name(LP_struct_Tox tox, Tox_Group_Number group_number, array_c_ubyte name, LP_Tox_Err_Group_Self_Query error)
    c-toxcore/toxcore/tox.h:3958"""
# c-toxcore/toxcore/tox.h:3965
# Error codes for self status setting.
# Error codes for self status setting.

# values for enumeration 'Tox_Err_Group_Self_Status_Set'
Tox_Err_Group_Self_Status_Set__enumvalues = {
    0: 'TOX_ERR_GROUP_SELF_STATUS_SET_OK',
    1: 'TOX_ERR_GROUP_SELF_STATUS_SET_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_SELF_STATUS_SET_FAIL_SEND',
}
TOX_ERR_GROUP_SELF_STATUS_SET_OK = 0
TOX_ERR_GROUP_SELF_STATUS_SET_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_SELF_STATUS_SET_FAIL_SEND = 2
Tox_Err_Group_Self_Status_Set = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:3984
# c-toxcore/toxcore/tox.h 3984
try:
    tox_err_group_self_status_set_to_string = _libraries['FIXME_STUB'].tox_err_group_self_status_set_to_string
    tox_err_group_self_status_set_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_self_status_set_to_string(value)
    tox_err_group_self_status_set_to_string.argtypes = [Tox_Err_Group_Self_Status_Set]
except AttributeError:
    pass
tox_err_group_self_status_set_to_string.__doc__ = """LP_c_char tox_err_group_self_status_set_to_string(Tox_Err_Group_Self_Status_Set value)
    c-toxcore/toxcore/tox.h:3984"""
# c-toxcore/toxcore/tox.h:3992
# Set the client's status for the group instance. Status must be a
# Tox_User_Status.
# Set the client's status for the group instance. Status must be a
# Tox_User_Status.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3965
# c-toxcore/toxcore/tox.h 3992
try:
    tox_group_self_set_status = _libraries['FIXME_STUB'].tox_group_self_set_status
    tox_group_self_set_status.restype = ctypes.c_bool
# tox_group_self_set_status(tox, group_number, status, error)
    tox_group_self_set_status.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_User_Status, POINTER_T(Tox_Err_Group_Self_Status_Set)]
except AttributeError:
    pass
tox_group_self_set_status.__doc__ = """c_bool tox_group_self_set_status(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_User_Status status, LP_Tox_Err_Group_Self_Status_Set error)
    c-toxcore/toxcore/tox.h:3992"""
# c-toxcore/toxcore/tox.h:3999
# returns the client's status for the group instance on success. return value is
# unspecified on failure.
# returns the client's status for the group instance on success. return value is
# unspecified on failure.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3866
# c-toxcore/toxcore/tox.h 3999
try:
    tox_group_self_get_status = _libraries['FIXME_STUB'].tox_group_self_get_status
    tox_group_self_get_status.restype = Tox_User_Status
# tox_group_self_get_status(tox, group_number, error)
    tox_group_self_get_status.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_Self_Query)]
except AttributeError:
    pass
tox_group_self_get_status.__doc__ = """Tox_User_Status tox_group_self_get_status(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_Self_Query error)
    c-toxcore/toxcore/tox.h:3999"""
# c-toxcore/toxcore/tox.h:4005
# returns the client's role for the group instance on success. return value is
# unspecified on failure.
# returns the client's role for the group instance on success. return value is
# unspecified on failure.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3866
# c-toxcore/toxcore/tox.h 4005
try:
    tox_group_self_get_role = _libraries['FIXME_STUB'].tox_group_self_get_role
    tox_group_self_get_role.restype = Tox_Group_Role
# tox_group_self_get_role(tox, group_number, error)
    tox_group_self_get_role.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_Self_Query)]
except AttributeError:
    pass
tox_group_self_get_role.__doc__ = """Tox_Group_Role tox_group_self_get_role(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_Self_Query error)
    c-toxcore/toxcore/tox.h:4005"""
# c-toxcore/toxcore/tox.h:4011
# returns the client's peer id for the group instance on success. return value
# is unspecified on failure.
# returns the client's peer id for the group instance on success. return value
# is unspecified on failure.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3866
# c-toxcore/toxcore/tox.h 4011
try:
    tox_group_self_get_peer_id = _libraries['FIXME_STUB'].tox_group_self_get_peer_id
    tox_group_self_get_peer_id.restype = Tox_Group_Peer_Number
# tox_group_self_get_peer_id(tox, group_number, error)
    tox_group_self_get_peer_id.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_Self_Query)]
except AttributeError:
    pass
tox_group_self_get_peer_id.__doc__ = """Tox_Group_Peer_Number tox_group_self_get_peer_id(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_Self_Query error)
    c-toxcore/toxcore/tox.h:4011"""
# c-toxcore/toxcore/tox.h:4030
# Write the client's group public key designated by the given group number to a
# byte array.
# Write the client's group public key designated by the given group number to a
# byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:3866
# c-toxcore/toxcore/tox.h 4030
try:
    tox_group_self_get_public_key = _libraries['FIXME_STUB'].tox_group_self_get_public_key
    tox_group_self_get_public_key.restype = ctypes.c_bool
# tox_group_self_get_public_key(tox, group_number, public_key, error)
    tox_group_self_get_public_key.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, ctypes.c_ubyte * 32, POINTER_T(Tox_Err_Group_Self_Query)]
except AttributeError:
    pass
tox_group_self_get_public_key.__doc__ = """c_bool tox_group_self_get_public_key(LP_struct_Tox tox, Tox_Group_Number group_number, array_c_ubyte public_key, LP_Tox_Err_Group_Self_Query error)
    c-toxcore/toxcore/tox.h:4030"""
# c-toxcore/toxcore/tox.h:4042
# Error codes for peer info queries.
# Error codes for peer info queries.

# values for enumeration 'Tox_Err_Group_Peer_Query'
Tox_Err_Group_Peer_Query__enumvalues = {
    0: 'TOX_ERR_GROUP_PEER_QUERY_OK',
    1: 'TOX_ERR_GROUP_PEER_QUERY_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_PEER_QUERY_PEER_NOT_FOUND',
}
TOX_ERR_GROUP_PEER_QUERY_OK = 0
TOX_ERR_GROUP_PEER_QUERY_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_PEER_QUERY_PEER_NOT_FOUND = 2
Tox_Err_Group_Peer_Query = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:4061
# c-toxcore/toxcore/tox.h 4061
try:
    tox_err_group_peer_query_to_string = _libraries['FIXME_STUB'].tox_err_group_peer_query_to_string
    tox_err_group_peer_query_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_peer_query_to_string(value)
    tox_err_group_peer_query_to_string.argtypes = [Tox_Err_Group_Peer_Query]
except AttributeError:
    pass
tox_err_group_peer_query_to_string.__doc__ = """LP_c_char tox_err_group_peer_query_to_string(Tox_Err_Group_Peer_Query value)
    c-toxcore/toxcore/tox.h:4061"""
# c-toxcore/toxcore/tox.h:4073
# Return the length of the peer's name. If the group number or ID is invalid,
# the return value is unspecified.
# Return the length of the peer's name. If the group number or ID is invalid,
# the return value is unspecified.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4042
# c-toxcore/toxcore/tox.h 4073
try:
    tox_group_peer_get_name_size = _libraries['FIXME_STUB'].tox_group_peer_get_name_size
    tox_group_peer_get_name_size.restype = size_t
# tox_group_peer_get_name_size(tox, group_number, peer_id, error)
    tox_group_peer_get_name_size.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Peer_Number, POINTER_T(Tox_Err_Group_Peer_Query)]
except AttributeError:
    pass
tox_group_peer_get_name_size.__doc__ = """size_t tox_group_peer_get_name_size(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Peer_Number peer_id, LP_Tox_Err_Group_Peer_Query error)
    c-toxcore/toxcore/tox.h:4073"""
# c-toxcore/toxcore/tox.h:4092
# Write the name of the peer designated by the given ID to a byte array.
# Write the name of the peer designated by the given ID to a byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4042
# c-toxcore/toxcore/tox.h 4092
try:
    tox_group_peer_get_name = _libraries['FIXME_STUB'].tox_group_peer_get_name
    tox_group_peer_get_name.restype = ctypes.c_bool
# tox_group_peer_get_name(tox, group_number, peer_id, name, error)
    tox_group_peer_get_name.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Peer_Number, ctypes.c_ubyte * 0, POINTER_T(Tox_Err_Group_Peer_Query)]
except AttributeError:
    pass
tox_group_peer_get_name.__doc__ = """c_bool tox_group_peer_get_name(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Peer_Number peer_id, array_c_ubyte name, LP_Tox_Err_Group_Peer_Query error)
    c-toxcore/toxcore/tox.h:4092"""
# c-toxcore/toxcore/tox.h:4106
# Return the peer's user status (away/busy/...). If the ID or group number is
# invalid, the return value is unspecified.
# Return the peer's user status (away/busy/...). If the ID or group number is
# invalid, the return value is unspecified.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4042
# c-toxcore/toxcore/tox.h 4106
try:
    tox_group_peer_get_status = _libraries['FIXME_STUB'].tox_group_peer_get_status
    tox_group_peer_get_status.restype = Tox_User_Status
# tox_group_peer_get_status(tox, group_number, peer_id, error)
    tox_group_peer_get_status.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Peer_Number, POINTER_T(Tox_Err_Group_Peer_Query)]
except AttributeError:
    pass
tox_group_peer_get_status.__doc__ = """Tox_User_Status tox_group_peer_get_status(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Peer_Number peer_id, LP_Tox_Err_Group_Peer_Query error)
    c-toxcore/toxcore/tox.h:4106"""
# c-toxcore/toxcore/tox.h:4119
# Return the peer's role (user/moderator/founder...). If the ID or group number
# is invalid, the return value is unspecified.
# Return the peer's role (user/moderator/founder...). If the ID or group number
# is invalid, the return value is unspecified.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4042
# c-toxcore/toxcore/tox.h 4119
try:
    tox_group_peer_get_role = _libraries['FIXME_STUB'].tox_group_peer_get_role
    tox_group_peer_get_role.restype = Tox_Group_Role
# tox_group_peer_get_role(tox, group_number, peer_id, error)
    tox_group_peer_get_role.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Peer_Number, POINTER_T(Tox_Err_Group_Peer_Query)]
except AttributeError:
    pass
tox_group_peer_get_role.__doc__ = """Tox_Group_Role tox_group_peer_get_role(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Peer_Number peer_id, LP_Tox_Err_Group_Peer_Query error)
    c-toxcore/toxcore/tox.h:4119"""
# c-toxcore/toxcore/tox.h:4132
# Return the type of connection we have established with a peer.
# Return the type of connection we have established with a peer.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4042
# c-toxcore/toxcore/tox.h 4132
try:
    tox_group_peer_get_connection_status = _libraries['FIXME_STUB'].tox_group_peer_get_connection_status
    tox_group_peer_get_connection_status.restype = Tox_Connection
# tox_group_peer_get_connection_status(tox, group_number, peer_id, error)
    tox_group_peer_get_connection_status.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Peer_Number, POINTER_T(Tox_Err_Group_Peer_Query)]
except AttributeError:
    pass
tox_group_peer_get_connection_status.__doc__ = """Tox_Connection tox_group_peer_get_connection_status(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Peer_Number peer_id, LP_Tox_Err_Group_Peer_Query error)
    c-toxcore/toxcore/tox.h:4132"""
# c-toxcore/toxcore/tox.h:4153
# Write the group public key with the designated peer_id for the designated
# group number to public_key.
# Write the group public key with the designated peer_id for the designated
# group number to public_key.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4042
# c-toxcore/toxcore/tox.h 4153
try:
    tox_group_peer_get_public_key = _libraries['FIXME_STUB'].tox_group_peer_get_public_key
    tox_group_peer_get_public_key.restype = ctypes.c_bool
# tox_group_peer_get_public_key(tox, group_number, peer_id, public_key, error)
    tox_group_peer_get_public_key.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Peer_Number, ctypes.c_ubyte * 32, POINTER_T(Tox_Err_Group_Peer_Query)]
except AttributeError:
    pass
tox_group_peer_get_public_key.__doc__ = """c_bool tox_group_peer_get_public_key(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Peer_Number peer_id, array_c_ubyte public_key, LP_Tox_Err_Group_Peer_Query error)
    c-toxcore/toxcore/tox.h:4153"""
# c-toxcore/toxcore/tox.h:4164
# c-toxcore/toxcore/tox.h:115
tox_group_peer_name_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:4173
# Set the callback for the `group_peer_name` event. Pass NULL to unset.
# Set the callback for the `group_peer_name` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 4173
try:
    tox_callback_group_peer_name = _libraries['FIXME_STUB'].tox_callback_group_peer_name
    tox_callback_group_peer_name.restype = None
# tox_callback_group_peer_name(tox, callback)
    tox_callback_group_peer_name.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_peer_name.__doc__ = """None tox_callback_group_peer_name(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:4173"""
# c-toxcore/toxcore/tox.h:4181
# c-toxcore/toxcore/tox.h:115
tox_group_peer_status_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, Tox_User_Status, POINTER_T(None))
# c-toxcore/toxcore/tox.h:4189
# Set the callback for the `group_peer_status` event. Pass NULL to unset.
# Set the callback for the `group_peer_status` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 4189
try:
    tox_callback_group_peer_status = _libraries['FIXME_STUB'].tox_callback_group_peer_status
    tox_callback_group_peer_status.restype = None
# tox_callback_group_peer_status(tox, callback)
    tox_callback_group_peer_status.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, Tox_User_Status, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_peer_status.__doc__ = """None tox_callback_group_peer_status(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:4189"""
# c-toxcore/toxcore/tox.h:4200
# General error codes for group state get and size functions.
# General error codes for group state get and size functions.

# values for enumeration 'Tox_Err_Group_State_Query'
Tox_Err_Group_State_Query__enumvalues = {
    0: 'TOX_ERR_GROUP_STATE_QUERY_OK',
    1: 'TOX_ERR_GROUP_STATE_QUERY_GROUP_NOT_FOUND',
}
TOX_ERR_GROUP_STATE_QUERY_OK = 0
TOX_ERR_GROUP_STATE_QUERY_GROUP_NOT_FOUND = 1
Tox_Err_Group_State_Query = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:4214
# c-toxcore/toxcore/tox.h 4214
try:
    tox_err_group_state_query_to_string = _libraries['FIXME_STUB'].tox_err_group_state_query_to_string
    tox_err_group_state_query_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_state_query_to_string(value)
    tox_err_group_state_query_to_string.argtypes = [Tox_Err_Group_State_Query]
except AttributeError:
    pass
tox_err_group_state_query_to_string.__doc__ = """LP_c_char tox_err_group_state_query_to_string(Tox_Err_Group_State_Query value)
    c-toxcore/toxcore/tox.h:4214"""
# c-toxcore/toxcore/tox.h:4219
# Error codes for group topic setting.
# Error codes for group topic setting.

# values for enumeration 'Tox_Err_Group_Topic_Set'
Tox_Err_Group_Topic_Set__enumvalues = {
    0: 'TOX_ERR_GROUP_TOPIC_SET_OK',
    1: 'TOX_ERR_GROUP_TOPIC_SET_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_TOPIC_SET_TOO_LONG',
    3: 'TOX_ERR_GROUP_TOPIC_SET_PERMISSIONS',
    4: 'TOX_ERR_GROUP_TOPIC_SET_FAIL_CREATE',
    5: 'TOX_ERR_GROUP_TOPIC_SET_FAIL_SEND',
    6: 'TOX_ERR_GROUP_TOPIC_SET_DISCONNECTED',
}
TOX_ERR_GROUP_TOPIC_SET_OK = 0
TOX_ERR_GROUP_TOPIC_SET_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_TOPIC_SET_TOO_LONG = 2
TOX_ERR_GROUP_TOPIC_SET_PERMISSIONS = 3
TOX_ERR_GROUP_TOPIC_SET_FAIL_CREATE = 4
TOX_ERR_GROUP_TOPIC_SET_FAIL_SEND = 5
TOX_ERR_GROUP_TOPIC_SET_DISCONNECTED = 6
Tox_Err_Group_Topic_Set = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:4259
# c-toxcore/toxcore/tox.h 4259
try:
    tox_err_group_topic_set_to_string = _libraries['FIXME_STUB'].tox_err_group_topic_set_to_string
    tox_err_group_topic_set_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_topic_set_to_string(value)
    tox_err_group_topic_set_to_string.argtypes = [Tox_Err_Group_Topic_Set]
except AttributeError:
    pass
tox_err_group_topic_set_to_string.__doc__ = """LP_c_char tox_err_group_topic_set_to_string(Tox_Err_Group_Topic_Set value)
    c-toxcore/toxcore/tox.h:4259"""
# c-toxcore/toxcore/tox.h:4269
# Set the group topic and broadcast it to the rest of the group.
# Set the group topic and broadcast it to the rest of the group.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4219
# c-toxcore/toxcore/tox.h 4269
try:
    tox_group_set_topic = _libraries['FIXME_STUB'].tox_group_set_topic
    tox_group_set_topic.restype = ctypes.c_bool
# tox_group_set_topic(tox, group_number, topic, length, error)
    tox_group_set_topic.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Group_Topic_Set)]
except AttributeError:
    pass
tox_group_set_topic.__doc__ = """c_bool tox_group_set_topic(LP_struct_Tox tox, Tox_Group_Number group_number, array_c_ubyte topic, size_t length, LP_Tox_Err_Group_Topic_Set error)
    c-toxcore/toxcore/tox.h:4269"""
# c-toxcore/toxcore/tox.h:4281
# Return the length of the group topic. If the group number is invalid, the
# return value is unspecified.
# Return the length of the group topic. If the group number is invalid, the
# return value is unspecified.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4200
# c-toxcore/toxcore/tox.h 4281
try:
    tox_group_get_topic_size = _libraries['FIXME_STUB'].tox_group_get_topic_size
    tox_group_get_topic_size.restype = size_t
# tox_group_get_topic_size(tox, group_number, error)
    tox_group_get_topic_size.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_State_Query)]
except AttributeError:
    pass
tox_group_get_topic_size.__doc__ = """size_t tox_group_get_topic_size(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_State_Query error)
    c-toxcore/toxcore/tox.h:4281"""
# c-toxcore/toxcore/tox.h:4297
# Write the topic designated by the given group number to a byte array.
# Write the topic designated by the given group number to a byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4200
# c-toxcore/toxcore/tox.h 4297
try:
    tox_group_get_topic = _libraries['FIXME_STUB'].tox_group_get_topic
    tox_group_get_topic.restype = ctypes.c_bool
# tox_group_get_topic(tox, group_number, topic, error)
    tox_group_get_topic.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, ctypes.c_ubyte * 0, POINTER_T(Tox_Err_Group_State_Query)]
except AttributeError:
    pass
tox_group_get_topic.__doc__ = """c_bool tox_group_get_topic(LP_struct_Tox tox, Tox_Group_Number group_number, array_c_ubyte topic, LP_Tox_Err_Group_State_Query error)
    c-toxcore/toxcore/tox.h:4297"""
# c-toxcore/toxcore/tox.h:4309
# c-toxcore/toxcore/tox.h:115
tox_group_topic_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:4319
# Set the callback for the `group_topic` event. Pass NULL to unset.
# Set the callback for the `group_topic` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 4319
try:
    tox_callback_group_topic = _libraries['FIXME_STUB'].tox_callback_group_topic
    tox_callback_group_topic.restype = None
# tox_callback_group_topic(tox, callback)
    tox_callback_group_topic.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_topic.__doc__ = """None tox_callback_group_topic(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:4319"""
# c-toxcore/toxcore/tox.h:4325
# Return the length of the group name. If the group number is invalid, the
# return value is unspecified.
# Return the length of the group name. If the group number is invalid, the
# return value is unspecified.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4200
# c-toxcore/toxcore/tox.h 4325
try:
    tox_group_get_name_size = _libraries['FIXME_STUB'].tox_group_get_name_size
    tox_group_get_name_size.restype = size_t
# tox_group_get_name_size(tox, group_number, error)
    tox_group_get_name_size.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_State_Query)]
except AttributeError:
    pass
tox_group_get_name_size.__doc__ = """size_t tox_group_get_name_size(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_State_Query error)
    c-toxcore/toxcore/tox.h:4325"""
# c-toxcore/toxcore/tox.h:4339
# Write the name of the group designated by the given group number to a byte
# array.
# Write the name of the group designated by the given group number to a byte
# array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4200
# c-toxcore/toxcore/tox.h 4339
try:
    tox_group_get_name = _libraries['FIXME_STUB'].tox_group_get_name
    tox_group_get_name.restype = ctypes.c_bool
# tox_group_get_name(tox, group_number, name, error)
    tox_group_get_name.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, ctypes.c_ubyte * 0, POINTER_T(Tox_Err_Group_State_Query)]
except AttributeError:
    pass
tox_group_get_name.__doc__ = """c_bool tox_group_get_name(LP_struct_Tox tox, Tox_Group_Number group_number, array_c_ubyte name, LP_Tox_Err_Group_State_Query error)
    c-toxcore/toxcore/tox.h:4339"""
# c-toxcore/toxcore/tox.h:4353
# Write the Chat ID designated by the given group number to a byte array.
# Write the Chat ID designated by the given group number to a byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4200
# c-toxcore/toxcore/tox.h 4353
try:
    tox_group_get_chat_id = _libraries['FIXME_STUB'].tox_group_get_chat_id
    tox_group_get_chat_id.restype = ctypes.c_bool
# tox_group_get_chat_id(tox, group_number, chat_id, error)
    tox_group_get_chat_id.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, ctypes.c_ubyte * 32, POINTER_T(Tox_Err_Group_State_Query)]
except AttributeError:
    pass
tox_group_get_chat_id.__doc__ = """c_bool tox_group_get_chat_id(LP_struct_Tox tox, Tox_Group_Number group_number, array_c_ubyte chat_id, LP_Tox_Err_Group_State_Query error)
    c-toxcore/toxcore/tox.h:4353"""
# c-toxcore/toxcore/tox.h:4360
# Return the number of groups in the Tox chats array.
# Return the number of groups in the Tox chats array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 4360
try:
    tox_group_get_number_groups = _libraries['FIXME_STUB'].tox_group_get_number_groups
    tox_group_get_number_groups.restype = uint32_t
# tox_group_get_number_groups(tox)
    tox_group_get_number_groups.argtypes = [POINTER_T(struct_Tox)]
except AttributeError:
    pass
tox_group_get_number_groups.__doc__ = """uint32_t tox_group_get_number_groups(LP_struct_Tox tox)
    c-toxcore/toxcore/tox.h:4360"""
# c-toxcore/toxcore/tox.h:4372
# Return the privacy state of the group designated by the given group number. If
# group number is invalid, the return value is unspecified.
# Return the privacy state of the group designated by the given group number. If
# group number is invalid, the return value is unspecified.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4200
# c-toxcore/toxcore/tox.h 4372
try:
    tox_group_get_privacy_state = _libraries['FIXME_STUB'].tox_group_get_privacy_state
    tox_group_get_privacy_state.restype = Tox_Group_Privacy_State
# tox_group_get_privacy_state(tox, group_number, error)
    tox_group_get_privacy_state.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_State_Query)]
except AttributeError:
    pass
tox_group_get_privacy_state.__doc__ = """Tox_Group_Privacy_State tox_group_get_privacy_state(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_State_Query error)
    c-toxcore/toxcore/tox.h:4372"""
# c-toxcore/toxcore/tox.h:4380
# c-toxcore/toxcore/tox.h:115
tox_group_privacy_state_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Group_Privacy_State, POINTER_T(None))
# c-toxcore/toxcore/tox.h:4388
# Set the callback for the `group_privacy_state` event. Pass NULL to unset.
# Set the callback for the `group_privacy_state` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 4388
try:
    tox_callback_group_privacy_state = _libraries['FIXME_STUB'].tox_callback_group_privacy_state
    tox_callback_group_privacy_state.restype = None
# tox_callback_group_privacy_state(tox, callback)
    tox_callback_group_privacy_state.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Group_Privacy_State, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_privacy_state.__doc__ = """None tox_callback_group_privacy_state(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:4388"""
# c-toxcore/toxcore/tox.h:4400
# Return the voice state of the group designated by the given group number. If
# group number is invalid, the return value is unspecified.
# Return the voice state of the group designated by the given group number. If
# group number is invalid, the return value is unspecified.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4200
# c-toxcore/toxcore/tox.h 4400
try:
    tox_group_get_voice_state = _libraries['FIXME_STUB'].tox_group_get_voice_state
    tox_group_get_voice_state.restype = Tox_Group_Voice_State
# tox_group_get_voice_state(tox, group_number, error)
    tox_group_get_voice_state.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_State_Query)]
except AttributeError:
    pass
tox_group_get_voice_state.__doc__ = """Tox_Group_Voice_State tox_group_get_voice_state(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_State_Query error)
    c-toxcore/toxcore/tox.h:4400"""
# c-toxcore/toxcore/tox.h:4408
# c-toxcore/toxcore/tox.h:115
tox_group_voice_state_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Group_Voice_State, POINTER_T(None))
# c-toxcore/toxcore/tox.h:4416
# Set the callback for the `group_privacy_state` event. Pass NULL to unset.
# Set the callback for the `group_privacy_state` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 4416
try:
    tox_callback_group_voice_state = _libraries['FIXME_STUB'].tox_callback_group_voice_state
    tox_callback_group_voice_state.restype = None
# tox_callback_group_voice_state(tox, callback)
    tox_callback_group_voice_state.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Group_Voice_State, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_voice_state.__doc__ = """None tox_callback_group_voice_state(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:4416"""
# c-toxcore/toxcore/tox.h:4429
# Return the topic lock status of the group designated by the given group
# number. If group number is invalid, the return value is unspecified.
# Return the topic lock status of the group designated by the given group
# number. If group number is invalid, the return value is unspecified.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4200
# c-toxcore/toxcore/tox.h 4429
try:
    tox_group_get_topic_lock = _libraries['FIXME_STUB'].tox_group_get_topic_lock
    tox_group_get_topic_lock.restype = Tox_Group_Topic_Lock
# tox_group_get_topic_lock(tox, group_number, error)
    tox_group_get_topic_lock.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_State_Query)]
except AttributeError:
    pass
tox_group_get_topic_lock.__doc__ = """Tox_Group_Topic_Lock tox_group_get_topic_lock(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_State_Query error)
    c-toxcore/toxcore/tox.h:4429"""
# c-toxcore/toxcore/tox.h:4437
# c-toxcore/toxcore/tox.h:115
tox_group_topic_lock_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Group_Topic_Lock, POINTER_T(None))
# c-toxcore/toxcore/tox.h:4444
# Set the callback for the `group_topic_lock` event. Pass NULL to unset.
# Set the callback for the `group_topic_lock` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 4444
try:
    tox_callback_group_topic_lock = _libraries['FIXME_STUB'].tox_callback_group_topic_lock
    tox_callback_group_topic_lock.restype = None
# tox_callback_group_topic_lock(tox, callback)
    tox_callback_group_topic_lock.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Group_Topic_Lock, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_topic_lock.__doc__ = """None tox_callback_group_topic_lock(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:4444"""
# c-toxcore/toxcore/tox.h:4457
# Return the maximum number of peers allowed for the group designated by the
# given group number. If the group number is invalid, the return value is
# unspecified.
# Return the maximum number of peers allowed for the group designated by the
# given group number. If the group number is invalid, the return value is
# unspecified.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4200
# c-toxcore/toxcore/tox.h 4457
try:
    tox_group_get_peer_limit = _libraries['FIXME_STUB'].tox_group_get_peer_limit
    tox_group_get_peer_limit.restype = uint16_t
# tox_group_get_peer_limit(tox, group_number, error)
    tox_group_get_peer_limit.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_State_Query)]
except AttributeError:
    pass
tox_group_get_peer_limit.__doc__ = """uint16_t tox_group_get_peer_limit(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_State_Query error)
    c-toxcore/toxcore/tox.h:4457"""
# c-toxcore/toxcore/tox.h:4464
# c-toxcore/toxcore/tox.h:115
tox_group_peer_limit_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(None))
# c-toxcore/toxcore/tox.h:4472
# Set the callback for the `group_peer_limit` event. Pass NULL to unset.
# Set the callback for the `group_peer_limit` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 4472
try:
    tox_callback_group_peer_limit = _libraries['FIXME_STUB'].tox_callback_group_peer_limit
    tox_callback_group_peer_limit.restype = None
# tox_callback_group_peer_limit(tox, callback)
    tox_callback_group_peer_limit.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_peer_limit.__doc__ = """None tox_callback_group_peer_limit(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:4472"""
# c-toxcore/toxcore/tox.h:4478
# Return the length of the group password. If the group number is invalid, the
# return value is unspecified.
# Return the length of the group password. If the group number is invalid, the
# return value is unspecified.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4200
# c-toxcore/toxcore/tox.h 4478
try:
    tox_group_get_password_size = _libraries['FIXME_STUB'].tox_group_get_password_size
    tox_group_get_password_size.restype = size_t
# tox_group_get_password_size(tox, group_number, error)
    tox_group_get_password_size.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, POINTER_T(Tox_Err_Group_State_Query)]
except AttributeError:
    pass
tox_group_get_password_size.__doc__ = """size_t tox_group_get_password_size(LP_struct_Tox tox, Tox_Group_Number group_number, LP_Tox_Err_Group_State_Query error)
    c-toxcore/toxcore/tox.h:4478"""
# c-toxcore/toxcore/tox.h:4498
# Write the password for the group designated by the given group number to a
# byte array.
# Write the password for the group designated by the given group number to a
# byte array.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4200
# c-toxcore/toxcore/tox.h 4498
try:
    tox_group_get_password = _libraries['FIXME_STUB'].tox_group_get_password
    tox_group_get_password.restype = ctypes.c_bool
# tox_group_get_password(tox, group_number, password, error)
    tox_group_get_password.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, ctypes.c_ubyte * 0, POINTER_T(Tox_Err_Group_State_Query)]
except AttributeError:
    pass
tox_group_get_password.__doc__ = """c_bool tox_group_get_password(LP_struct_Tox tox, Tox_Group_Number group_number, array_c_ubyte password, LP_Tox_Err_Group_State_Query error)
    c-toxcore/toxcore/tox.h:4498"""
# c-toxcore/toxcore/tox.h:4508
# c-toxcore/toxcore/tox.h:115
tox_group_password_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:4518
# Set the callback for the `group_password` event. Pass NULL to unset.
# Set the callback for the `group_password` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 4518
try:
    tox_callback_group_password = _libraries['FIXME_STUB'].tox_callback_group_password
    tox_callback_group_password.restype = None
# tox_callback_group_password(tox, callback)
    tox_callback_group_password.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_password.__doc__ = """None tox_callback_group_password(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:4518"""
# c-toxcore/toxcore/tox.h:4526
# *****************************************************************************
# *****************************************************************************

# values for enumeration 'Tox_Err_Group_Send_Message'
Tox_Err_Group_Send_Message__enumvalues = {
    0: 'TOX_ERR_GROUP_SEND_MESSAGE_OK',
    1: 'TOX_ERR_GROUP_SEND_MESSAGE_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_SEND_MESSAGE_TOO_LONG',
    3: 'TOX_ERR_GROUP_SEND_MESSAGE_EMPTY',
    4: 'TOX_ERR_GROUP_SEND_MESSAGE_BAD_TYPE',
    5: 'TOX_ERR_GROUP_SEND_MESSAGE_PERMISSIONS',
    6: 'TOX_ERR_GROUP_SEND_MESSAGE_FAIL_SEND',
    7: 'TOX_ERR_GROUP_SEND_MESSAGE_DISCONNECTED',
}
TOX_ERR_GROUP_SEND_MESSAGE_OK = 0
TOX_ERR_GROUP_SEND_MESSAGE_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_SEND_MESSAGE_TOO_LONG = 2
TOX_ERR_GROUP_SEND_MESSAGE_EMPTY = 3
TOX_ERR_GROUP_SEND_MESSAGE_BAD_TYPE = 4
TOX_ERR_GROUP_SEND_MESSAGE_PERMISSIONS = 5
TOX_ERR_GROUP_SEND_MESSAGE_FAIL_SEND = 6
TOX_ERR_GROUP_SEND_MESSAGE_DISCONNECTED = 7
Tox_Err_Group_Send_Message = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:4570
# c-toxcore/toxcore/tox.h 4570
try:
    tox_err_group_send_message_to_string = _libraries['FIXME_STUB'].tox_err_group_send_message_to_string
    tox_err_group_send_message_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_send_message_to_string(value)
    tox_err_group_send_message_to_string.argtypes = [Tox_Err_Group_Send_Message]
except AttributeError:
    pass
tox_err_group_send_message_to_string.__doc__ = """LP_c_char tox_err_group_send_message_to_string(Tox_Err_Group_Send_Message value)
    c-toxcore/toxcore/tox.h:4570"""
# c-toxcore/toxcore/tox.h:4592
# Send a text chat message to the group.
# Send a text chat message to the group.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4526
# c-toxcore/toxcore/tox.h 4592
try:
    tox_group_send_message = _libraries['FIXME_STUB'].tox_group_send_message
    tox_group_send_message.restype = Tox_Group_Message_Id
# tox_group_send_message(tox, group_number, message_type, message, length, error)
    tox_group_send_message.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Message_Type, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Group_Send_Message)]
except AttributeError:
    pass
tox_group_send_message.__doc__ = """Tox_Group_Message_Id tox_group_send_message(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Message_Type message_type, array_c_ubyte message, size_t length, LP_Tox_Err_Group_Send_Message error)
    c-toxcore/toxcore/tox.h:4592"""
# c-toxcore/toxcore/tox.h:4597

# values for enumeration 'Tox_Err_Group_Send_Private_Message'
Tox_Err_Group_Send_Private_Message__enumvalues = {
    0: 'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_OK',
    1: 'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_PEER_NOT_FOUND',
    3: 'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_TOO_LONG',
    4: 'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_EMPTY',
    5: 'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_BAD_TYPE',
    6: 'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_PERMISSIONS',
    7: 'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_FAIL_SEND',
    8: 'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_DISCONNECTED',
}
TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_OK = 0
TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_PEER_NOT_FOUND = 2
TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_TOO_LONG = 3
TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_EMPTY = 4
TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_BAD_TYPE = 5
TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_PERMISSIONS = 6
TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_FAIL_SEND = 7
TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_DISCONNECTED = 8
Tox_Err_Group_Send_Private_Message = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:4646
# c-toxcore/toxcore/tox.h 4646
try:
    tox_err_group_send_private_message_to_string = _libraries['FIXME_STUB'].tox_err_group_send_private_message_to_string
    tox_err_group_send_private_message_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_send_private_message_to_string(value)
    tox_err_group_send_private_message_to_string.argtypes = [Tox_Err_Group_Send_Private_Message]
except AttributeError:
    pass
tox_err_group_send_private_message_to_string.__doc__ = """LP_c_char tox_err_group_send_private_message_to_string(Tox_Err_Group_Send_Private_Message value)
    c-toxcore/toxcore/tox.h:4646"""
# c-toxcore/toxcore/tox.h:4668
# Send a text chat message to the specified peer in the specified group.
# Send a text chat message to the specified peer in the specified group.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4597
# c-toxcore/toxcore/tox.h 4668
try:
    tox_group_send_private_message = _libraries['FIXME_STUB'].tox_group_send_private_message
    tox_group_send_private_message.restype = Tox_Group_Message_Id
# tox_group_send_private_message(tox, group_number, peer_id, message_type, message, length, error)
    tox_group_send_private_message.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Peer_Number, Tox_Message_Type, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Group_Send_Private_Message)]
except AttributeError:
    pass
tox_group_send_private_message.__doc__ = """Tox_Group_Message_Id tox_group_send_private_message(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Peer_Number peer_id, Tox_Message_Type message_type, array_c_ubyte message, size_t length, LP_Tox_Err_Group_Send_Private_Message error)
    c-toxcore/toxcore/tox.h:4668"""
# c-toxcore/toxcore/tox.h:4673

# values for enumeration 'Tox_Err_Group_Send_Custom_Packet'
Tox_Err_Group_Send_Custom_Packet__enumvalues = {
    0: 'TOX_ERR_GROUP_SEND_CUSTOM_PACKET_OK',
    1: 'TOX_ERR_GROUP_SEND_CUSTOM_PACKET_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_SEND_CUSTOM_PACKET_TOO_LONG',
    3: 'TOX_ERR_GROUP_SEND_CUSTOM_PACKET_EMPTY',
    4: 'TOX_ERR_GROUP_SEND_CUSTOM_PACKET_DISCONNECTED',
    5: 'TOX_ERR_GROUP_SEND_CUSTOM_PACKET_FAIL_SEND',
}
TOX_ERR_GROUP_SEND_CUSTOM_PACKET_OK = 0
TOX_ERR_GROUP_SEND_CUSTOM_PACKET_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_SEND_CUSTOM_PACKET_TOO_LONG = 2
TOX_ERR_GROUP_SEND_CUSTOM_PACKET_EMPTY = 3
TOX_ERR_GROUP_SEND_CUSTOM_PACKET_DISCONNECTED = 4
TOX_ERR_GROUP_SEND_CUSTOM_PACKET_FAIL_SEND = 5
Tox_Err_Group_Send_Custom_Packet = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:4710
# c-toxcore/toxcore/tox.h 4710
try:
    tox_err_group_send_custom_packet_to_string = _libraries['FIXME_STUB'].tox_err_group_send_custom_packet_to_string
    tox_err_group_send_custom_packet_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_send_custom_packet_to_string(value)
    tox_err_group_send_custom_packet_to_string.argtypes = [Tox_Err_Group_Send_Custom_Packet]
except AttributeError:
    pass
tox_err_group_send_custom_packet_to_string.__doc__ = """LP_c_char tox_err_group_send_custom_packet_to_string(Tox_Err_Group_Send_Custom_Packet value)
    c-toxcore/toxcore/tox.h:4710"""
# c-toxcore/toxcore/tox.h:4738
# Send a custom packet to the group.
# Send a custom packet to the group.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4673
# c-toxcore/toxcore/tox.h 4738
try:
    tox_group_send_custom_packet = _libraries['FIXME_STUB'].tox_group_send_custom_packet
    tox_group_send_custom_packet.restype = ctypes.c_bool
# tox_group_send_custom_packet(tox, group_number, lossless, data, length, error)
    tox_group_send_custom_packet.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, ctypes.c_bool, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Group_Send_Custom_Packet)]
except AttributeError:
    pass
tox_group_send_custom_packet.__doc__ = """c_bool tox_group_send_custom_packet(LP_struct_Tox tox, Tox_Group_Number group_number, c_bool lossless, array_c_ubyte data, size_t length, LP_Tox_Err_Group_Send_Custom_Packet error)
    c-toxcore/toxcore/tox.h:4738"""
# c-toxcore/toxcore/tox.h:4743

# values for enumeration 'Tox_Err_Group_Send_Custom_Private_Packet'
Tox_Err_Group_Send_Custom_Private_Packet__enumvalues = {
    0: 'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_OK',
    1: 'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_TOO_LONG',
    3: 'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_EMPTY',
    4: 'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_PEER_NOT_FOUND',
    5: 'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_FAIL_SEND',
    6: 'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_DISCONNECTED',
}
TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_OK = 0
TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_TOO_LONG = 2
TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_EMPTY = 3
TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_PEER_NOT_FOUND = 4
TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_FAIL_SEND = 5
TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_DISCONNECTED = 6
Tox_Err_Group_Send_Custom_Private_Packet = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:4784
# c-toxcore/toxcore/tox.h 4784
try:
    tox_err_group_send_custom_private_packet_to_string = _libraries['FIXME_STUB'].tox_err_group_send_custom_private_packet_to_string
    tox_err_group_send_custom_private_packet_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_send_custom_private_packet_to_string(value)
    tox_err_group_send_custom_private_packet_to_string.argtypes = [Tox_Err_Group_Send_Custom_Private_Packet]
except AttributeError:
    pass
tox_err_group_send_custom_private_packet_to_string.__doc__ = """LP_c_char tox_err_group_send_custom_private_packet_to_string(Tox_Err_Group_Send_Custom_Private_Packet value)
    c-toxcore/toxcore/tox.h:4784"""
# c-toxcore/toxcore/tox.h:4813
# Send a custom private packet to a designated peer in the group.
# Send a custom private packet to a designated peer in the group.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4743
# c-toxcore/toxcore/tox.h 4813
try:
    tox_group_send_custom_private_packet = _libraries['FIXME_STUB'].tox_group_send_custom_private_packet
    tox_group_send_custom_private_packet.restype = ctypes.c_bool
# tox_group_send_custom_private_packet(tox, group_number, peer_id, lossless, data, length, error)
    tox_group_send_custom_private_packet.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Peer_Number, ctypes.c_bool, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Group_Send_Custom_Private_Packet)]
except AttributeError:
    pass
tox_group_send_custom_private_packet.__doc__ = """c_bool tox_group_send_custom_private_packet(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Peer_Number peer_id, c_bool lossless, array_c_ubyte data, size_t length, LP_Tox_Err_Group_Send_Custom_Private_Packet error)
    c-toxcore/toxcore/tox.h:4813"""
# c-toxcore/toxcore/tox.h:4833
# c-toxcore/toxcore/tox.h:115
tox_group_message_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, Tox_Message_Type, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, ctypes.c_uint32, POINTER_T(None))
# c-toxcore/toxcore/tox.h:4842
# Set the callback for the `group_message` event. Pass NULL to unset.
# Set the callback for the `group_message` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 4842
try:
    tox_callback_group_message = _libraries['FIXME_STUB'].tox_callback_group_message
    tox_callback_group_message.restype = None
# tox_callback_group_message(tox, callback)
    tox_callback_group_message.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, Tox_Message_Type, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, ctypes.c_uint32, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_message.__doc__ = """None tox_callback_group_message(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:4842"""
# c-toxcore/toxcore/tox.h:4854
# c-toxcore/toxcore/tox.h:115
tox_group_private_message_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, Tox_Message_Type, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, ctypes.c_uint32, POINTER_T(None))
# c-toxcore/toxcore/tox.h:4863
# Set the callback for the `group_private_message` event. Pass NULL to unset.
# Set the callback for the `group_private_message` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 4863
try:
    tox_callback_group_private_message = _libraries['FIXME_STUB'].tox_callback_group_private_message
    tox_callback_group_private_message.restype = None
# tox_callback_group_private_message(tox, callback)
    tox_callback_group_private_message.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, Tox_Message_Type, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, ctypes.c_uint32, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_private_message.__doc__ = """None tox_callback_group_private_message(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:4863"""
# c-toxcore/toxcore/tox.h:4871
# c-toxcore/toxcore/tox.h:115
tox_group_custom_packet_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:4880
# Set the callback for the `group_custom_packet` event. Pass NULL to unset.
# Set the callback for the `group_custom_packet` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 4880
try:
    tox_callback_group_custom_packet = _libraries['FIXME_STUB'].tox_callback_group_custom_packet
    tox_callback_group_custom_packet.restype = None
# tox_callback_group_custom_packet(tox, callback)
    tox_callback_group_custom_packet.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_custom_packet.__doc__ = """None tox_callback_group_custom_packet(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:4880"""
# c-toxcore/toxcore/tox.h:4888
# c-toxcore/toxcore/tox.h:115
tox_group_custom_private_packet_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:4898
# Set the callback for the `group_custom_private_packet` event. Pass NULL to
# unset.
# Set the callback for the `group_custom_private_packet` event. Pass NULL to
# unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 4898
try:
    tox_callback_group_custom_private_packet = _libraries['FIXME_STUB'].tox_callback_group_custom_private_packet
    tox_callback_group_custom_private_packet.restype = None
# tox_callback_group_custom_private_packet(tox, callback)
    tox_callback_group_custom_private_packet.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_custom_private_packet.__doc__ = """None tox_callback_group_custom_private_packet(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:4898"""
# c-toxcore/toxcore/tox.h:4906
# *****************************************************************************
# *****************************************************************************

# values for enumeration 'Tox_Err_Group_Invite_Friend'
Tox_Err_Group_Invite_Friend__enumvalues = {
    0: 'TOX_ERR_GROUP_INVITE_FRIEND_OK',
    1: 'TOX_ERR_GROUP_INVITE_FRIEND_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_INVITE_FRIEND_FRIEND_NOT_FOUND',
    3: 'TOX_ERR_GROUP_INVITE_FRIEND_INVITE_FAIL',
    4: 'TOX_ERR_GROUP_INVITE_FRIEND_FAIL_SEND',
    5: 'TOX_ERR_GROUP_INVITE_FRIEND_DISCONNECTED',
}
TOX_ERR_GROUP_INVITE_FRIEND_OK = 0
TOX_ERR_GROUP_INVITE_FRIEND_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_INVITE_FRIEND_FRIEND_NOT_FOUND = 2
TOX_ERR_GROUP_INVITE_FRIEND_INVITE_FAIL = 3
TOX_ERR_GROUP_INVITE_FRIEND_FAIL_SEND = 4
TOX_ERR_GROUP_INVITE_FRIEND_DISCONNECTED = 5
Tox_Err_Group_Invite_Friend = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:4941
# c-toxcore/toxcore/tox.h 4941
try:
    tox_err_group_invite_friend_to_string = _libraries['FIXME_STUB'].tox_err_group_invite_friend_to_string
    tox_err_group_invite_friend_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_invite_friend_to_string(value)
    tox_err_group_invite_friend_to_string.argtypes = [Tox_Err_Group_Invite_Friend]
except AttributeError:
    pass
tox_err_group_invite_friend_to_string.__doc__ = """LP_c_char tox_err_group_invite_friend_to_string(Tox_Err_Group_Invite_Friend value)
    c-toxcore/toxcore/tox.h:4941"""
# c-toxcore/toxcore/tox.h:4956
# Invite a friend to a group.
# Invite a friend to a group.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4906
# c-toxcore/toxcore/tox.h 4956
try:
    tox_group_invite_friend = _libraries['FIXME_STUB'].tox_group_invite_friend
    tox_group_invite_friend.restype = ctypes.c_bool
# tox_group_invite_friend(tox, group_number, friend_number, error)
    tox_group_invite_friend.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Friend_Number, POINTER_T(Tox_Err_Group_Invite_Friend)]
except AttributeError:
    pass
tox_group_invite_friend.__doc__ = """c_bool tox_group_invite_friend(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Friend_Number friend_number, LP_Tox_Err_Group_Invite_Friend error)
    c-toxcore/toxcore/tox.h:4956"""
# c-toxcore/toxcore/tox.h:4960

# values for enumeration 'Tox_Err_Group_Invite_Accept'
Tox_Err_Group_Invite_Accept__enumvalues = {
    0: 'TOX_ERR_GROUP_INVITE_ACCEPT_OK',
    1: 'TOX_ERR_GROUP_INVITE_ACCEPT_BAD_INVITE',
    2: 'TOX_ERR_GROUP_INVITE_ACCEPT_INIT_FAILED',
    3: 'TOX_ERR_GROUP_INVITE_ACCEPT_TOO_LONG',
    4: 'TOX_ERR_GROUP_INVITE_ACCEPT_EMPTY',
    5: 'TOX_ERR_GROUP_INVITE_ACCEPT_PASSWORD',
    6: 'TOX_ERR_GROUP_INVITE_ACCEPT_FRIEND_NOT_FOUND',
    7: 'TOX_ERR_GROUP_INVITE_ACCEPT_FAIL_SEND',
    8: 'TOX_ERR_GROUP_INVITE_ACCEPT_NULL',
}
TOX_ERR_GROUP_INVITE_ACCEPT_OK = 0
TOX_ERR_GROUP_INVITE_ACCEPT_BAD_INVITE = 1
TOX_ERR_GROUP_INVITE_ACCEPT_INIT_FAILED = 2
TOX_ERR_GROUP_INVITE_ACCEPT_TOO_LONG = 3
TOX_ERR_GROUP_INVITE_ACCEPT_EMPTY = 4
TOX_ERR_GROUP_INVITE_ACCEPT_PASSWORD = 5
TOX_ERR_GROUP_INVITE_ACCEPT_FRIEND_NOT_FOUND = 6
TOX_ERR_GROUP_INVITE_ACCEPT_FAIL_SEND = 7
TOX_ERR_GROUP_INVITE_ACCEPT_NULL = 8
Tox_Err_Group_Invite_Accept = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:5010
# c-toxcore/toxcore/tox.h 5010
try:
    tox_err_group_invite_accept_to_string = _libraries['FIXME_STUB'].tox_err_group_invite_accept_to_string
    tox_err_group_invite_accept_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_invite_accept_to_string(value)
    tox_err_group_invite_accept_to_string.argtypes = [Tox_Err_Group_Invite_Accept]
except AttributeError:
    pass
tox_err_group_invite_accept_to_string.__doc__ = """LP_c_char tox_err_group_invite_accept_to_string(Tox_Err_Group_Invite_Accept value)
    c-toxcore/toxcore/tox.h:5010"""
# c-toxcore/toxcore/tox.h:5029
# Accept an invite to a group chat that the client previously received from a
# friend. The invite is only valid while the inviter is present in the group.
# Accept an invite to a group chat that the client previously received from a
# friend. The invite is only valid while the inviter is present in the group.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:4960
# c-toxcore/toxcore/tox.h 5029
try:
    tox_group_invite_accept = _libraries['FIXME_STUB'].tox_group_invite_accept
    tox_group_invite_accept.restype = Tox_Group_Number
# tox_group_invite_accept(tox, friend_number, invite_data, length, name, name_length, password, password_length, error)
    tox_group_invite_accept.argtypes = [POINTER_T(struct_Tox), Tox_Friend_Number, ctypes.c_ubyte * 0, size_t, ctypes.c_ubyte * 0, size_t, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Group_Invite_Accept)]
except AttributeError:
    pass
tox_group_invite_accept.__doc__ = """Tox_Group_Number tox_group_invite_accept(LP_struct_Tox tox, Tox_Friend_Number friend_number, array_c_ubyte invite_data, size_t length, array_c_ubyte name, size_t name_length, array_c_ubyte password, size_t password_length, LP_Tox_Err_Group_Invite_Accept error)
    c-toxcore/toxcore/tox.h:5029"""
# c-toxcore/toxcore/tox.h:5043
# c-toxcore/toxcore/tox.h:115
tox_group_invite_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:5056
# Set the callback for the `group_invite` event. Pass NULL to unset.
# Set the callback for the `group_invite` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 5056
try:
    tox_callback_group_invite = _libraries['FIXME_STUB'].tox_callback_group_invite
    tox_callback_group_invite.restype = None
# tox_callback_group_invite(tox, callback)
    tox_callback_group_invite.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_invite.__doc__ = """None tox_callback_group_invite(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:5056"""
# c-toxcore/toxcore/tox.h:5064
# c-toxcore/toxcore/tox.h:115
tox_group_peer_join_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(None))
# c-toxcore/toxcore/tox.h:5071
# Set the callback for the `group_peer_join` event. Pass NULL to unset.
# Set the callback for the `group_peer_join` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 5071
try:
    tox_callback_group_peer_join = _libraries['FIXME_STUB'].tox_callback_group_peer_join
    tox_callback_group_peer_join.restype = None
# tox_callback_group_peer_join(tox, callback)
    tox_callback_group_peer_join.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_peer_join.__doc__ = """None tox_callback_group_peer_join(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:5071"""
# c-toxcore/toxcore/tox.h:5077
# Represents peer exit events. These should be used with the `group_peer_exit`
# event.
# Represents peer exit events. These should be used with the `group_peer_exit`
# event.

# values for enumeration 'Tox_Group_Exit_Type'
Tox_Group_Exit_Type__enumvalues = {
    0: 'TOX_GROUP_EXIT_TYPE_QUIT',
    1: 'TOX_GROUP_EXIT_TYPE_TIMEOUT',
    2: 'TOX_GROUP_EXIT_TYPE_DISCONNECTED',
    3: 'TOX_GROUP_EXIT_TYPE_SELF_DISCONNECTED',
    4: 'TOX_GROUP_EXIT_TYPE_KICK',
    5: 'TOX_GROUP_EXIT_TYPE_SYNC_ERROR',
}
TOX_GROUP_EXIT_TYPE_QUIT = 0
TOX_GROUP_EXIT_TYPE_TIMEOUT = 1
TOX_GROUP_EXIT_TYPE_DISCONNECTED = 2
TOX_GROUP_EXIT_TYPE_SELF_DISCONNECTED = 3
TOX_GROUP_EXIT_TYPE_KICK = 4
TOX_GROUP_EXIT_TYPE_SYNC_ERROR = 5
Tox_Group_Exit_Type = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:5113
# c-toxcore/toxcore/tox.h 5113
try:
    tox_group_exit_type_to_string = _libraries['FIXME_STUB'].tox_group_exit_type_to_string
    tox_group_exit_type_to_string.restype = POINTER_T(ctypes.c_char)
# tox_group_exit_type_to_string(value)
    tox_group_exit_type_to_string.argtypes = [Tox_Group_Exit_Type]
except AttributeError:
    pass
tox_group_exit_type_to_string.__doc__ = """LP_c_char tox_group_exit_type_to_string(Tox_Group_Exit_Type value)
    c-toxcore/toxcore/tox.h:5113"""
# c-toxcore/toxcore/tox.h:5125
# c-toxcore/toxcore/tox.h:115
tox_group_peer_exit_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, Tox_Group_Exit_Type, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))
# c-toxcore/toxcore/tox.h:5135
# Set the callback for the `group_peer_exit` event. Pass NULL to unset.
# Set the callback for the `group_peer_exit` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 5135
try:
    tox_callback_group_peer_exit = _libraries['FIXME_STUB'].tox_callback_group_peer_exit
    tox_callback_group_peer_exit.restype = None
# tox_callback_group_peer_exit(tox, callback)
    tox_callback_group_peer_exit.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, Tox_Group_Exit_Type, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(ctypes.c_ubyte), ctypes.c_uint64, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_peer_exit.__doc__ = """None tox_callback_group_peer_exit(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:5135"""
# c-toxcore/toxcore/tox.h:5140
# c-toxcore/toxcore/tox.h:115
tox_group_self_join_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(None))
# c-toxcore/toxcore/tox.h:5148
# Set the callback for the `group_self_join` event. Pass NULL to unset.
# Set the callback for the `group_self_join` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 5148
try:
    tox_callback_group_self_join = _libraries['FIXME_STUB'].tox_callback_group_self_join
    tox_callback_group_self_join.restype = None
# tox_callback_group_self_join(tox, callback)
    tox_callback_group_self_join.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_self_join.__doc__ = """None tox_callback_group_self_join(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:5148"""
# c-toxcore/toxcore/tox.h:5154
# Represents types of failed group join attempts. These are used in the
# tox_callback_group_rejected callback when a peer fails to join a group.
# Represents types of failed group join attempts. These are used in the
# tox_callback_group_rejected callback when a peer fails to join a group.

# values for enumeration 'Tox_Group_Join_Fail'
Tox_Group_Join_Fail__enumvalues = {
    0: 'TOX_GROUP_JOIN_FAIL_PEER_LIMIT',
    1: 'TOX_GROUP_JOIN_FAIL_INVALID_PASSWORD',
    2: 'TOX_GROUP_JOIN_FAIL_UNKNOWN',
}
TOX_GROUP_JOIN_FAIL_PEER_LIMIT = 0
TOX_GROUP_JOIN_FAIL_INVALID_PASSWORD = 1
TOX_GROUP_JOIN_FAIL_UNKNOWN = 2
Tox_Group_Join_Fail = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:5174
# c-toxcore/toxcore/tox.h 5174
try:
    tox_group_join_fail_to_string = _libraries['FIXME_STUB'].tox_group_join_fail_to_string
    tox_group_join_fail_to_string.restype = POINTER_T(ctypes.c_char)
# tox_group_join_fail_to_string(value)
    tox_group_join_fail_to_string.argtypes = [Tox_Group_Join_Fail]
except AttributeError:
    pass
tox_group_join_fail_to_string.__doc__ = """LP_c_char tox_group_join_fail_to_string(Tox_Group_Join_Fail value)
    c-toxcore/toxcore/tox.h:5174"""
# c-toxcore/toxcore/tox.h:5181
# c-toxcore/toxcore/tox.h:115
tox_group_join_fail_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Group_Join_Fail, POINTER_T(None))
# c-toxcore/toxcore/tox.h:5188
# Set the callback for the `group_join_fail` event. Pass NULL to unset.
# Set the callback for the `group_join_fail` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 5188
try:
    tox_callback_group_join_fail = _libraries['FIXME_STUB'].tox_callback_group_join_fail
    tox_callback_group_join_fail.restype = None
# tox_callback_group_join_fail(tox, callback)
    tox_callback_group_join_fail.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, Tox_Group_Join_Fail, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_join_fail.__doc__ = """None tox_callback_group_join_fail(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:5188"""
# c-toxcore/toxcore/tox.h:5196
# *****************************************************************************
# *****************************************************************************

# values for enumeration 'Tox_Err_Group_Set_Password'
Tox_Err_Group_Set_Password__enumvalues = {
    0: 'TOX_ERR_GROUP_SET_PASSWORD_OK',
    1: 'TOX_ERR_GROUP_SET_PASSWORD_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_SET_PASSWORD_PERMISSIONS',
    3: 'TOX_ERR_GROUP_SET_PASSWORD_TOO_LONG',
    4: 'TOX_ERR_GROUP_SET_PASSWORD_FAIL_SEND',
    5: 'TOX_ERR_GROUP_SET_PASSWORD_MALLOC',
    6: 'TOX_ERR_GROUP_SET_PASSWORD_DISCONNECTED',
}
TOX_ERR_GROUP_SET_PASSWORD_OK = 0
TOX_ERR_GROUP_SET_PASSWORD_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_SET_PASSWORD_PERMISSIONS = 2
TOX_ERR_GROUP_SET_PASSWORD_TOO_LONG = 3
TOX_ERR_GROUP_SET_PASSWORD_FAIL_SEND = 4
TOX_ERR_GROUP_SET_PASSWORD_MALLOC = 5
TOX_ERR_GROUP_SET_PASSWORD_DISCONNECTED = 6
Tox_Err_Group_Set_Password = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:5235
# c-toxcore/toxcore/tox.h 5235
try:
    tox_err_group_set_password_to_string = _libraries['FIXME_STUB'].tox_err_group_set_password_to_string
    tox_err_group_set_password_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_set_password_to_string(value)
    tox_err_group_set_password_to_string.argtypes = [Tox_Err_Group_Set_Password]
except AttributeError:
    pass
tox_err_group_set_password_to_string.__doc__ = """LP_c_char tox_err_group_set_password_to_string(Tox_Err_Group_Set_Password value)
    c-toxcore/toxcore/tox.h:5235"""
# c-toxcore/toxcore/tox.h:5253
# Set or unset the group password.
# Set or unset the group password.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:5196
# c-toxcore/toxcore/tox.h 5253
try:
    tox_group_set_password = _libraries['FIXME_STUB'].tox_group_set_password
    tox_group_set_password.restype = ctypes.c_bool
# tox_group_set_password(tox, group_number, password, length, error)
    tox_group_set_password.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, ctypes.c_ubyte * 0, size_t, POINTER_T(Tox_Err_Group_Set_Password)]
except AttributeError:
    pass
tox_group_set_password.__doc__ = """c_bool tox_group_set_password(LP_struct_Tox tox, Tox_Group_Number group_number, array_c_ubyte password, size_t length, LP_Tox_Err_Group_Set_Password error)
    c-toxcore/toxcore/tox.h:5253"""
# c-toxcore/toxcore/tox.h:5258

# values for enumeration 'Tox_Err_Group_Set_Topic_Lock'
Tox_Err_Group_Set_Topic_Lock__enumvalues = {
    0: 'TOX_ERR_GROUP_SET_TOPIC_LOCK_OK',
    1: 'TOX_ERR_GROUP_SET_TOPIC_LOCK_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_SET_TOPIC_LOCK_INVALID',
    3: 'TOX_ERR_GROUP_SET_TOPIC_LOCK_PERMISSIONS',
    4: 'TOX_ERR_GROUP_SET_TOPIC_LOCK_FAIL_SET',
    5: 'TOX_ERR_GROUP_SET_TOPIC_LOCK_FAIL_SEND',
    6: 'TOX_ERR_GROUP_SET_TOPIC_LOCK_DISCONNECTED',
}
TOX_ERR_GROUP_SET_TOPIC_LOCK_OK = 0
TOX_ERR_GROUP_SET_TOPIC_LOCK_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_SET_TOPIC_LOCK_INVALID = 2
TOX_ERR_GROUP_SET_TOPIC_LOCK_PERMISSIONS = 3
TOX_ERR_GROUP_SET_TOPIC_LOCK_FAIL_SET = 4
TOX_ERR_GROUP_SET_TOPIC_LOCK_FAIL_SEND = 5
TOX_ERR_GROUP_SET_TOPIC_LOCK_DISCONNECTED = 6
Tox_Err_Group_Set_Topic_Lock = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:5298
# c-toxcore/toxcore/tox.h 5298
try:
    tox_err_group_set_topic_lock_to_string = _libraries['FIXME_STUB'].tox_err_group_set_topic_lock_to_string
    tox_err_group_set_topic_lock_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_set_topic_lock_to_string(value)
    tox_err_group_set_topic_lock_to_string.argtypes = [Tox_Err_Group_Set_Topic_Lock]
except AttributeError:
    pass
tox_err_group_set_topic_lock_to_string.__doc__ = """LP_c_char tox_err_group_set_topic_lock_to_string(Tox_Err_Group_Set_Topic_Lock value)
    c-toxcore/toxcore/tox.h:5298"""
# c-toxcore/toxcore/tox.h:5317
# Set the group topic lock state.
# Set the group topic lock state.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:5258
# c-toxcore/toxcore/tox.h 5317
try:
    tox_group_set_topic_lock = _libraries['FIXME_STUB'].tox_group_set_topic_lock
    tox_group_set_topic_lock.restype = ctypes.c_bool
# tox_group_set_topic_lock(tox, group_number, topic_lock, error)
    tox_group_set_topic_lock.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Topic_Lock, POINTER_T(Tox_Err_Group_Set_Topic_Lock)]
except AttributeError:
    pass
tox_group_set_topic_lock.__doc__ = """c_bool tox_group_set_topic_lock(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Topic_Lock topic_lock, LP_Tox_Err_Group_Set_Topic_Lock error)
    c-toxcore/toxcore/tox.h:5317"""
# c-toxcore/toxcore/tox.h:5320

# values for enumeration 'Tox_Err_Group_Set_Voice_State'
Tox_Err_Group_Set_Voice_State__enumvalues = {
    0: 'TOX_ERR_GROUP_SET_VOICE_STATE_OK',
    1: 'TOX_ERR_GROUP_SET_VOICE_STATE_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_SET_VOICE_STATE_PERMISSIONS',
    3: 'TOX_ERR_GROUP_SET_VOICE_STATE_FAIL_SET',
    4: 'TOX_ERR_GROUP_SET_VOICE_STATE_FAIL_SEND',
    5: 'TOX_ERR_GROUP_SET_VOICE_STATE_DISCONNECTED',
}
TOX_ERR_GROUP_SET_VOICE_STATE_OK = 0
TOX_ERR_GROUP_SET_VOICE_STATE_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_SET_VOICE_STATE_PERMISSIONS = 2
TOX_ERR_GROUP_SET_VOICE_STATE_FAIL_SET = 3
TOX_ERR_GROUP_SET_VOICE_STATE_FAIL_SEND = 4
TOX_ERR_GROUP_SET_VOICE_STATE_DISCONNECTED = 5
Tox_Err_Group_Set_Voice_State = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:5356
# c-toxcore/toxcore/tox.h 5356
try:
    tox_err_group_set_voice_state_to_string = _libraries['FIXME_STUB'].tox_err_group_set_voice_state_to_string
    tox_err_group_set_voice_state_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_set_voice_state_to_string(value)
    tox_err_group_set_voice_state_to_string.argtypes = [Tox_Err_Group_Set_Voice_State]
except AttributeError:
    pass
tox_err_group_set_voice_state_to_string.__doc__ = """LP_c_char tox_err_group_set_voice_state_to_string(Tox_Err_Group_Set_Voice_State value)
    c-toxcore/toxcore/tox.h:5356"""
# c-toxcore/toxcore/tox.h:5375
# Set the group voice state.
# Set the group voice state.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:5320
# c-toxcore/toxcore/tox.h 5375
try:
    tox_group_set_voice_state = _libraries['FIXME_STUB'].tox_group_set_voice_state
    tox_group_set_voice_state.restype = ctypes.c_bool
# tox_group_set_voice_state(tox, group_number, voice_state, error)
    tox_group_set_voice_state.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Voice_State, POINTER_T(Tox_Err_Group_Set_Voice_State)]
except AttributeError:
    pass
tox_group_set_voice_state.__doc__ = """c_bool tox_group_set_voice_state(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Voice_State voice_state, LP_Tox_Err_Group_Set_Voice_State error)
    c-toxcore/toxcore/tox.h:5375"""
# c-toxcore/toxcore/tox.h:5378

# values for enumeration 'Tox_Err_Group_Set_Privacy_State'
Tox_Err_Group_Set_Privacy_State__enumvalues = {
    0: 'TOX_ERR_GROUP_SET_PRIVACY_STATE_OK',
    1: 'TOX_ERR_GROUP_SET_PRIVACY_STATE_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_SET_PRIVACY_STATE_PERMISSIONS',
    3: 'TOX_ERR_GROUP_SET_PRIVACY_STATE_FAIL_SET',
    4: 'TOX_ERR_GROUP_SET_PRIVACY_STATE_FAIL_SEND',
    5: 'TOX_ERR_GROUP_SET_PRIVACY_STATE_DISCONNECTED',
}
TOX_ERR_GROUP_SET_PRIVACY_STATE_OK = 0
TOX_ERR_GROUP_SET_PRIVACY_STATE_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_SET_PRIVACY_STATE_PERMISSIONS = 2
TOX_ERR_GROUP_SET_PRIVACY_STATE_FAIL_SET = 3
TOX_ERR_GROUP_SET_PRIVACY_STATE_FAIL_SEND = 4
TOX_ERR_GROUP_SET_PRIVACY_STATE_DISCONNECTED = 5
Tox_Err_Group_Set_Privacy_State = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:5414
# c-toxcore/toxcore/tox.h 5414
try:
    tox_err_group_set_privacy_state_to_string = _libraries['FIXME_STUB'].tox_err_group_set_privacy_state_to_string
    tox_err_group_set_privacy_state_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_set_privacy_state_to_string(value)
    tox_err_group_set_privacy_state_to_string.argtypes = [Tox_Err_Group_Set_Privacy_State]
except AttributeError:
    pass
tox_err_group_set_privacy_state_to_string.__doc__ = """LP_c_char tox_err_group_set_privacy_state_to_string(Tox_Err_Group_Set_Privacy_State value)
    c-toxcore/toxcore/tox.h:5414"""
# c-toxcore/toxcore/tox.h:5433
# Set the group privacy state.
# Set the group privacy state.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:5378
# c-toxcore/toxcore/tox.h 5433
try:
    tox_group_set_privacy_state = _libraries['FIXME_STUB'].tox_group_set_privacy_state
    tox_group_set_privacy_state.restype = ctypes.c_bool
# tox_group_set_privacy_state(tox, group_number, privacy_state, error)
    tox_group_set_privacy_state.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Privacy_State, POINTER_T(Tox_Err_Group_Set_Privacy_State)]
except AttributeError:
    pass
tox_group_set_privacy_state.__doc__ = """c_bool tox_group_set_privacy_state(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Privacy_State privacy_state, LP_Tox_Err_Group_Set_Privacy_State error)
    c-toxcore/toxcore/tox.h:5433"""
# c-toxcore/toxcore/tox.h:5436

# values for enumeration 'Tox_Err_Group_Set_Peer_Limit'
Tox_Err_Group_Set_Peer_Limit__enumvalues = {
    0: 'TOX_ERR_GROUP_SET_PEER_LIMIT_OK',
    1: 'TOX_ERR_GROUP_SET_PEER_LIMIT_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_SET_PEER_LIMIT_PERMISSIONS',
    3: 'TOX_ERR_GROUP_SET_PEER_LIMIT_FAIL_SET',
    4: 'TOX_ERR_GROUP_SET_PEER_LIMIT_FAIL_SEND',
    5: 'TOX_ERR_GROUP_SET_PEER_LIMIT_DISCONNECTED',
}
TOX_ERR_GROUP_SET_PEER_LIMIT_OK = 0
TOX_ERR_GROUP_SET_PEER_LIMIT_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_SET_PEER_LIMIT_PERMISSIONS = 2
TOX_ERR_GROUP_SET_PEER_LIMIT_FAIL_SET = 3
TOX_ERR_GROUP_SET_PEER_LIMIT_FAIL_SEND = 4
TOX_ERR_GROUP_SET_PEER_LIMIT_DISCONNECTED = 5
Tox_Err_Group_Set_Peer_Limit = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:5471
# c-toxcore/toxcore/tox.h 5471
try:
    tox_err_group_set_peer_limit_to_string = _libraries['FIXME_STUB'].tox_err_group_set_peer_limit_to_string
    tox_err_group_set_peer_limit_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_set_peer_limit_to_string(value)
    tox_err_group_set_peer_limit_to_string.argtypes = [Tox_Err_Group_Set_Peer_Limit]
except AttributeError:
    pass
tox_err_group_set_peer_limit_to_string.__doc__ = """LP_c_char tox_err_group_set_peer_limit_to_string(Tox_Err_Group_Set_Peer_Limit value)
    c-toxcore/toxcore/tox.h:5471"""
# c-toxcore/toxcore/tox.h:5486
# Set the group peer limit.
# Set the group peer limit.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:5436
# c-toxcore/toxcore/tox.h 5486
try:
    tox_group_set_peer_limit = _libraries['FIXME_STUB'].tox_group_set_peer_limit
    tox_group_set_peer_limit.restype = ctypes.c_bool
# tox_group_set_peer_limit(tox, group_number, peer_limit, error)
    tox_group_set_peer_limit.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, uint16_t, POINTER_T(Tox_Err_Group_Set_Peer_Limit)]
except AttributeError:
    pass
tox_group_set_peer_limit.__doc__ = """c_bool tox_group_set_peer_limit(LP_struct_Tox tox, Tox_Group_Number group_number, uint16_t peer_limit, LP_Tox_Err_Group_Set_Peer_Limit error)
    c-toxcore/toxcore/tox.h:5486"""
# c-toxcore/toxcore/tox.h:5495
# *****************************************************************************
# *****************************************************************************

# values for enumeration 'Tox_Err_Group_Set_Ignore'
Tox_Err_Group_Set_Ignore__enumvalues = {
    0: 'TOX_ERR_GROUP_SET_IGNORE_OK',
    1: 'TOX_ERR_GROUP_SET_IGNORE_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_SET_IGNORE_PEER_NOT_FOUND',
    3: 'TOX_ERR_GROUP_SET_IGNORE_SELF',
}
TOX_ERR_GROUP_SET_IGNORE_OK = 0
TOX_ERR_GROUP_SET_IGNORE_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_SET_IGNORE_PEER_NOT_FOUND = 2
TOX_ERR_GROUP_SET_IGNORE_SELF = 3
Tox_Err_Group_Set_Ignore = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:5519
# c-toxcore/toxcore/tox.h 5519
try:
    tox_err_group_set_ignore_to_string = _libraries['FIXME_STUB'].tox_err_group_set_ignore_to_string
    tox_err_group_set_ignore_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_set_ignore_to_string(value)
    tox_err_group_set_ignore_to_string.argtypes = [Tox_Err_Group_Set_Ignore]
except AttributeError:
    pass
tox_err_group_set_ignore_to_string.__doc__ = """LP_c_char tox_err_group_set_ignore_to_string(Tox_Err_Group_Set_Ignore value)
    c-toxcore/toxcore/tox.h:5519"""
# c-toxcore/toxcore/tox.h:5531
# Ignore or unignore a peer.
# Ignore or unignore a peer.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:5495
# c-toxcore/toxcore/tox.h 5531
try:
    tox_group_set_ignore = _libraries['FIXME_STUB'].tox_group_set_ignore
    tox_group_set_ignore.restype = ctypes.c_bool
# tox_group_set_ignore(tox, group_number, peer_id, ignore, error)
    tox_group_set_ignore.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Peer_Number, ctypes.c_bool, POINTER_T(Tox_Err_Group_Set_Ignore)]
except AttributeError:
    pass
tox_group_set_ignore.__doc__ = """c_bool tox_group_set_ignore(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Peer_Number peer_id, c_bool ignore, LP_Tox_Err_Group_Set_Ignore error)
    c-toxcore/toxcore/tox.h:5531"""
# c-toxcore/toxcore/tox.h:5534

# values for enumeration 'Tox_Err_Group_Set_Role'
Tox_Err_Group_Set_Role__enumvalues = {
    0: 'TOX_ERR_GROUP_SET_ROLE_OK',
    1: 'TOX_ERR_GROUP_SET_ROLE_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_SET_ROLE_PEER_NOT_FOUND',
    3: 'TOX_ERR_GROUP_SET_ROLE_PERMISSIONS',
    4: 'TOX_ERR_GROUP_SET_ROLE_ASSIGNMENT',
    5: 'TOX_ERR_GROUP_SET_ROLE_FAIL_ACTION',
    6: 'TOX_ERR_GROUP_SET_ROLE_SELF',
}
TOX_ERR_GROUP_SET_ROLE_OK = 0
TOX_ERR_GROUP_SET_ROLE_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_SET_ROLE_PEER_NOT_FOUND = 2
TOX_ERR_GROUP_SET_ROLE_PERMISSIONS = 3
TOX_ERR_GROUP_SET_ROLE_ASSIGNMENT = 4
TOX_ERR_GROUP_SET_ROLE_FAIL_ACTION = 5
TOX_ERR_GROUP_SET_ROLE_SELF = 6
Tox_Err_Group_Set_Role = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:5576
# c-toxcore/toxcore/tox.h 5576
try:
    tox_err_group_set_role_to_string = _libraries['FIXME_STUB'].tox_err_group_set_role_to_string
    tox_err_group_set_role_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_set_role_to_string(value)
    tox_err_group_set_role_to_string.argtypes = [Tox_Err_Group_Set_Role]
except AttributeError:
    pass
tox_err_group_set_role_to_string.__doc__ = """LP_c_char tox_err_group_set_role_to_string(Tox_Err_Group_Set_Role value)
    c-toxcore/toxcore/tox.h:5576"""
# c-toxcore/toxcore/tox.h:5597
# Set a peer's role.
# Set a peer's role.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:5534
# c-toxcore/toxcore/tox.h 5597
try:
    tox_group_set_role = _libraries['FIXME_STUB'].tox_group_set_role
    tox_group_set_role.restype = ctypes.c_bool
# tox_group_set_role(tox, group_number, peer_id, role, error)
    tox_group_set_role.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Peer_Number, Tox_Group_Role, POINTER_T(Tox_Err_Group_Set_Role)]
except AttributeError:
    pass
tox_group_set_role.__doc__ = """c_bool tox_group_set_role(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Peer_Number peer_id, Tox_Group_Role role, LP_Tox_Err_Group_Set_Role error)
    c-toxcore/toxcore/tox.h:5597"""
# c-toxcore/toxcore/tox.h:5600

# values for enumeration 'Tox_Err_Group_Kick_Peer'
Tox_Err_Group_Kick_Peer__enumvalues = {
    0: 'TOX_ERR_GROUP_KICK_PEER_OK',
    1: 'TOX_ERR_GROUP_KICK_PEER_GROUP_NOT_FOUND',
    2: 'TOX_ERR_GROUP_KICK_PEER_PEER_NOT_FOUND',
    3: 'TOX_ERR_GROUP_KICK_PEER_PERMISSIONS',
    4: 'TOX_ERR_GROUP_KICK_PEER_FAIL_ACTION',
    5: 'TOX_ERR_GROUP_KICK_PEER_FAIL_SEND',
    6: 'TOX_ERR_GROUP_KICK_PEER_SELF',
}
TOX_ERR_GROUP_KICK_PEER_OK = 0
TOX_ERR_GROUP_KICK_PEER_GROUP_NOT_FOUND = 1
TOX_ERR_GROUP_KICK_PEER_PEER_NOT_FOUND = 2
TOX_ERR_GROUP_KICK_PEER_PERMISSIONS = 3
TOX_ERR_GROUP_KICK_PEER_FAIL_ACTION = 4
TOX_ERR_GROUP_KICK_PEER_FAIL_SEND = 5
TOX_ERR_GROUP_KICK_PEER_SELF = 6
Tox_Err_Group_Kick_Peer = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:5639
# c-toxcore/toxcore/tox.h 5639
try:
    tox_err_group_kick_peer_to_string = _libraries['FIXME_STUB'].tox_err_group_kick_peer_to_string
    tox_err_group_kick_peer_to_string.restype = POINTER_T(ctypes.c_char)
# tox_err_group_kick_peer_to_string(value)
    tox_err_group_kick_peer_to_string.argtypes = [Tox_Err_Group_Kick_Peer]
except AttributeError:
    pass
tox_err_group_kick_peer_to_string.__doc__ = """LP_c_char tox_err_group_kick_peer_to_string(Tox_Err_Group_Kick_Peer value)
    c-toxcore/toxcore/tox.h:5639"""
# c-toxcore/toxcore/tox.h:5656
# Kick a peer.
# Kick a peer.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:5600
# c-toxcore/toxcore/tox.h 5656
try:
    tox_group_kick_peer = _libraries['FIXME_STUB'].tox_group_kick_peer
    tox_group_kick_peer.restype = ctypes.c_bool
# tox_group_kick_peer(tox, group_number, peer_id, error)
    tox_group_kick_peer.argtypes = [POINTER_T(struct_Tox), Tox_Group_Number, Tox_Group_Peer_Number, POINTER_T(Tox_Err_Group_Kick_Peer)]
except AttributeError:
    pass
tox_group_kick_peer.__doc__ = """c_bool tox_group_kick_peer(LP_struct_Tox tox, Tox_Group_Number group_number, Tox_Group_Peer_Number peer_id, LP_Tox_Err_Group_Kick_Peer error)
    c-toxcore/toxcore/tox.h:5656"""
# c-toxcore/toxcore/tox.h:5663
# Represents moderation events. These should be used with the `group_moderation`
# event.
# Represents moderation events. These should be used with the `group_moderation`
# event.

# values for enumeration 'Tox_Group_Mod_Event'
Tox_Group_Mod_Event__enumvalues = {
    0: 'TOX_GROUP_MOD_EVENT_KICK',
    1: 'TOX_GROUP_MOD_EVENT_OBSERVER',
    2: 'TOX_GROUP_MOD_EVENT_USER',
    3: 'TOX_GROUP_MOD_EVENT_MODERATOR',
}
TOX_GROUP_MOD_EVENT_KICK = 0
TOX_GROUP_MOD_EVENT_OBSERVER = 1
TOX_GROUP_MOD_EVENT_USER = 2
TOX_GROUP_MOD_EVENT_MODERATOR = 3
Tox_Group_Mod_Event = ctypes.c_uint32 # enum
# c-toxcore/toxcore/tox.h:5687
# c-toxcore/toxcore/tox.h 5687
try:
    tox_group_mod_event_to_string = _libraries['FIXME_STUB'].tox_group_mod_event_to_string
    tox_group_mod_event_to_string.restype = POINTER_T(ctypes.c_char)
# tox_group_mod_event_to_string(value)
    tox_group_mod_event_to_string.argtypes = [Tox_Group_Mod_Event]
except AttributeError:
    pass
tox_group_mod_event_to_string.__doc__ = """LP_c_char tox_group_mod_event_to_string(Tox_Group_Mod_Event value)
    c-toxcore/toxcore/tox.h:5687"""
# c-toxcore/toxcore/tox.h:5695
# c-toxcore/toxcore/tox.h:115
tox_group_moderation_cb = ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, Tox_Group_Mod_Event, POINTER_T(None))
# c-toxcore/toxcore/tox.h:5710
# Set the callback for the `group_moderation` event. Pass NULL to unset.
# Set the callback for the `group_moderation` event. Pass NULL to unset.
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h:115
# c-toxcore/toxcore/tox.h 5710
try:
    tox_callback_group_moderation = _libraries['FIXME_STUB'].tox_callback_group_moderation
    tox_callback_group_moderation.restype = None
# tox_callback_group_moderation(tox, callback)
    tox_callback_group_moderation.argtypes = [POINTER_T(struct_Tox), ctypes.CFUNCTYPE(None, POINTER_T(struct_Tox), ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, Tox_Group_Mod_Event, POINTER_T(None))]
except AttributeError:
    pass
tox_callback_group_moderation.__doc__ = """None tox_callback_group_moderation(LP_struct_Tox tox, LP_FP_ callback)
    c-toxcore/toxcore/tox.h:5710"""
# c-toxcore/toxcore/tox.h:5723
TOX_ERR_OPTIONS_NEW = Tox_Err_Options_New
TOX_ERR_OPTIONS_NEW__enumvalues = Tox_Err_Options_New__enumvalues
# c-toxcore/toxcore/tox.h:5724
TOX_ERR_NEW = Tox_Err_New
TOX_ERR_NEW__enumvalues = Tox_Err_New__enumvalues
# c-toxcore/toxcore/tox.h:5725
TOX_ERR_BOOTSTRAP = Tox_Err_Bootstrap
TOX_ERR_BOOTSTRAP__enumvalues = Tox_Err_Bootstrap__enumvalues
# c-toxcore/toxcore/tox.h:5726
TOX_ERR_SET_INFO = Tox_Err_Set_Info
TOX_ERR_SET_INFO__enumvalues = Tox_Err_Set_Info__enumvalues
# c-toxcore/toxcore/tox.h:5727
TOX_ERR_FRIEND_ADD = Tox_Err_Friend_Add
TOX_ERR_FRIEND_ADD__enumvalues = Tox_Err_Friend_Add__enumvalues
# c-toxcore/toxcore/tox.h:5728
TOX_ERR_FRIEND_DELETE = Tox_Err_Friend_Delete
TOX_ERR_FRIEND_DELETE__enumvalues = Tox_Err_Friend_Delete__enumvalues
# c-toxcore/toxcore/tox.h:5729
TOX_ERR_FRIEND_BY_PUBLIC_KEY = Tox_Err_Friend_By_Public_Key
TOX_ERR_FRIEND_BY_PUBLIC_KEY__enumvalues = Tox_Err_Friend_By_Public_Key__enumvalues
# c-toxcore/toxcore/tox.h:5730
TOX_ERR_FRIEND_GET_PUBLIC_KEY = Tox_Err_Friend_Get_Public_Key
TOX_ERR_FRIEND_GET_PUBLIC_KEY__enumvalues = Tox_Err_Friend_Get_Public_Key__enumvalues
# c-toxcore/toxcore/tox.h:5731
TOX_ERR_FRIEND_GET_LAST_ONLINE = Tox_Err_Friend_Get_Last_Online
TOX_ERR_FRIEND_GET_LAST_ONLINE__enumvalues = Tox_Err_Friend_Get_Last_Online__enumvalues
# c-toxcore/toxcore/tox.h:5732
TOX_ERR_FRIEND_QUERY = Tox_Err_Friend_Query
TOX_ERR_FRIEND_QUERY__enumvalues = Tox_Err_Friend_Query__enumvalues
# c-toxcore/toxcore/tox.h:5733
TOX_ERR_SET_TYPING = Tox_Err_Set_Typing
TOX_ERR_SET_TYPING__enumvalues = Tox_Err_Set_Typing__enumvalues
# c-toxcore/toxcore/tox.h:5734
TOX_ERR_FRIEND_SEND_MESSAGE = Tox_Err_Friend_Send_Message
TOX_ERR_FRIEND_SEND_MESSAGE__enumvalues = Tox_Err_Friend_Send_Message__enumvalues
# c-toxcore/toxcore/tox.h:5735
TOX_ERR_FILE_CONTROL = Tox_Err_File_Control
TOX_ERR_FILE_CONTROL__enumvalues = Tox_Err_File_Control__enumvalues
# c-toxcore/toxcore/tox.h:5736
TOX_ERR_FILE_SEEK = Tox_Err_File_Seek
TOX_ERR_FILE_SEEK__enumvalues = Tox_Err_File_Seek__enumvalues
# c-toxcore/toxcore/tox.h:5737
TOX_ERR_FILE_GET = Tox_Err_File_Get
TOX_ERR_FILE_GET__enumvalues = Tox_Err_File_Get__enumvalues
# c-toxcore/toxcore/tox.h:5738
TOX_ERR_FILE_SEND = Tox_Err_File_Send
TOX_ERR_FILE_SEND__enumvalues = Tox_Err_File_Send__enumvalues
# c-toxcore/toxcore/tox.h:5739
TOX_ERR_FILE_SEND_CHUNK = Tox_Err_File_Send_Chunk
TOX_ERR_FILE_SEND_CHUNK__enumvalues = Tox_Err_File_Send_Chunk__enumvalues
# c-toxcore/toxcore/tox.h:5740
TOX_ERR_CONFERENCE_NEW = Tox_Err_Conference_New
TOX_ERR_CONFERENCE_NEW__enumvalues = Tox_Err_Conference_New__enumvalues
# c-toxcore/toxcore/tox.h:5741
TOX_ERR_CONFERENCE_DELETE = Tox_Err_Conference_Delete
TOX_ERR_CONFERENCE_DELETE__enumvalues = Tox_Err_Conference_Delete__enumvalues
# c-toxcore/toxcore/tox.h:5742
TOX_ERR_CONFERENCE_PEER_QUERY = Tox_Err_Conference_Peer_Query
TOX_ERR_CONFERENCE_PEER_QUERY__enumvalues = Tox_Err_Conference_Peer_Query__enumvalues
# c-toxcore/toxcore/tox.h:5743
TOX_ERR_CONFERENCE_SET_MAX_OFFLINE = Tox_Err_Conference_Set_Max_Offline
TOX_ERR_CONFERENCE_SET_MAX_OFFLINE__enumvalues = Tox_Err_Conference_Set_Max_Offline__enumvalues
# c-toxcore/toxcore/tox.h:5744
TOX_ERR_CONFERENCE_BY_ID = Tox_Err_Conference_By_Id
TOX_ERR_CONFERENCE_BY_ID__enumvalues = Tox_Err_Conference_By_Id__enumvalues
# c-toxcore/toxcore/tox.h:5745
TOX_ERR_CONFERENCE_BY_UID = Tox_Err_Conference_By_Uid
TOX_ERR_CONFERENCE_BY_UID__enumvalues = Tox_Err_Conference_By_Uid__enumvalues
# c-toxcore/toxcore/tox.h:5746
TOX_ERR_CONFERENCE_INVITE = Tox_Err_Conference_Invite
TOX_ERR_CONFERENCE_INVITE__enumvalues = Tox_Err_Conference_Invite__enumvalues
# c-toxcore/toxcore/tox.h:5747
TOX_ERR_CONFERENCE_JOIN = Tox_Err_Conference_Join
TOX_ERR_CONFERENCE_JOIN__enumvalues = Tox_Err_Conference_Join__enumvalues
# c-toxcore/toxcore/tox.h:5748
TOX_ERR_CONFERENCE_SEND_MESSAGE = Tox_Err_Conference_Send_Message
TOX_ERR_CONFERENCE_SEND_MESSAGE__enumvalues = Tox_Err_Conference_Send_Message__enumvalues
# c-toxcore/toxcore/tox.h:5749
TOX_ERR_CONFERENCE_TITLE = Tox_Err_Conference_Title
TOX_ERR_CONFERENCE_TITLE__enumvalues = Tox_Err_Conference_Title__enumvalues
# c-toxcore/toxcore/tox.h:5750
TOX_ERR_CONFERENCE_GET_TYPE = Tox_Err_Conference_Get_Type
TOX_ERR_CONFERENCE_GET_TYPE__enumvalues = Tox_Err_Conference_Get_Type__enumvalues
# c-toxcore/toxcore/tox.h:5751
TOX_ERR_FRIEND_CUSTOM_PACKET = Tox_Err_Friend_Custom_Packet
TOX_ERR_FRIEND_CUSTOM_PACKET__enumvalues = Tox_Err_Friend_Custom_Packet__enumvalues
# c-toxcore/toxcore/tox.h:5752
TOX_ERR_GET_PORT = Tox_Err_Get_Port
TOX_ERR_GET_PORT__enumvalues = Tox_Err_Get_Port__enumvalues
# c-toxcore/toxcore/tox.h:5753
TOX_USER_STATUS = Tox_User_Status
TOX_USER_STATUS__enumvalues = Tox_User_Status__enumvalues
# c-toxcore/toxcore/tox.h:5754
TOX_MESSAGE_TYPE = Tox_Message_Type
TOX_MESSAGE_TYPE__enumvalues = Tox_Message_Type__enumvalues
# c-toxcore/toxcore/tox.h:5755
TOX_PROXY_TYPE = Tox_Proxy_Type
TOX_PROXY_TYPE__enumvalues = Tox_Proxy_Type__enumvalues
# c-toxcore/toxcore/tox.h:5756
TOX_SAVEDATA_TYPE = Tox_Savedata_Type
TOX_SAVEDATA_TYPE__enumvalues = Tox_Savedata_Type__enumvalues
# c-toxcore/toxcore/tox.h:5757
TOX_LOG_LEVEL = Tox_Log_Level
TOX_LOG_LEVEL__enumvalues = Tox_Log_Level__enumvalues
# c-toxcore/toxcore/tox.h:5758
TOX_CONNECTION = Tox_Connection
TOX_CONNECTION__enumvalues = Tox_Connection__enumvalues
# c-toxcore/toxcore/tox.h:5759
TOX_FILE_CONTROL = Tox_File_Control
TOX_FILE_CONTROL__enumvalues = Tox_File_Control__enumvalues
# c-toxcore/toxcore/tox.h:5760
TOX_CONFERENCE_TYPE = Tox_Conference_Type
TOX_CONFERENCE_TYPE__enumvalues = Tox_Conference_Type__enumvalues
# c-toxcore/toxcore/tox.h:5761
TOX_FILE_KIND = Tox_File_Kind
TOX_FILE_KIND__enumvalues = Tox_File_Kind__enumvalues
__all__ = \
    ['TOX_CONFERENCE_TYPE', 'TOX_CONFERENCE_TYPE_AV',
    'TOX_CONFERENCE_TYPE_TEXT', 'TOX_CONFERENCE_TYPE__enumvalues',
    'TOX_CONNECTION', 'TOX_CONNECTION_NONE', 'TOX_CONNECTION_TCP',
    'TOX_CONNECTION_UDP', 'TOX_CONNECTION__enumvalues',
    'TOX_ERR_BOOTSTRAP', 'TOX_ERR_BOOTSTRAP_BAD_HOST',
    'TOX_ERR_BOOTSTRAP_BAD_PORT', 'TOX_ERR_BOOTSTRAP_NULL',
    'TOX_ERR_BOOTSTRAP_OK', 'TOX_ERR_BOOTSTRAP__enumvalues',
    'TOX_ERR_CONFERENCE_BY_ID', 'TOX_ERR_CONFERENCE_BY_ID_NOT_FOUND',
    'TOX_ERR_CONFERENCE_BY_ID_NULL', 'TOX_ERR_CONFERENCE_BY_ID_OK',
    'TOX_ERR_CONFERENCE_BY_ID__enumvalues',
    'TOX_ERR_CONFERENCE_BY_UID',
    'TOX_ERR_CONFERENCE_BY_UID_NOT_FOUND',
    'TOX_ERR_CONFERENCE_BY_UID_NULL', 'TOX_ERR_CONFERENCE_BY_UID_OK',
    'TOX_ERR_CONFERENCE_BY_UID__enumvalues',
    'TOX_ERR_CONFERENCE_DELETE',
    'TOX_ERR_CONFERENCE_DELETE_CONFERENCE_NOT_FOUND',
    'TOX_ERR_CONFERENCE_DELETE_OK',
    'TOX_ERR_CONFERENCE_DELETE__enumvalues',
    'TOX_ERR_CONFERENCE_GET_TYPE',
    'TOX_ERR_CONFERENCE_GET_TYPE_CONFERENCE_NOT_FOUND',
    'TOX_ERR_CONFERENCE_GET_TYPE_OK',
    'TOX_ERR_CONFERENCE_GET_TYPE__enumvalues',
    'TOX_ERR_CONFERENCE_INVITE',
    'TOX_ERR_CONFERENCE_INVITE_CONFERENCE_NOT_FOUND',
    'TOX_ERR_CONFERENCE_INVITE_FAIL_SEND',
    'TOX_ERR_CONFERENCE_INVITE_NO_CONNECTION',
    'TOX_ERR_CONFERENCE_INVITE_OK',
    'TOX_ERR_CONFERENCE_INVITE__enumvalues',
    'TOX_ERR_CONFERENCE_JOIN', 'TOX_ERR_CONFERENCE_JOIN_DUPLICATE',
    'TOX_ERR_CONFERENCE_JOIN_FAIL_SEND',
    'TOX_ERR_CONFERENCE_JOIN_FRIEND_NOT_FOUND',
    'TOX_ERR_CONFERENCE_JOIN_INIT_FAIL',
    'TOX_ERR_CONFERENCE_JOIN_INVALID_LENGTH',
    'TOX_ERR_CONFERENCE_JOIN_NULL', 'TOX_ERR_CONFERENCE_JOIN_OK',
    'TOX_ERR_CONFERENCE_JOIN_WRONG_TYPE',
    'TOX_ERR_CONFERENCE_JOIN__enumvalues', 'TOX_ERR_CONFERENCE_NEW',
    'TOX_ERR_CONFERENCE_NEW_INIT', 'TOX_ERR_CONFERENCE_NEW_OK',
    'TOX_ERR_CONFERENCE_NEW__enumvalues',
    'TOX_ERR_CONFERENCE_PEER_QUERY',
    'TOX_ERR_CONFERENCE_PEER_QUERY_CONFERENCE_NOT_FOUND',
    'TOX_ERR_CONFERENCE_PEER_QUERY_NO_CONNECTION',
    'TOX_ERR_CONFERENCE_PEER_QUERY_OK',
    'TOX_ERR_CONFERENCE_PEER_QUERY_PEER_NOT_FOUND',
    'TOX_ERR_CONFERENCE_PEER_QUERY__enumvalues',
    'TOX_ERR_CONFERENCE_SEND_MESSAGE',
    'TOX_ERR_CONFERENCE_SEND_MESSAGE_CONFERENCE_NOT_FOUND',
    'TOX_ERR_CONFERENCE_SEND_MESSAGE_FAIL_SEND',
    'TOX_ERR_CONFERENCE_SEND_MESSAGE_NO_CONNECTION',
    'TOX_ERR_CONFERENCE_SEND_MESSAGE_OK',
    'TOX_ERR_CONFERENCE_SEND_MESSAGE_TOO_LONG',
    'TOX_ERR_CONFERENCE_SEND_MESSAGE__enumvalues',
    'TOX_ERR_CONFERENCE_SET_MAX_OFFLINE',
    'TOX_ERR_CONFERENCE_SET_MAX_OFFLINE_CONFERENCE_NOT_FOUND',
    'TOX_ERR_CONFERENCE_SET_MAX_OFFLINE_OK',
    'TOX_ERR_CONFERENCE_SET_MAX_OFFLINE__enumvalues',
    'TOX_ERR_CONFERENCE_TITLE',
    'TOX_ERR_CONFERENCE_TITLE_CONFERENCE_NOT_FOUND',
    'TOX_ERR_CONFERENCE_TITLE_FAIL_SEND',
    'TOX_ERR_CONFERENCE_TITLE_INVALID_LENGTH',
    'TOX_ERR_CONFERENCE_TITLE_OK',
    'TOX_ERR_CONFERENCE_TITLE__enumvalues', 'TOX_ERR_FILE_CONTROL',
    'TOX_ERR_FILE_CONTROL_ALREADY_PAUSED',
    'TOX_ERR_FILE_CONTROL_DENIED',
    'TOX_ERR_FILE_CONTROL_FRIEND_NOT_CONNECTED',
    'TOX_ERR_FILE_CONTROL_FRIEND_NOT_FOUND',
    'TOX_ERR_FILE_CONTROL_NOT_FOUND',
    'TOX_ERR_FILE_CONTROL_NOT_PAUSED', 'TOX_ERR_FILE_CONTROL_OK',
    'TOX_ERR_FILE_CONTROL_SENDQ', 'TOX_ERR_FILE_CONTROL__enumvalues',
    'TOX_ERR_FILE_GET', 'TOX_ERR_FILE_GET_FRIEND_NOT_FOUND',
    'TOX_ERR_FILE_GET_NOT_FOUND', 'TOX_ERR_FILE_GET_NULL',
    'TOX_ERR_FILE_GET_OK', 'TOX_ERR_FILE_GET__enumvalues',
    'TOX_ERR_FILE_SEEK', 'TOX_ERR_FILE_SEEK_DENIED',
    'TOX_ERR_FILE_SEEK_FRIEND_NOT_CONNECTED',
    'TOX_ERR_FILE_SEEK_FRIEND_NOT_FOUND',
    'TOX_ERR_FILE_SEEK_INVALID_POSITION',
    'TOX_ERR_FILE_SEEK_NOT_FOUND', 'TOX_ERR_FILE_SEEK_OK',
    'TOX_ERR_FILE_SEEK_SENDQ', 'TOX_ERR_FILE_SEEK__enumvalues',
    'TOX_ERR_FILE_SEND', 'TOX_ERR_FILE_SEND_CHUNK',
    'TOX_ERR_FILE_SEND_CHUNK_FRIEND_NOT_CONNECTED',
    'TOX_ERR_FILE_SEND_CHUNK_FRIEND_NOT_FOUND',
    'TOX_ERR_FILE_SEND_CHUNK_INVALID_LENGTH',
    'TOX_ERR_FILE_SEND_CHUNK_NOT_FOUND',
    'TOX_ERR_FILE_SEND_CHUNK_NOT_TRANSFERRING',
    'TOX_ERR_FILE_SEND_CHUNK_NULL', 'TOX_ERR_FILE_SEND_CHUNK_OK',
    'TOX_ERR_FILE_SEND_CHUNK_SENDQ',
    'TOX_ERR_FILE_SEND_CHUNK_WRONG_POSITION',
    'TOX_ERR_FILE_SEND_CHUNK__enumvalues',
    'TOX_ERR_FILE_SEND_FRIEND_NOT_CONNECTED',
    'TOX_ERR_FILE_SEND_FRIEND_NOT_FOUND',
    'TOX_ERR_FILE_SEND_NAME_TOO_LONG', 'TOX_ERR_FILE_SEND_NULL',
    'TOX_ERR_FILE_SEND_OK', 'TOX_ERR_FILE_SEND_TOO_MANY',
    'TOX_ERR_FILE_SEND__enumvalues', 'TOX_ERR_FRIEND_ADD',
    'TOX_ERR_FRIEND_ADD_ALREADY_SENT',
    'TOX_ERR_FRIEND_ADD_BAD_CHECKSUM', 'TOX_ERR_FRIEND_ADD_MALLOC',
    'TOX_ERR_FRIEND_ADD_NO_MESSAGE', 'TOX_ERR_FRIEND_ADD_NULL',
    'TOX_ERR_FRIEND_ADD_OK', 'TOX_ERR_FRIEND_ADD_OWN_KEY',
    'TOX_ERR_FRIEND_ADD_SET_NEW_NOSPAM',
    'TOX_ERR_FRIEND_ADD_TOO_LONG', 'TOX_ERR_FRIEND_ADD__enumvalues',
    'TOX_ERR_FRIEND_BY_PUBLIC_KEY',
    'TOX_ERR_FRIEND_BY_PUBLIC_KEY_NOT_FOUND',
    'TOX_ERR_FRIEND_BY_PUBLIC_KEY_NULL',
    'TOX_ERR_FRIEND_BY_PUBLIC_KEY_OK',
    'TOX_ERR_FRIEND_BY_PUBLIC_KEY__enumvalues',
    'TOX_ERR_FRIEND_CUSTOM_PACKET',
    'TOX_ERR_FRIEND_CUSTOM_PACKET_EMPTY',
    'TOX_ERR_FRIEND_CUSTOM_PACKET_FRIEND_NOT_CONNECTED',
    'TOX_ERR_FRIEND_CUSTOM_PACKET_FRIEND_NOT_FOUND',
    'TOX_ERR_FRIEND_CUSTOM_PACKET_INVALID',
    'TOX_ERR_FRIEND_CUSTOM_PACKET_NULL',
    'TOX_ERR_FRIEND_CUSTOM_PACKET_OK',
    'TOX_ERR_FRIEND_CUSTOM_PACKET_SENDQ',
    'TOX_ERR_FRIEND_CUSTOM_PACKET_TOO_LONG',
    'TOX_ERR_FRIEND_CUSTOM_PACKET__enumvalues',
    'TOX_ERR_FRIEND_DELETE', 'TOX_ERR_FRIEND_DELETE_FRIEND_NOT_FOUND',
    'TOX_ERR_FRIEND_DELETE_OK', 'TOX_ERR_FRIEND_DELETE__enumvalues',
    'TOX_ERR_FRIEND_GET_LAST_ONLINE',
    'TOX_ERR_FRIEND_GET_LAST_ONLINE_FRIEND_NOT_FOUND',
    'TOX_ERR_FRIEND_GET_LAST_ONLINE_OK',
    'TOX_ERR_FRIEND_GET_LAST_ONLINE__enumvalues',
    'TOX_ERR_FRIEND_GET_PUBLIC_KEY',
    'TOX_ERR_FRIEND_GET_PUBLIC_KEY_FRIEND_NOT_FOUND',
    'TOX_ERR_FRIEND_GET_PUBLIC_KEY_OK',
    'TOX_ERR_FRIEND_GET_PUBLIC_KEY__enumvalues',
    'TOX_ERR_FRIEND_QUERY', 'TOX_ERR_FRIEND_QUERY_FRIEND_NOT_FOUND',
    'TOX_ERR_FRIEND_QUERY_NULL', 'TOX_ERR_FRIEND_QUERY_OK',
    'TOX_ERR_FRIEND_QUERY__enumvalues', 'TOX_ERR_FRIEND_SEND_MESSAGE',
    'TOX_ERR_FRIEND_SEND_MESSAGE_EMPTY',
    'TOX_ERR_FRIEND_SEND_MESSAGE_FRIEND_NOT_CONNECTED',
    'TOX_ERR_FRIEND_SEND_MESSAGE_FRIEND_NOT_FOUND',
    'TOX_ERR_FRIEND_SEND_MESSAGE_NULL',
    'TOX_ERR_FRIEND_SEND_MESSAGE_OK',
    'TOX_ERR_FRIEND_SEND_MESSAGE_SENDQ',
    'TOX_ERR_FRIEND_SEND_MESSAGE_TOO_LONG',
    'TOX_ERR_FRIEND_SEND_MESSAGE__enumvalues', 'TOX_ERR_GET_PORT',
    'TOX_ERR_GET_PORT_NOT_BOUND', 'TOX_ERR_GET_PORT_OK',
    'TOX_ERR_GET_PORT__enumvalues',
    'TOX_ERR_GROUP_DISCONNECT_ALREADY_DISCONNECTED',
    'TOX_ERR_GROUP_DISCONNECT_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_DISCONNECT_OK',
    'TOX_ERR_GROUP_INVITE_ACCEPT_BAD_INVITE',
    'TOX_ERR_GROUP_INVITE_ACCEPT_EMPTY',
    'TOX_ERR_GROUP_INVITE_ACCEPT_FAIL_SEND',
    'TOX_ERR_GROUP_INVITE_ACCEPT_FRIEND_NOT_FOUND',
    'TOX_ERR_GROUP_INVITE_ACCEPT_INIT_FAILED',
    'TOX_ERR_GROUP_INVITE_ACCEPT_NULL',
    'TOX_ERR_GROUP_INVITE_ACCEPT_OK',
    'TOX_ERR_GROUP_INVITE_ACCEPT_PASSWORD',
    'TOX_ERR_GROUP_INVITE_ACCEPT_TOO_LONG',
    'TOX_ERR_GROUP_INVITE_FRIEND_DISCONNECTED',
    'TOX_ERR_GROUP_INVITE_FRIEND_FAIL_SEND',
    'TOX_ERR_GROUP_INVITE_FRIEND_FRIEND_NOT_FOUND',
    'TOX_ERR_GROUP_INVITE_FRIEND_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_INVITE_FRIEND_INVITE_FAIL',
    'TOX_ERR_GROUP_INVITE_FRIEND_OK',
    'TOX_ERR_GROUP_IS_CONNECTED_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_IS_CONNECTED_OK', 'TOX_ERR_GROUP_JOIN_BAD_CHAT_ID',
    'TOX_ERR_GROUP_JOIN_CORE', 'TOX_ERR_GROUP_JOIN_EMPTY',
    'TOX_ERR_GROUP_JOIN_INIT', 'TOX_ERR_GROUP_JOIN_OK',
    'TOX_ERR_GROUP_JOIN_PASSWORD', 'TOX_ERR_GROUP_JOIN_TOO_LONG',
    'TOX_ERR_GROUP_KICK_PEER_FAIL_ACTION',
    'TOX_ERR_GROUP_KICK_PEER_FAIL_SEND',
    'TOX_ERR_GROUP_KICK_PEER_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_KICK_PEER_OK',
    'TOX_ERR_GROUP_KICK_PEER_PEER_NOT_FOUND',
    'TOX_ERR_GROUP_KICK_PEER_PERMISSIONS',
    'TOX_ERR_GROUP_KICK_PEER_SELF', 'TOX_ERR_GROUP_LEAVE_FAIL_SEND',
    'TOX_ERR_GROUP_LEAVE_GROUP_NOT_FOUND', 'TOX_ERR_GROUP_LEAVE_OK',
    'TOX_ERR_GROUP_LEAVE_TOO_LONG', 'TOX_ERR_GROUP_NEW_ANNOUNCE',
    'TOX_ERR_GROUP_NEW_EMPTY', 'TOX_ERR_GROUP_NEW_INIT',
    'TOX_ERR_GROUP_NEW_OK', 'TOX_ERR_GROUP_NEW_STATE',
    'TOX_ERR_GROUP_NEW_TOO_LONG',
    'TOX_ERR_GROUP_PEER_QUERY_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_PEER_QUERY_OK',
    'TOX_ERR_GROUP_PEER_QUERY_PEER_NOT_FOUND',
    'TOX_ERR_GROUP_RECONNECT_CORE',
    'TOX_ERR_GROUP_RECONNECT_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_RECONNECT_OK',
    'TOX_ERR_GROUP_SELF_NAME_SET_FAIL_SEND',
    'TOX_ERR_GROUP_SELF_NAME_SET_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SELF_NAME_SET_INVALID',
    'TOX_ERR_GROUP_SELF_NAME_SET_OK',
    'TOX_ERR_GROUP_SELF_NAME_SET_TOO_LONG',
    'TOX_ERR_GROUP_SELF_QUERY_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SELF_QUERY_OK',
    'TOX_ERR_GROUP_SELF_STATUS_SET_FAIL_SEND',
    'TOX_ERR_GROUP_SELF_STATUS_SET_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SELF_STATUS_SET_OK',
    'TOX_ERR_GROUP_SEND_CUSTOM_PACKET_DISCONNECTED',
    'TOX_ERR_GROUP_SEND_CUSTOM_PACKET_EMPTY',
    'TOX_ERR_GROUP_SEND_CUSTOM_PACKET_FAIL_SEND',
    'TOX_ERR_GROUP_SEND_CUSTOM_PACKET_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SEND_CUSTOM_PACKET_OK',
    'TOX_ERR_GROUP_SEND_CUSTOM_PACKET_TOO_LONG',
    'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_DISCONNECTED',
    'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_EMPTY',
    'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_FAIL_SEND',
    'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_OK',
    'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_PEER_NOT_FOUND',
    'TOX_ERR_GROUP_SEND_CUSTOM_PRIVATE_PACKET_TOO_LONG',
    'TOX_ERR_GROUP_SEND_MESSAGE_BAD_TYPE',
    'TOX_ERR_GROUP_SEND_MESSAGE_DISCONNECTED',
    'TOX_ERR_GROUP_SEND_MESSAGE_EMPTY',
    'TOX_ERR_GROUP_SEND_MESSAGE_FAIL_SEND',
    'TOX_ERR_GROUP_SEND_MESSAGE_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SEND_MESSAGE_OK',
    'TOX_ERR_GROUP_SEND_MESSAGE_PERMISSIONS',
    'TOX_ERR_GROUP_SEND_MESSAGE_TOO_LONG',
    'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_BAD_TYPE',
    'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_DISCONNECTED',
    'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_EMPTY',
    'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_FAIL_SEND',
    'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_OK',
    'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_PEER_NOT_FOUND',
    'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_PERMISSIONS',
    'TOX_ERR_GROUP_SEND_PRIVATE_MESSAGE_TOO_LONG',
    'TOX_ERR_GROUP_SET_IGNORE_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SET_IGNORE_OK',
    'TOX_ERR_GROUP_SET_IGNORE_PEER_NOT_FOUND',
    'TOX_ERR_GROUP_SET_IGNORE_SELF',
    'TOX_ERR_GROUP_SET_PASSWORD_DISCONNECTED',
    'TOX_ERR_GROUP_SET_PASSWORD_FAIL_SEND',
    'TOX_ERR_GROUP_SET_PASSWORD_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SET_PASSWORD_MALLOC',
    'TOX_ERR_GROUP_SET_PASSWORD_OK',
    'TOX_ERR_GROUP_SET_PASSWORD_PERMISSIONS',
    'TOX_ERR_GROUP_SET_PASSWORD_TOO_LONG',
    'TOX_ERR_GROUP_SET_PEER_LIMIT_DISCONNECTED',
    'TOX_ERR_GROUP_SET_PEER_LIMIT_FAIL_SEND',
    'TOX_ERR_GROUP_SET_PEER_LIMIT_FAIL_SET',
    'TOX_ERR_GROUP_SET_PEER_LIMIT_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SET_PEER_LIMIT_OK',
    'TOX_ERR_GROUP_SET_PEER_LIMIT_PERMISSIONS',
    'TOX_ERR_GROUP_SET_PRIVACY_STATE_DISCONNECTED',
    'TOX_ERR_GROUP_SET_PRIVACY_STATE_FAIL_SEND',
    'TOX_ERR_GROUP_SET_PRIVACY_STATE_FAIL_SET',
    'TOX_ERR_GROUP_SET_PRIVACY_STATE_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SET_PRIVACY_STATE_OK',
    'TOX_ERR_GROUP_SET_PRIVACY_STATE_PERMISSIONS',
    'TOX_ERR_GROUP_SET_ROLE_ASSIGNMENT',
    'TOX_ERR_GROUP_SET_ROLE_FAIL_ACTION',
    'TOX_ERR_GROUP_SET_ROLE_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SET_ROLE_OK',
    'TOX_ERR_GROUP_SET_ROLE_PEER_NOT_FOUND',
    'TOX_ERR_GROUP_SET_ROLE_PERMISSIONS',
    'TOX_ERR_GROUP_SET_ROLE_SELF',
    'TOX_ERR_GROUP_SET_TOPIC_LOCK_DISCONNECTED',
    'TOX_ERR_GROUP_SET_TOPIC_LOCK_FAIL_SEND',
    'TOX_ERR_GROUP_SET_TOPIC_LOCK_FAIL_SET',
    'TOX_ERR_GROUP_SET_TOPIC_LOCK_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SET_TOPIC_LOCK_INVALID',
    'TOX_ERR_GROUP_SET_TOPIC_LOCK_OK',
    'TOX_ERR_GROUP_SET_TOPIC_LOCK_PERMISSIONS',
    'TOX_ERR_GROUP_SET_VOICE_STATE_DISCONNECTED',
    'TOX_ERR_GROUP_SET_VOICE_STATE_FAIL_SEND',
    'TOX_ERR_GROUP_SET_VOICE_STATE_FAIL_SET',
    'TOX_ERR_GROUP_SET_VOICE_STATE_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_SET_VOICE_STATE_OK',
    'TOX_ERR_GROUP_SET_VOICE_STATE_PERMISSIONS',
    'TOX_ERR_GROUP_STATE_QUERY_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_STATE_QUERY_OK',
    'TOX_ERR_GROUP_TOPIC_SET_DISCONNECTED',
    'TOX_ERR_GROUP_TOPIC_SET_FAIL_CREATE',
    'TOX_ERR_GROUP_TOPIC_SET_FAIL_SEND',
    'TOX_ERR_GROUP_TOPIC_SET_GROUP_NOT_FOUND',
    'TOX_ERR_GROUP_TOPIC_SET_OK',
    'TOX_ERR_GROUP_TOPIC_SET_PERMISSIONS',
    'TOX_ERR_GROUP_TOPIC_SET_TOO_LONG', 'TOX_ERR_NEW',
    'TOX_ERR_NEW_LOAD_BAD_FORMAT', 'TOX_ERR_NEW_LOAD_ENCRYPTED',
    'TOX_ERR_NEW_MALLOC', 'TOX_ERR_NEW_NULL', 'TOX_ERR_NEW_OK',
    'TOX_ERR_NEW_PORT_ALLOC', 'TOX_ERR_NEW_PROXY_BAD_HOST',
    'TOX_ERR_NEW_PROXY_BAD_PORT', 'TOX_ERR_NEW_PROXY_BAD_TYPE',
    'TOX_ERR_NEW_PROXY_NOT_FOUND', 'TOX_ERR_NEW__enumvalues',
    'TOX_ERR_OPTIONS_NEW', 'TOX_ERR_OPTIONS_NEW_MALLOC',
    'TOX_ERR_OPTIONS_NEW_OK', 'TOX_ERR_OPTIONS_NEW__enumvalues',
    'TOX_ERR_SET_INFO', 'TOX_ERR_SET_INFO_NULL',
    'TOX_ERR_SET_INFO_OK', 'TOX_ERR_SET_INFO_TOO_LONG',
    'TOX_ERR_SET_INFO__enumvalues', 'TOX_ERR_SET_TYPING',
    'TOX_ERR_SET_TYPING_FRIEND_NOT_FOUND', 'TOX_ERR_SET_TYPING_OK',
    'TOX_ERR_SET_TYPING__enumvalues', 'TOX_FILE_CONTROL',
    'TOX_FILE_CONTROL_CANCEL', 'TOX_FILE_CONTROL_PAUSE',
    'TOX_FILE_CONTROL_RESUME', 'TOX_FILE_CONTROL__enumvalues',
    'TOX_FILE_KIND', 'TOX_FILE_KIND_AVATAR', 'TOX_FILE_KIND_DATA',
    'TOX_FILE_KIND__enumvalues', 'TOX_GROUP_EXIT_TYPE_DISCONNECTED',
    'TOX_GROUP_EXIT_TYPE_KICK', 'TOX_GROUP_EXIT_TYPE_QUIT',
    'TOX_GROUP_EXIT_TYPE_SELF_DISCONNECTED',
    'TOX_GROUP_EXIT_TYPE_SYNC_ERROR', 'TOX_GROUP_EXIT_TYPE_TIMEOUT',
    'TOX_GROUP_JOIN_FAIL_INVALID_PASSWORD',
    'TOX_GROUP_JOIN_FAIL_PEER_LIMIT', 'TOX_GROUP_JOIN_FAIL_UNKNOWN',
    'TOX_GROUP_MOD_EVENT_KICK', 'TOX_GROUP_MOD_EVENT_MODERATOR',
    'TOX_GROUP_MOD_EVENT_OBSERVER', 'TOX_GROUP_MOD_EVENT_USER',
    'TOX_GROUP_PRIVACY_STATE_PRIVATE',
    'TOX_GROUP_PRIVACY_STATE_PUBLIC', 'TOX_GROUP_ROLE_FOUNDER',
    'TOX_GROUP_ROLE_MODERATOR', 'TOX_GROUP_ROLE_OBSERVER',
    'TOX_GROUP_ROLE_USER', 'TOX_GROUP_TOPIC_LOCK_DISABLED',
    'TOX_GROUP_TOPIC_LOCK_ENABLED', 'TOX_GROUP_VOICE_STATE_ALL',
    'TOX_GROUP_VOICE_STATE_FOUNDER',
    'TOX_GROUP_VOICE_STATE_MODERATOR', 'TOX_LOG_LEVEL',
    'TOX_LOG_LEVEL_DEBUG', 'TOX_LOG_LEVEL_ERROR',
    'TOX_LOG_LEVEL_INFO', 'TOX_LOG_LEVEL_TRACE',
    'TOX_LOG_LEVEL_WARNING', 'TOX_LOG_LEVEL__enumvalues',
    'TOX_MESSAGE_TYPE', 'TOX_MESSAGE_TYPE_ACTION',
    'TOX_MESSAGE_TYPE_NORMAL', 'TOX_MESSAGE_TYPE__enumvalues',
    'TOX_PROXY_TYPE', 'TOX_PROXY_TYPE_HTTP', 'TOX_PROXY_TYPE_NONE',
    'TOX_PROXY_TYPE_SOCKS5', 'TOX_PROXY_TYPE__enumvalues',
    'TOX_SAVEDATA_TYPE', 'TOX_SAVEDATA_TYPE_NONE',
    'TOX_SAVEDATA_TYPE_SECRET_KEY', 'TOX_SAVEDATA_TYPE_TOX_SAVE',
    'TOX_SAVEDATA_TYPE__enumvalues', 'TOX_USER_STATUS',
    'TOX_USER_STATUS_AWAY', 'TOX_USER_STATUS_BUSY',
    'TOX_USER_STATUS_NONE', 'TOX_USER_STATUS__enumvalues', 'Tox',
    'Tox_Conference_Number', 'Tox_Conference_Offline_Peer_Number',
    'Tox_Conference_Peer_Number', 'Tox_Conference_Type',
    'Tox_Connection', 'Tox_Err_Bootstrap', 'Tox_Err_Conference_By_Id',
    'Tox_Err_Conference_By_Uid', 'Tox_Err_Conference_Delete',
    'Tox_Err_Conference_Get_Type', 'Tox_Err_Conference_Invite',
    'Tox_Err_Conference_Join', 'Tox_Err_Conference_New',
    'Tox_Err_Conference_Peer_Query',
    'Tox_Err_Conference_Send_Message',
    'Tox_Err_Conference_Set_Max_Offline', 'Tox_Err_Conference_Title',
    'Tox_Err_File_Control', 'Tox_Err_File_Get', 'Tox_Err_File_Seek',
    'Tox_Err_File_Send', 'Tox_Err_File_Send_Chunk',
    'Tox_Err_Friend_Add', 'Tox_Err_Friend_By_Public_Key',
    'Tox_Err_Friend_Custom_Packet', 'Tox_Err_Friend_Delete',
    'Tox_Err_Friend_Get_Last_Online', 'Tox_Err_Friend_Get_Public_Key',
    'Tox_Err_Friend_Query', 'Tox_Err_Friend_Send_Message',
    'Tox_Err_Get_Port', 'Tox_Err_Group_Disconnect',
    'Tox_Err_Group_Invite_Accept', 'Tox_Err_Group_Invite_Friend',
    'Tox_Err_Group_Is_Connected', 'Tox_Err_Group_Join',
    'Tox_Err_Group_Kick_Peer', 'Tox_Err_Group_Leave',
    'Tox_Err_Group_New', 'Tox_Err_Group_Peer_Query',
    'Tox_Err_Group_Reconnect', 'Tox_Err_Group_Self_Name_Set',
    'Tox_Err_Group_Self_Query', 'Tox_Err_Group_Self_Status_Set',
    'Tox_Err_Group_Send_Custom_Packet',
    'Tox_Err_Group_Send_Custom_Private_Packet',
    'Tox_Err_Group_Send_Message',
    'Tox_Err_Group_Send_Private_Message', 'Tox_Err_Group_Set_Ignore',
    'Tox_Err_Group_Set_Password', 'Tox_Err_Group_Set_Peer_Limit',
    'Tox_Err_Group_Set_Privacy_State', 'Tox_Err_Group_Set_Role',
    'Tox_Err_Group_Set_Topic_Lock', 'Tox_Err_Group_Set_Voice_State',
    'Tox_Err_Group_State_Query', 'Tox_Err_Group_Topic_Set',
    'Tox_Err_New', 'Tox_Err_Options_New', 'Tox_Err_Set_Info',
    'Tox_Err_Set_Typing', 'Tox_File_Control', 'Tox_File_Kind',
    'Tox_File_Number', 'Tox_Friend_Message_Id', 'Tox_Friend_Number',
    'Tox_Group_Exit_Type', 'Tox_Group_Join_Fail',
    'Tox_Group_Message_Id', 'Tox_Group_Mod_Event', 'Tox_Group_Number',
    'Tox_Group_Peer_Number', 'Tox_Group_Privacy_State',
    'Tox_Group_Role', 'Tox_Group_Topic_Lock', 'Tox_Group_Voice_State',
    'Tox_Log_Level', 'Tox_Message_Type', 'Tox_Options',
    'Tox_Proxy_Type', 'Tox_Savedata_Type', 'Tox_User_Status',
    'size_t', 'struct_Tox', 'struct_Tox_Options', 'tox_add_tcp_relay',
    'tox_address_size', 'tox_bootstrap',
    'tox_callback_conference_connected',
    'tox_callback_conference_invite',
    'tox_callback_conference_message',
    'tox_callback_conference_peer_list_changed',
    'tox_callback_conference_peer_name',
    'tox_callback_conference_title',
    'tox_callback_file_chunk_request', 'tox_callback_file_recv',
    'tox_callback_file_recv_chunk', 'tox_callback_file_recv_control',
    'tox_callback_friend_connection_status',
    'tox_callback_friend_lossless_packet',
    'tox_callback_friend_lossy_packet', 'tox_callback_friend_message',
    'tox_callback_friend_name', 'tox_callback_friend_read_receipt',
    'tox_callback_friend_request', 'tox_callback_friend_status',
    'tox_callback_friend_status_message',
    'tox_callback_friend_typing', 'tox_callback_group_custom_packet',
    'tox_callback_group_custom_private_packet',
    'tox_callback_group_invite', 'tox_callback_group_join_fail',
    'tox_callback_group_message', 'tox_callback_group_moderation',
    'tox_callback_group_password', 'tox_callback_group_peer_exit',
    'tox_callback_group_peer_join', 'tox_callback_group_peer_limit',
    'tox_callback_group_peer_name', 'tox_callback_group_peer_status',
    'tox_callback_group_privacy_state',
    'tox_callback_group_private_message',
    'tox_callback_group_self_join', 'tox_callback_group_topic',
    'tox_callback_group_topic_lock', 'tox_callback_group_voice_state',
    'tox_callback_self_connection_status', 'tox_conference_by_id',
    'tox_conference_by_uid', 'tox_conference_connected_cb',
    'tox_conference_delete', 'tox_conference_get_chatlist',
    'tox_conference_get_chatlist_size', 'tox_conference_get_id',
    'tox_conference_get_title', 'tox_conference_get_title_size',
    'tox_conference_get_type', 'tox_conference_get_uid',
    'tox_conference_id_size', 'tox_conference_invite',
    'tox_conference_invite_cb', 'tox_conference_join',
    'tox_conference_message_cb', 'tox_conference_new',
    'tox_conference_offline_peer_count',
    'tox_conference_offline_peer_get_last_active',
    'tox_conference_offline_peer_get_name',
    'tox_conference_offline_peer_get_name_size',
    'tox_conference_offline_peer_get_public_key',
    'tox_conference_peer_count', 'tox_conference_peer_get_name',
    'tox_conference_peer_get_name_size',
    'tox_conference_peer_get_public_key',
    'tox_conference_peer_list_changed_cb',
    'tox_conference_peer_name_cb',
    'tox_conference_peer_number_is_ours',
    'tox_conference_send_message', 'tox_conference_set_max_offline',
    'tox_conference_set_title', 'tox_conference_title_cb',
    'tox_conference_type_to_string', 'tox_conference_uid_size',
    'tox_connection_to_string', 'tox_err_bootstrap_to_string',
    'tox_err_conference_by_id_to_string',
    'tox_err_conference_by_uid_to_string',
    'tox_err_conference_delete_to_string',
    'tox_err_conference_get_type_to_string',
    'tox_err_conference_invite_to_string',
    'tox_err_conference_join_to_string',
    'tox_err_conference_new_to_string',
    'tox_err_conference_peer_query_to_string',
    'tox_err_conference_send_message_to_string',
    'tox_err_conference_set_max_offline_to_string',
    'tox_err_conference_title_to_string',
    'tox_err_file_control_to_string', 'tox_err_file_get_to_string',
    'tox_err_file_seek_to_string',
    'tox_err_file_send_chunk_to_string',
    'tox_err_file_send_to_string', 'tox_err_friend_add_to_string',
    'tox_err_friend_by_public_key_to_string',
    'tox_err_friend_custom_packet_to_string',
    'tox_err_friend_delete_to_string',
    'tox_err_friend_get_last_online_to_string',
    'tox_err_friend_get_public_key_to_string',
    'tox_err_friend_query_to_string',
    'tox_err_friend_send_message_to_string',
    'tox_err_get_port_to_string',
    'tox_err_group_disconnect_to_string',
    'tox_err_group_invite_accept_to_string',
    'tox_err_group_invite_friend_to_string',
    'tox_err_group_is_connected_to_string',
    'tox_err_group_join_to_string',
    'tox_err_group_kick_peer_to_string',
    'tox_err_group_leave_to_string', 'tox_err_group_new_to_string',
    'tox_err_group_peer_query_to_string',
    'tox_err_group_reconnect_to_string',
    'tox_err_group_self_name_set_to_string',
    'tox_err_group_self_query_to_string',
    'tox_err_group_self_status_set_to_string',
    'tox_err_group_send_custom_packet_to_string',
    'tox_err_group_send_custom_private_packet_to_string',
    'tox_err_group_send_message_to_string',
    'tox_err_group_send_private_message_to_string',
    'tox_err_group_set_ignore_to_string',
    'tox_err_group_set_password_to_string',
    'tox_err_group_set_peer_limit_to_string',
    'tox_err_group_set_privacy_state_to_string',
    'tox_err_group_set_role_to_string',
    'tox_err_group_set_topic_lock_to_string',
    'tox_err_group_set_voice_state_to_string',
    'tox_err_group_state_query_to_string',
    'tox_err_group_topic_set_to_string', 'tox_err_new_to_string',
    'tox_err_options_new_to_string', 'tox_err_set_info_to_string',
    'tox_err_set_typing_to_string', 'tox_file_chunk_request_cb',
    'tox_file_control', 'tox_file_control_to_string',
    'tox_file_get_file_id', 'tox_file_id_length', 'tox_file_recv_cb',
    'tox_file_recv_chunk_cb', 'tox_file_recv_control_cb',
    'tox_file_seek', 'tox_file_send', 'tox_file_send_chunk',
    'tox_friend_add', 'tox_friend_add_norequest',
    'tox_friend_by_public_key', 'tox_friend_connection_status_cb',
    'tox_friend_delete', 'tox_friend_exists',
    'tox_friend_get_connection_status', 'tox_friend_get_last_online',
    'tox_friend_get_name', 'tox_friend_get_name_size',
    'tox_friend_get_public_key', 'tox_friend_get_status',
    'tox_friend_get_status_message',
    'tox_friend_get_status_message_size', 'tox_friend_get_typing',
    'tox_friend_lossless_packet_cb', 'tox_friend_lossy_packet_cb',
    'tox_friend_message_cb', 'tox_friend_name_cb',
    'tox_friend_read_receipt_cb', 'tox_friend_request_cb',
    'tox_friend_send_lossless_packet', 'tox_friend_send_lossy_packet',
    'tox_friend_send_message', 'tox_friend_status_cb',
    'tox_friend_status_message_cb', 'tox_friend_typing_cb',
    'tox_get_savedata', 'tox_get_savedata_size',
    'tox_group_chat_id_size', 'tox_group_custom_packet_cb',
    'tox_group_custom_private_packet_cb', 'tox_group_disconnect',
    'tox_group_exit_type_to_string', 'tox_group_get_chat_id',
    'tox_group_get_name', 'tox_group_get_name_size',
    'tox_group_get_number_groups', 'tox_group_get_password',
    'tox_group_get_password_size', 'tox_group_get_peer_limit',
    'tox_group_get_privacy_state', 'tox_group_get_topic',
    'tox_group_get_topic_lock', 'tox_group_get_topic_size',
    'tox_group_get_voice_state', 'tox_group_invite_accept',
    'tox_group_invite_cb', 'tox_group_invite_friend',
    'tox_group_is_connected', 'tox_group_join',
    'tox_group_join_fail_cb', 'tox_group_join_fail_to_string',
    'tox_group_kick_peer', 'tox_group_leave',
    'tox_group_max_custom_lossless_packet_length',
    'tox_group_max_custom_lossy_packet_length',
    'tox_group_max_group_name_length', 'tox_group_max_message_length',
    'tox_group_max_part_length', 'tox_group_max_password_size',
    'tox_group_max_topic_length', 'tox_group_message_cb',
    'tox_group_mod_event_to_string', 'tox_group_moderation_cb',
    'tox_group_new', 'tox_group_password_cb',
    'tox_group_peer_exit_cb', 'tox_group_peer_get_connection_status',
    'tox_group_peer_get_name', 'tox_group_peer_get_name_size',
    'tox_group_peer_get_public_key', 'tox_group_peer_get_role',
    'tox_group_peer_get_status', 'tox_group_peer_join_cb',
    'tox_group_peer_limit_cb', 'tox_group_peer_name_cb',
    'tox_group_peer_public_key_size', 'tox_group_peer_status_cb',
    'tox_group_privacy_state_cb', 'tox_group_privacy_state_to_string',
    'tox_group_private_message_cb', 'tox_group_reconnect',
    'tox_group_role_to_string', 'tox_group_self_get_name',
    'tox_group_self_get_name_size', 'tox_group_self_get_peer_id',
    'tox_group_self_get_public_key', 'tox_group_self_get_role',
    'tox_group_self_get_status', 'tox_group_self_join_cb',
    'tox_group_self_set_name', 'tox_group_self_set_status',
    'tox_group_send_custom_packet',
    'tox_group_send_custom_private_packet', 'tox_group_send_message',
    'tox_group_send_private_message', 'tox_group_set_ignore',
    'tox_group_set_password', 'tox_group_set_peer_limit',
    'tox_group_set_privacy_state', 'tox_group_set_role',
    'tox_group_set_topic', 'tox_group_set_topic_lock',
    'tox_group_set_voice_state', 'tox_group_topic_cb',
    'tox_group_topic_lock_cb', 'tox_group_topic_lock_to_string',
    'tox_group_voice_state_cb', 'tox_group_voice_state_to_string',
    'tox_hash', 'tox_hash_length', 'tox_iterate',
    'tox_iteration_interval', 'tox_kill', 'tox_log_cb',
    'tox_log_level_to_string', 'tox_max_custom_packet_size',
    'tox_max_filename_length', 'tox_max_friend_request_length',
    'tox_max_hostname_length', 'tox_max_message_length',
    'tox_max_name_length', 'tox_max_status_message_length',
    'tox_message_type_to_string', 'tox_new', 'tox_nospam_size',
    'tox_options_default', 'tox_options_free',
    'tox_options_get_dht_announcements_enabled',
    'tox_options_get_end_port',
    'tox_options_get_experimental_groups_persistence',
    'tox_options_get_experimental_thread_safety',
    'tox_options_get_hole_punching_enabled',
    'tox_options_get_ipv6_enabled',
    'tox_options_get_local_discovery_enabled',
    'tox_options_get_log_callback', 'tox_options_get_log_user_data',
    'tox_options_get_proxy_host', 'tox_options_get_proxy_port',
    'tox_options_get_proxy_type', 'tox_options_get_savedata_data',
    'tox_options_get_savedata_length',
    'tox_options_get_savedata_type', 'tox_options_get_start_port',
    'tox_options_get_tcp_port', 'tox_options_get_udp_enabled',
    'tox_options_new', 'tox_options_set_dht_announcements_enabled',
    'tox_options_set_end_port',
    'tox_options_set_experimental_groups_persistence',
    'tox_options_set_experimental_thread_safety',
    'tox_options_set_hole_punching_enabled',
    'tox_options_set_ipv6_enabled',
    'tox_options_set_local_discovery_enabled',
    'tox_options_set_log_callback', 'tox_options_set_log_user_data',
    'tox_options_set_proxy_host', 'tox_options_set_proxy_port',
    'tox_options_set_proxy_type', 'tox_options_set_savedata_data',
    'tox_options_set_savedata_length',
    'tox_options_set_savedata_type', 'tox_options_set_start_port',
    'tox_options_set_tcp_port', 'tox_options_set_udp_enabled',
    'tox_proxy_type_to_string', 'tox_public_key_size',
    'tox_savedata_type_to_string', 'tox_secret_key_size',
    'tox_self_connection_status_cb', 'tox_self_get_address',
    'tox_self_get_connection_status', 'tox_self_get_dht_id',
    'tox_self_get_friend_list', 'tox_self_get_friend_list_size',
    'tox_self_get_name', 'tox_self_get_name_size',
    'tox_self_get_nospam', 'tox_self_get_public_key',
    'tox_self_get_secret_key', 'tox_self_get_status',
    'tox_self_get_status_message', 'tox_self_get_status_message_size',
    'tox_self_get_tcp_port', 'tox_self_get_udp_port',
    'tox_self_set_name', 'tox_self_set_nospam', 'tox_self_set_status',
    'tox_self_set_status_message', 'tox_self_set_typing',
    'tox_user_status_to_string', 'tox_version_is_compatible',
    'tox_version_major', 'tox_version_minor', 'tox_version_patch',
    'uint16_t', 'uint32_t', 'uint64_t']
